local ffi = require("ffi")
local gl = {}

ffi.cdef[[
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef ptrdiff_t GLintptrARB;
typedef ptrdiff_t GLsizeiptrARB;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef enum GL_LUA_ENUMS {
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 37588,
	GL_INTERPOLATE = 34165,
	GL_TEXTURE_4DSIZE_SGIS = 33078,
	GL_NORMAL_ARRAY_ADDRESS_NV = 36642,
	GL_UNSIGNED_INT_10_10_10_2 = 32822,
	GL_IMAGE_1D_ARRAY_EXT = 36946,
	GL_CLAMP_VERTEX_COLOR = 35098,
	GL_CURRENT_QUERY_EXT = 34917,
	GL_DT_BIAS_NV = 34583,
	GL_PIXEL_MAG_FILTER_EXT = 33585,
	GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 36901,
	GL_NO_RESET_NOTIFICATION = 33377,
	GL_PIXEL_MAP_I_TO_A_SIZE = 3253,
	GL_RGB8UI = 36221,
	GL_TEXTURE6 = 33990,
	GL_CONSTANT_ALPHA_EXT = 32771,
	GL_STORAGE_CACHED_APPLE = 34238,
	GL_EVAL_VERTEX_ATTRIB11_NV = 34513,
	GL_NUM_INSTRUCTIONS_TOTAL_ATI = 35186,
	GL_TEXTURE_BINDING_3D_OES = 32874,
	GL_PROXY_TEXTURE_1D_ARRAY = 35865,
	GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 36423,
	GL_COLOR_ATTACHMENT8 = 36072,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 35976,
	GL_SHADER_IMAGE_ATOMIC = 33446,
	GL_DRAW_FRAMEBUFFER_APPLE = 36009,
	GL_MAX_TESS_GEN_LEVEL = 36478,
	GL_FRAMEBUFFER_BINDING_OES = 36006,
	GL_TEXTURE_LIGHTING_MODE_HP = 33127,
	GL_CMYK_EXT = 32780,
	GL_UNPACK_ALIGNMENT = 3317,
	GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 33778,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320,
	GL_PREVIOUS_ARB = 34168,
	GL_GEQUAL = 518,
	GL_COLOR_ARRAY = 32886,
	GL_FOG_COORD_ARRAY_TYPE = 33876,
	GL_ALPHA8 = 32828,
	GL_TEXTURE_BINDING_RENDERBUFFER_NV = 36435,
	GL_LOCATION = 37646,
	GL_LIGHTEN_NV = 37528,
	GL_RENDER_MODE = 3136,
	GL_DST_ATOP_NV = 37519,
	GL_RGB5_A1_EXT = 32855,
	GL_DOT4_ATI = 35175,
	GL_TRIANGLES_ADJACENCY_EXT = 12,
	GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 2048,
	GL_COLOR_ATTACHMENT12_NV = 36076,
	GL_ALPHA_EXTENDED_RANGE_SGIX = 34286,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 36182,
	GL_TOP_LEVEL_ARRAY_SIZE = 37644,
	GL_COLOR_TABLE_LUMINANCE_SIZE = 32990,
	GL_POST_CONVOLUTION_BLUE_SCALE = 32798,
	GL_MAX_PROGRAM_TEXEL_OFFSET = 35077,
	GL_GEOMETRY_DEFORMATION_BIT_SGIX = 2,
	GL_MIN_PROGRAM_TEXEL_OFFSET = 35076,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 35881,
	GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300,
	GL_TEXTURE_DEPTH_EXT = 32881,
	GL_STENCIL_COMPONENTS = 33413,
	GL_UNPACK_RESAMPLE_SGIX = 33839,
	GL_BLUE = 6405,
	GL_GREEN_BITS = 3411,
	GL_TEXTURE7_ARB = 33991,
	GL_PERFQUERY_WAIT_INTEL = 33787,
	GL_UNIFORM_BUFFER_EXT = 36334,
	GL_CULL_VERTEX_OBJECT_POSITION_EXT = 33196,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 33375,
	GL_RENDERBUFFER_HEIGHT_OES = 36163,
	GL_COLOR_BUFFER_BIT5_QCOM = 32,
	GL_POLYGON_OFFSET_POINT = 10753,
	GL_FRAMEBUFFER_BINDING_EXT = 36006,
	GL_COLOR_SUM_ARB = 33880,
	GL_SHADER_TYPE = 35663,
	GL_TEXTURE_COMPARE_MODE = 34892,
	GL_RG32I = 33339,
	GL_COLOR_ATTACHMENT0_EXT = 36064,
	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296,
	GL_TRANSPOSE_SGI = 33226,
	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 36665,
	GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884,
	GL_LUMINANCE4_ALPHA4_OES = 32835,
	GL_DRAW_INDIRECT_BUFFER = 36671,
	GL_SOURCE1_ALPHA_EXT = 34185,
	GL_TEXTURE14 = 33998,
	GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 536870912,
	GL_SIGNED_ALPHA_NV = 34565,
	GL_CLAMP_TO_EDGE_SGIS = 33071,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 36442,
	GL_INTERNALFORMAT_STENCIL_TYPE = 33405,
	GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718,
	GL_QUERY_RESULT_ARB = 34918,
	GL_LINES_ADJACENCY_OES = 10,
	GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 33160,
	GL_PATH_GEN_COMPONENTS_NV = 37043,
	GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 36200,
	GL_RETURN = 258,
	GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 33794,
	GL_UNSIGNED_SHORT_1_15_REV_MESA = 34644,
	GL_MAX_FRAMEBUFFER_LAYERS = 37655,
	GL_TEXTURE19 = 34003,
	GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 33621,
	GL_SAMPLE_COVERAGE = 32928,
	GL_RIGHT = 1031,
	GL_HI_BIAS_NV = 34580,
	GL_LIST_BIT = 131072,
	GL_DECR = 7683,
	GL_MAX_TRACK_MATRICES_NV = 34351,
	GL_MAX_WIDTH = 33406,
	GL_RED_NV = 6403,
	GL_SCREEN_KHR = 37525,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 37069,
	GL_MAX_LIGHTS = 3377,
	GL_DISPLAY_LIST = 33511,
	GL_VARIABLE_B_NV = 34084,
	GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638,
	GL_RGB8UI_EXT = 36221,
	GL_GLOBAL_ALPHA_SUN = 33241,
	GL_TEXTURE_ALPHA_SIZE = 32863,
	GL_DEPTH_COMPONENT = 6402,
	GL_GEOMETRY_INPUT_TYPE = 35095,
	GL_REPLACE = 7681,
	GL_PALETTE4_R5_G6_B5_OES = 35730,
	GL_ADD_SIGNED_ARB = 34164,
	GL_OPERAND0_ALPHA_EXT = 34200,
	GL_LOW_INT = 36339,
	GL_DEBUG_SOURCE_API = 33350,
	GL_PROXY_TEXTURE_3D = 32880,
	GL_PROGRAM_OUTPUT = 37604,
	GL_CULL_FRAGMENT_NV = 34535,
	GL_OP_CLAMP_EXT = 34702,
	GL_CURRENT_PALETTE_MATRIX_ARB = 34883,
	GL_DEPTH_FUNC = 2932,
	GL_TESS_GEN_POINT_MODE_EXT = 36473,
	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428,
	GL_VERTEX_ID_NV = 35963,
	GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 35916,
	GL_IMAGE_1D = 36940,
	GL_DRAW_BUFFER12_NV = 34865,
	GL_DOUBLE_VEC2 = 36860,
	GL_INT_IMAGE_2D_ARRAY_EXT = 36958,
	GL_BINORMAL_ARRAY_TYPE_EXT = 33856,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36879,
	GL_COMPRESSED_SRGB_EXT = 35912,
	GL_ZERO_TO_ONE = 37727,
	GL_EVAL_TRIANGULAR_2D_NV = 34497,
	GL_IMAGE_PIXEL_TYPE = 33450,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36480,
	GL_NAME_LENGTH = 37625,
	GL_DRAW_BUFFER12 = 34865,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 37575,
	GL_LUMINANCE_ALPHA32F_ARB = 34841,
	GL_TEXTURE_TARGET = 4102,
	GL_PROVOKING_VERTEX_EXT = 36431,
	GL_OPERAND0_ALPHA_ARB = 34200,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 37172,
	GL_COLOR = 6144,
	GL_BUFFER_MAP_LENGTH = 37152,
	GL_SHADER_OBJECT_ARB = 35656,
	GL_ACTIVE_ATTRIBUTES = 35721,
	GL_UNSIGNED_INT8_VEC2_NV = 36845,
	GL_FOG_COORDINATE_ARRAY_POINTER = 33878,
	GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 1,
	GL_NURBS_KNOT_VECTOR_SGIX = 33262,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,
	GL_COLOR_ARRAY_COUNT_EXT = 32900,
	GL_ELEMENT_ARRAY_BUFFER = 34963,
	GL_INTENSITY_ICC_SGIX = 33892,
	GL_MAX_ASYNC_TEX_IMAGE_SGIX = 33631,
	GL_COLOR_SUM_CLAMP_NV = 34127,
	GL_VIEWPORT_SUBPIXEL_BITS = 33372,
	GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 37272,
	GL_TEXTURE_COORD_ARRAY = 32888,
	GL_INTERNALFORMAT_BLUE_TYPE = 33402,
	GL_COLOR_TABLE_BLUE_SIZE = 32988,
	GL_PATH_FILL_MASK_NV = 36993,
	GL_TEXTURE_TYPE_QCOM = 35799,
	GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974,
	GL_WRAP_BORDER_SUN = 33236,
	GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 37196,
	GL_RG32F = 33328,
	GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 33087,
	GL_IMAGE_BINDING_LAYERED = 36668,
	GL_SEPARABLE_2D = 32786,
	GL_TEXTURE25 = 34009,
	GL_RGBA16_SNORM = 36763,
	GL_FOG_COORD_SRC = 33872,
	GL_QUADS_EXT = 7,
	GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828,
	GL_OP_RECIP_SQRT_EXT = 34709,
	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 1,
	GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394,
	GL_COLOR_INDEXES = 5635,
	GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 33493,
	GL_R16UI = 33332,
	GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX = 34289,
	GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995,
	GL_DOT3_RGB = 34478,
	GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 36640,
	GL_VERTEX_SHADER_INVOCATIONS_ARB = 33520,
	GL_RGB_SCALE_ARB = 34163,
	GL_VIDEO_BUFFER_BINDING_NV = 36897,
	GL_TEXTURE_RED_TYPE = 35856,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 35881,
	GL_STENCIL_INDEX16_EXT = 36169,
	GL_ALPHA_MIN_CLAMP_INGR = 34147,
	GL_FENCE_CONDITION_NV = 34036,
	GL_MULTIPLY_NV = 37524,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 34076,
	GL_RGB5_A1_OES = 32855,
	GL_BLEND_SRC_RGB = 32969,
	GL_FRAGMENT_FOG_SGIX = 33644,
	GL_TEXTURE_WRAP_R_OES = 32882,
	GL_PROGRAM_MATRIX_EXT = 36397,
	GL_INT_2_10_10_10_REV = 36255,
	GL_LUMINANCE8_OES = 32832,
	GL_MAP1_TEXTURE_COORD_2_NURBS_SGIX = 33249,
	GL_TEXTURE_MAG_FILTER = 10240,
	GL_RGB565 = 36194,
	GL_ROUND_NV = 37028,
	GL_ALPHA_TEST = 3008,
	GL_RENDERBUFFER_SAMPLES = 36011,
	GL_FONT_UNINTELLIGIBLE_NV = 37739,
	GL_TEXTURE22_ARB = 34006,
	GL_RGBA4_OES = 32854,
	GL_QUERY_COUNTER_BITS_ARB = 34916,
	GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819,
	GL_INDEX_ARRAY_LENGTH_NV = 36654,
	GL_ALPHA16_SIGNED_SGIX = 34280,
	GL_FRAMEBUFFER_BLEND = 33419,
	GL_WRITE_ONLY = 35001,
	GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 33352,
	GL_MATRIX10_ARB = 35018,
	GL_MULTISAMPLE_COVERAGE_MODES_NV = 36370,
	GL_MINMAX = 32814,
	GL_WAIT_FAILED_APPLE = 37149,
	GL_INDEX_LOGIC_OP = 3057,
	GL_INT_SAMPLER_BUFFER_EXT = 36304,
	GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 33070,
	GL_IGLOO_VIEWPORT_OFFSET_SGIX = 33183,
	GL_EMISSION = 5632,
	GL_BLUE_BIAS = 3355,
	GL_RGB16_EXT = 32852,
	GL_INSTRUMENT_BUFFER_POINTER_SGIX = 33152,
	GL_MAP1_NORMAL_NURBS_SGIX = 33231,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 35070,
	GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 33091,
	GL_RELATIVE_ROUNDED_RECT8_NV = 239,
	GL_FRAGMENT_SHADER_BIT = 2,
	GL_TESSELLATION_FACTOR_AMD = 36869,
	GL_VERTICES_SUBMITTED_ARB = 33518,
	GL_TEXTURE_BINDING_CUBE_MAP_EXT = 34068,
	GL_POLYGON_TOKEN = 1795,
	GL_RGB9_E5 = 35901,
	GL_COLOR_BIT_PATTERN_SGIX = 33624,
	GL_INVALID_ENUM = 1280,
	GL_FLOAT_MAT3x2_NV = 35687,
	GL_OBJECT_LINEAR = 9217,
	GL_COLOR_INDEX2_EXT = 32995,
	GL_INVARIANT_DATATYPE_EXT = 34795,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 36494,
	GL_UNIFORM_BARRIER_BIT_EXT = 4,
	GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 33527,
	GL_POINT_SMOOTH_HINT = 3153,
	GL_TEXTURE_STORAGE_HINT_APPLE = 34236,
	GL_R11F_G11F_B10F = 35898,
	GL_STACK_OVERFLOW = 1283,
	GL_RELATIVE_CUBIC_CURVE_TO_NV = 13,
	GL_4_BYTES = 5129,
	GL_BUFFER_STORAGE_FLAGS = 33312,
	GL_POINT_SPRITE_OES = 34913,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 36483,
	GL_CURRENT_RASTER_NORMAL_SGIX = 33798,
	GL_OFFSET_TEXTURE_2D_SCALE_NV = 34530,
	GL_MATRIX9_NV = 34361,
	GL_VERTEX_ARRAY_BUFFER_BINDING = 34966,
	GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 33637,
	GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 36920,
	GL_NUM_SPARSE_LEVELS_ARB = 37290,
	GL_HALF_FLOAT_NV = 5131,
	GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 2,
	GL_BGRA = 32993,
	GL_MULTI_HULLS_NV = 37004,
	GL_SAMPLES_ARB = 32937,
	GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 256,
	GL_CONSTANT_ALPHA = 32771,
	GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 33516,
	GL_OFFSET = 37628,
	GL_SMOOTH = 7425,
	GL_FIXED_OES = 5132,
	GL_LINEARLIGHT_NV = 37543,
	GL_FRONT_LEFT = 1024,
	GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 35214,
	GL_MAX_CLIP_PLANES = 3378,
	GL_DEPTH_WRITEMASK = 2930,
	GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040,
	GL_RGBA8I_EXT = 36238,
	GL_UNSIGNED_NORMALIZED = 35863,
	GL_RGB9_E5_APPLE = 35901,
	GL_ALPHA16_EXTENDED_RANGE_SGIX = 34292,
	GL_SAMPLER_BINDING = 35097,
	GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178,
	GL_UNIFORM_BLOCK_INDEX = 35386,
	GL_BUFFER_MAP_POINTER = 35005,
	GL_LUMINANCE16_ALPHA16_SIGNED_SGIX = 34283,
	GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 36445,
	GL_ALWAYS_FAST_HINT_PGI = 107020,
	GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES = 36320,
	GL_OFFSET_TEXTURE_RECTANGLE_NV = 34380,
	GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375,
	GL_RELEASED_APPLE = 35353,
	GL_POST_CONVOLUTION_ALPHA_BIAS = 32803,
	GL_READ_FRAMEBUFFER = 36008,
	GL_COMBINE_RGB_EXT = 34161,
	GL_R8UI = 33330,
	GL_QUADS = 7,
	GL_COLOR_ALPHA_PAIRING_ATI = 35189,
	GL_PERFQUERY_COUNTER_RAW_INTEL = 38132,
	GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 32944,
	GL_MULTISAMPLE_ARB = 32925,
	GL_MULTISAMPLE_BIT_3DFX = 536870912,
	GL_COLORBURN_KHR = 37530,
	GL_RESET_NOTIFICATION_STRATEGY_ARB = 33366,
	GL_BALI_RASTER_TIMER_INSTRUMENT_SGIX = 33867,
	GL_UNSIGNED_INT_ATOMIC_COUNTER = 37595,
	GL_COLOR_ATTACHMENT15_NV = 36079,
	GL_PIXEL_UNPACK_BUFFER_ARB = 35052,
	GL_FIXED_ONLY_ARB = 35101,
	GL_TEXTURE_COORD_ARRAY_SIZE = 32904,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 36481,
	GL_GEOMETRY_SHADER_INVOCATIONS = 34943,
	GL_OP_MAX_EXT = 34698,
	GL_VARIANT_EXT = 34753,
	GL_RENDER = 7168,
	GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627,
	GL_MAP_STENCIL = 3345,
	GL_DEPTH_PASS_INSTRUMENT_SGIX = 33552,
	GL_PRIMARY_COLOR_NV = 34092,
	GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851,
	GL_RGBA32I = 36226,
	GL_LUMINANCE12_ALPHA12 = 32839,
	GL_RENDERBUFFER_RED_SIZE = 36176,
	GL_MAP_WRITE_BIT_EXT = 2,
	GL_SINGLE_COLOR_EXT = 33273,
	GL_CURRENT_RASTER_COLOR = 2820,
	GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950,
	GL_SAMPLE_MASK_SGIS = 32928,
	GL_SIGNED_RGBA8_NV = 34556,
	GL_MAX_ASYNC_HISTOGRAM_SGIX = 33581,
	GL_COLOR_ARRAY_BUFFER_BINDING = 34968,
	GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983,
	GL_MAP2_COLOR_4_NURBS_SGIX = 33255,
	GL_CUBE_MAP_BINDING_SGIX = 33608,
	GL_INTENSITY16_SIGNED_SGIX = 34282,
	GL_TEXTURE_GEN_S = 3168,
	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 36387,
	GL_RGB8I_EXT = 36239,
	GL_COLOR_MATRIX_HINT = 33559,
	GL_MAX_VERTEX_ATTRIB_STRIDE = 33509,
	GL_TEXTURE_VIEW_NUM_LAYERS = 33502,
	GL_PATH_COVER_DEPTH_FUNC_NV = 37055,
	GL_PROGRAM_BINDING_ARB = 34423,
	GL_HISTOGRAM_GREEN_SIZE_EXT = 32809,
	GL_MAX_CLIPMAP_DEPTH_SGIX = 33143,
	GL_MULT = 259,
	GL_WEIGHT_ARRAY_POINTER_OES = 34476,
	GL_LEFT = 1030,
	GL_SHININESS = 5633,
	GL_ORDER = 2561,
	GL_RGB_SNORM = 36754,
	GL_INDEX_ARRAY_TYPE = 32901,
	GL_COLOR4_BIT_PGI = 131072,
	GL_MAP2_NORMAL_NURBS_SGIX = 33256,
	GL_R5_G6_B5_ICC_SGIX = 33894,
	GL_RGB_ICC_SGIX = 33888,
	GL_LINE_SMOOTH_HINT = 3154,
	GL_TEXTURE8 = 33992,
	GL_NEGATE_BIT_ATI = 4,
	GL_SPRITE_TRANSLATION_SGIX = 33099,
	GL_UNPACK_IMAGE_HEIGHT_EXT = 32878,
	GL_UNIFORM_BUFFER_ADDRESS_NV = 37743,
	GL_FLOAT_R_NV = 34944,
	GL_TRANSLATE_Y_NV = 37007,
	GL_PALETTE8_RGB8_OES = 35733,
	GL_REG_6_ATI = 35111,
	GL_INTERLACE_READ_INGR = 34152,
	GL_ONE_MINUS_SRC_COLOR = 769,
	GL_BLEND_DST_RGB = 32968,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 36877,
	GL_TEXTURE_1D_ARRAY_EXT = 35864,
	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 36310,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979,
	GL_SPARE1_NV = 34095,
	GL_COMBINE_ARB = 34160,
	GL_DRAW_BUFFER15_NV = 34868,
	GL_OBJECT_DELETE_STATUS_ARB = 35712,
	GL_ALL_SHADER_BITS_EXT = 4294967295,
	GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 38142,
	GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338,
	GL_422_AVERAGE_EXT = 32974,
	GL_FRAMEBUFFER_DEFAULT_HEIGHT = 37649,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069,
	GL_RGB5_A1 = 32855,
	GL_DEBUG_LOGGED_MESSAGES_ARB = 37189,
	GL_STENCIL_TAG_BITS_EXT = 35058,
	GL_TEXTURE_DEPTH_QCOM = 35796,
	GL_DEBUG_CALLBACK_USER_PARAM_ARB = 33349,
	GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843,
	GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 37594,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 33357,
	GL_PARALLEL_ARRAYS_INTEL = 33780,
	GL_CLIPPING_INPUT_PRIMITIVES_ARB = 33526,
	GL_READ_PIXELS = 33420,
	GL_MAP2_TEXTURE_COORD_1 = 3507,
	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971,
	GL_MAP1_TEXTURE_COORD_1 = 3475,
	GL_MAX_PATCH_VERTICES_OES = 36477,
	GL_POST_CONVOLUTION_COLOR_TABLE = 32977,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 37851,
	GL_SCALE_BY_FOUR_NV = 34111,
	GL_UNSIGNED_INT_IMAGE_3D = 36964,
	GL_RESAMPLE_ZERO_FILL_OML = 35207,
	GL_RED_SCALE = 3348,
	GL_PIXEL_SUBSAMPLE_4444_SGIX = 34210,
	GL_LUMINANCE16_ALPHA8_ICC_SGIX = 33899,
	GL_MATRIX_INDEX_ARRAY_SIZE_OES = 34886,
	GL_PIXEL_PACK_BUFFER_BINDING_EXT = 35053,
	GL_FIXED_ONLY = 35101,
	GL_SRGB8_ALPHA8 = 35907,
	GL_MAX_COMPUTE_ATOMIC_COUNTERS = 33381,
	GL_MAX_CONVOLUTION_WIDTH_EXT = 32794,
	GL_VIEWPORT_BIT = 2048,
	GL_DEPTH_STENCIL_TO_RGBA_NV = 34926,
	GL_TEXTURE_BUFFER = 35882,
	GL_PATH_STENCIL_FUNC_NV = 37047,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 33358,
	GL_TEXTURE_GEN_MODE_OES = 9472,
	GL_DOT_PRODUCT_NV = 34540,
	GL_TEXTURE_WIDTH_QCOM = 35794,
	GL_INDEX_ARRAY_ADDRESS_NV = 36644,
	GL_SAMPLE_ALPHA_TO_COVERAGE = 32926,
	GL_COLOR_ATTACHMENT15 = 36079,
	GL_POINT_SIZE_ARRAY_STRIDE_OES = 35211,
	GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 37624,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 36877,
	GL_PALETTE4_RGB8_OES = 35728,
	GL_IMAGE_CLASS_10_10_10_2 = 33475,
	GL_VIEWPORT_BOUNDS_RANGE_NV = 33373,
	GL_VERTEX_ARRAY_COUNT_EXT = 32893,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 36059,
	GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 36494,
	GL_UNSIGNED_INT_24_8_NV = 34042,
	GL_PIXEL_TILE_GRID_WIDTH_SGIX = 33090,
	GL_TEXTURE_STENCIL_SIZE_EXT = 35057,
	GL_CUBIC_HP = 33119,
	GL_CLIP_DISTANCE5 = 12293,
	GL_DEPTH = 6145,
	GL_INT_SAMPLER_BUFFER_AMD = 36866,
	GL_COMBINE_ALPHA_ARB = 34162,
	GL_MAX_SAMPLE_MASK_WORDS = 36441,
	GL_BLEND_EQUATION_ALPHA = 34877,
	GL_TEXTURE2 = 33986,
	GL_UNSIGNED_SHORT_5_5_5_1 = 32820,
	GL_N3F_V3F = 10789,
	GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 33159,
	GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253,
	GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 33517,
	GL_RGBA16UI_EXT = 36214,
	GL_AMBIENT = 4608,
	GL_MODULATE = 8448,
	GL_SHADER_STORAGE_BLOCK = 37606,
	GL_RELATIVE_MOVE_TO_NV = 3,
	GL_GPU_DISJOINT_EXT = 36795,
	GL_LINE_LOOP = 2,
	GL_R32I = 33333,
	GL_MAP_INVALIDATE_BUFFER_BIT = 8,
	GL_BUFFER_SIZE_ARB = 34660,
	GL_FONT_HAS_KERNING_BIT_NV = 268435456,
	GL_VIEWPORT_BOUNDS_RANGE_EXT = 33373,
	GL_UNIFORM_OFFSET = 35387,
	GL_SYNC_FENCE = 37142,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 36446,
	GL_NUM_COMPATIBLE_SUBROUTINES = 36426,
	GL_RGB32I = 36227,
	GL_ROUNDED_RECT4_NV = 236,
	GL_SHADER_CONSISTENT_NV = 34525,
	GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371,
	GL_RGBA16_EXTENDED_RANGE_SGIX = 34291,
	GL_3D = 1537,
	GL_NEVER = 512,
	GL_INDEX_TEST_FUNC_EXT = 33206,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 35976,
	GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 38133,
	GL_PRIMARY_COLOR_EXT = 34167,
	GL_INCR = 7682,
	GL_ACCUM_BLUE_BITS = 3418,
	GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 32977,
	GL_TEXTURE_COMPRESSION_HINT_ARB = 34031,
	GL_EQUIV = 5385,
	GL_SPRITE_AXIS_SGIX = 33098,
	GL_PROGRAM_PARAMETERS_ARB = 34984,
	GL_LIGHTING_BIT = 64,
	GL_TEXTURE_RED_SIZE = 32860,
	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34903,
	GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973,
	GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322,
	GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 34243,
	GL_SIGNED_ALPHA8_NV = 34566,
	GL_POLYGON_OFFSET_FACTOR_EXT = 32824,
	GL_COMPRESSED_LUMINANCE_LATC1_EXT = 35952,
	GL_SAMPLE_MASK_VALUE_NV = 36434,
	GL_PERSPECTIVE_CORRECTION_HINT = 3152,
	GL_DEBUG_SOURCE_SHADER_COMPILER = 33352,
	GL_VERTEX_PROGRAM_NV = 34336,
	GL_CLIENT_PIXEL_STORE_BIT = 1,
	GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 35055,
	GL_AND = 5377,
	GL_STENCIL_FAIL = 2964,
	GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 34888,
	GL_IMAGE_SCALE_X_HP = 33109,
	GL_EMBOSS_CONSTANT_NV = 34142,
	GL_COLOR_ATTACHMENT4 = 36068,
	GL_ALPHA_SCALE = 3356,
	GL_TRIANGLES_ADJACENCY = 12,
	GL_CLIP_ORIGIN = 37724,
	GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926,
	GL_IMPLEMENTATION_COLOR_READ_TYPE = 35738,
	GL_DRAW_BUFFER0 = 34853,
	GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 34808,
	GL_LINE_RESET_TOKEN = 1799,
	GL_CON_24_ATI = 35161,
	GL_DOUBLE = 5130,
	GL_IR_INSTRUMENT1_SGIX = 33151,
	GL_WRITEONLY_RENDERING_QCOM = 34851,
	GL_DUAL_ALPHA8_SGIS = 33041,
	GL_PATH_GEN_COLOR_FORMAT_NV = 37042,
	GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 36967,
	GL_LINEAR_DETAIL_SGIS = 32919,
	GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876,
	GL_POLYGON_SMOOTH = 2881,
	GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 36877,
	GL_COLOR_ATTACHMENT5_NV = 36069,
	GL_VIEWPORT_SUBPIXEL_BITS_EXT = 33372,
	GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 38144,
	GL_TEXTURE_GATHER_SHADOW = 33443,
	GL_TEXTURE_INTENSITY_SIZE = 32865,
	GL_MAX_CULL_DISTANCES = 33529,
	GL_MAX_ALPHA_SGIS = 34221,
	GL_CONVOLUTION_SGI = 33221,
	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970,
	GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 4096,
	GL_UNSIGNED_INT_8_8_8_8_EXT = 32821,
	GL_DUDV_ATI = 34681,
	GL_PATH_PROJECTION_STACK_DEPTH_NV = 2980,
	GL_TEXTURE2_SGIS = 33737,
	GL_IMAGE_TRANSLATE_Y_HP = 33112,
	GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627,
	GL_SRC1_ALPHA = 34185,
	GL_KEEP = 7680,
	GL_UNIFORM_BUFFER_START = 35369,
	GL_TEXTURE_COORD_ARRAY_STRIDE = 32906,
	GL_POINT_SMOOTH = 2832,
	GL_MATRIX7_NV = 34359,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055,
	GL_INTERPOLATE_EXT = 34165,
	GL_RG16_SNORM = 36761,
	GL_EQUAL = 514,
	GL_BUFFER_UPDATE_BARRIER_BIT = 512,
	GL_CLAMP_TO_BORDER = 33069,
	GL_R5_G6_B5_A8_ICC_SGIX = 33895,
	GL_COLOR_ATTACHMENT13 = 36077,
	GL_CLIP_DISTANCE3_APPLE = 12291,
	GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303,
	GL_HISTOGRAM_FORMAT_EXT = 32807,
	GL_BACK_LEFT = 1026,
	GL_STENCIL_PASS_DEPTH_FAIL = 2965,
	GL_RGB_S3TC = 33696,
	GL_T2F_C4F_N3F_V3F = 10796,
	GL_TEXTURE_BORDER = 4101,
	GL_FUNC_ADD_EXT = 32774,
	GL_YCBCR_MESA = 34647,
	GL_EXP = 2048,
	GL_AND_REVERSE = 5378,
	GL_PIXEL_MAP_B_TO_B_SIZE = 3256,
	GL_VERTEX_ARRAY_STRIDE = 32892,
	GL_BLEND_EQUATION = 32777,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36878,
	GL_CONVOLUTION_BORDER_MODE_EXT = 32787,
	GL_TEXTURE_MATERIAL_PARAMETER_EXT = 33618,
	GL_MAX_PALETTE_MATRICES_ARB = 34882,
	GL_NUM_EXTENSIONS = 33309,
	GL_FLOAT16_VEC4_NV = 36859,
	GL_ACCUM_GREEN_BITS = 3417,
	GL_IMAGE_ROTATE_ORIGIN_X_HP = 33114,
	GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33123,
	GL_SRGB_ALPHA = 35906,
	GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 34906,
	GL_GEOMETRY_SHADER_ARB = 36313,
	GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 35095,
	GL_RG16F = 33327,
	GL_TEXTURE_FLOAT_COMPONENTS_NV = 34956,
	GL_DEPTH24_STENCIL8_OES = 35056,
	GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 34382,
	GL_UNSIGNED_SHORT_5_6_5 = 33635,
	GL_SAMPLER_1D = 35677,
	GL_SOURCE2_RGB_ARB = 34178,
	GL_DITHER = 3024,
	GL_LINE_WIDTH_RANGE = 2850,
	GL_TEXTURE_BINDING_RECTANGLE_NV = 34038,
	GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825,
	GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 36902,
	GL_UNIFORM_SIZE = 35384,
	GL_INTENSITY_SNORM = 36883,
	GL_IMAGE_2D_RECT = 36943,
	GL_FLOAT_MAT4 = 35676,
	GL_ALPHA8_EXT = 32828,
	GL_DSDT8_MAG8_NV = 34570,
	GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 36710,
	GL_INVARIANT_EXT = 34754,
	GL_RENDERBUFFER_SAMPLES_ANGLE = 36011,
	GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 34869,
	GL_LIGHTEN_KHR = 37528,
	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 34898,
	GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 33528,
	GL_HISTOGRAM_BLUE_SIZE = 32810,
	GL_SATURATE_BIT_ATI = 64,
	GL_INT_IMAGE_BUFFER_EXT = 36956,
	GL_TEXTURE_WRAP_Q_SGIS = 33079,
	GL_DEPTH_BUFFER_BIT = 256,
	GL_SHARED_EDGE_NV = 192,
	GL_FRAMEBUFFER_UNDEFINED = 33305,
	GL_MAP2_VERTEX_ATTRIB14_4_NV = 34430,
	GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080,
	GL_SOURCE1_ALPHA_ARB = 34185,
	GL_2_BYTES = 5127,
	GL_TEXTURE_BUFFER_SIZE = 37278,
	GL_CONJOINT_NV = 37508,
	GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835,
	GL_DECR_WRAP_OES = 34056,
	GL_PIXEL_PACK_BUFFER_ARB = 35051,
	GL_UNIFORM_IS_ROW_MAJOR = 35390,
	GL_WEIGHT_ARRAY_TYPE_ARB = 34473,
	GL_TEXTURE_2D_STACK_MESAX = 34650,
	GL_LAST_VERTEX_CONVENTION_EXT = 36430,
	GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 33554,
	GL_NONE_OES = 0,
	GL_PROGRAM_ATTRIBS_ARB = 34988,
	GL_UNIFORM_BUFFER_UNIFIED_NV = 37742,
	GL_INTENSITY16_EXTENDED_RANGE_SGIX = 34294,
	GL_POINT_SIZE_ARRAY_OES = 35740,
	GL_SLUMINANCE8_ALPHA8_EXT = 35909,
	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36961,
	GL_CURRENT_BIT = 1,
	GL_ACCUM_ALPHA_BITS = 3419,
	GL_COLOR_ARRAY_STRIDE = 32899,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 35983,
	GL_VERTEX_ARRAY_KHR = 32884,
	GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977,
	GL_POLYGON = 9,
	GL_TEXTURE_POST_SPECULAR_HP = 33128,
	GL_ACCUM_BUFFER_BIT = 512,
	GL_TEXTURE_BUFFER_EXT = 35882,
	GL_BGRA_IMG = 32993,
	GL_MAX_MODELVIEW_STACK_DEPTH = 3382,
	GL_PACK_REVERSE_ROW_ORDER_ANGLE = 37796,
	GL_TEXTURE_1D_BINDING_EXT = 32872,
	GL_INT8_VEC2_NV = 36833,
	GL_VIEWPORT = 2978,
	GL_PROJECTION_MATRIX = 2983,
	GL_VERTEX_TEXTURE = 33435,
	GL_DRAW_BUFFER9_NV = 34862,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36446,
	GL_LUMINANCE16_EXTENDED_RANGE_SGIX = 34293,
	GL_IMAGE_BINDING_LAYERED_EXT = 36668,
	GL_DEBUG_SOURCE_OTHER_KHR = 33355,
	GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 34639,
	GL_STENCIL_TEST = 2960,
	GL_FLOAT_VEC4 = 35666,
	GL_LAYER_PROVOKING_VERTEX = 33374,
	GL_CLIP_DISTANCE7 = 12295,
	GL_LUMINANCE6_ALPHA2 = 32836,
	GL_MALI_SHADER_BINARY_ARM = 36704,
	GL_SAMPLE_SHADING = 35894,
	GL_LINE_STIPPLE_REPEAT = 2854,
	GL_ALIASED_LINE_WIDTH_RANGE = 33902,
	GL_COMPRESSED_RGB = 34029,
	GL_SRGB_ALPHA_EXT = 35906,
	GL_COMBINER_INPUT_NV = 34114,
	GL_COLORBURN_NV = 37530,
	GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 134217728,
	GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720,
	GL_DECODE_EXT = 35401,
	GL_ROUNDED_RECT_NV = 232,
	GL_OP_SET_LT_EXT = 34701,
	GL_MIRRORED_REPEAT_IBM = 33648,
	GL_READ_FRAMEBUFFER_BINDING_APPLE = 36010,
	GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947,
	GL_NORMAL_MAP_ARB = 34065,
	GL_ATC_RGB_AMD = 35986,
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37494,
	GL_FACTOR_MIN_AMD = 36892,
	GL_CLIP_PLANE4 = 12292,
	GL_TRANSPOSE_COLOR_MATRIX = 34022,
	GL_MAX_TEXTURE_COORD_SETS_SGIS = 33732,
	GL_TRANSFORM_FEEDBACK = 36386,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 34925,
	GL_CLIENT_STORAGE_BIT = 512,
	GL_ALPHA_BIAS = 3357,
	GL_OP_DOT4_EXT = 34693,
	GL_DEPTH_CLAMP_NEAR_AMD = 36894,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 37583,
	GL_PALETTE8_RGB5_A1_OES = 35737,
	GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971,
	GL_TEXTURE_GATHER = 33442,
	GL_TESS_GEN_POINT_MODE = 36473,
	GL_LIGHT_MODEL_COLOR_CONTROL = 33272,
	GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 33346,
	GL_BUMP_ROT_MATRIX_ATI = 34677,
	GL_REFERENCE_PLANE_SGIX = 33149,
	GL_TABLE_TOO_LARGE_EXT = 32817,
	GL_SAMPLE_BUFFERS_EXT = 32936,
	GL_UNPACK_COMPRESSED_BLOCK_SIZE = 37162,
	GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2,
	GL_LOSE_CONTEXT_ON_RESET_EXT = 33362,
	GL_PIXEL_PACK_BUFFER = 35051,
	GL_PARAMETER_BUFFER_ARB = 33006,
	GL_FOG_COORD = 33873,
	GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 36707,
	GL_PERFMON_RESULT_AVAILABLE_AMD = 35780,
	GL_VERTEX_ARRAY_BINDING = 34229,
	GL_CONDITION_SATISFIED = 37148,
	GL_TEXTURE_DEPTH_TYPE_ARB = 35862,
	GL_SAMPLE_SHADING_OES = 35894,
	GL_PROGRAM_PIPELINE = 33508,
	GL_HALF_FLOAT = 5131,
	GL_TEXTURE_BINDING_2D = 32873,
	GL_E_TIMES_F_NV = 34097,
	GL_ELEMENT_ARRAY_UNIFIED_NV = 36639,
	GL_FLOAT_RG_NV = 34945,
	GL_QUAD_INTENSITY4_SGIS = 33058,
	GL_CURRENT_ATTRIB_NV = 34342,
	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 33453,
	GL_MAX_FRAMEZOOM_FACTOR_SGIX = 33165,
	GL_CON_9_ATI = 35146,
	GL_COLOR_RENDERABLE = 33414,
	GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 33554432,
	GL_RGBA4_EXT = 32854,
	GL_PACK_IMAGE_HEIGHT = 32876,
	GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 37073,
	GL_EVAL_FRACTIONAL_TESSELLATION_NV = 34501,
	GL_R8_SNORM = 36756,
	GL_PACK_COMPRESSED_BLOCK_HEIGHT = 37164,
	GL_FUNC_SUBTRACT = 32778,
	GL_COLOR_ATTACHMENT13_NV = 36077,
	GL_COORD_REPLACE_OES = 34914,
	GL_INTERLACE_OML = 35200,
	GL_R1UI_T2F_C4F_N3F_V3F_SUN = 34251,
	GL_ACTIVE_VARYING_MAX_LENGTH_NV = 35970,
	GL_COMBINER_CD_OUTPUT_NV = 34123,
	GL_VERTEX_SHADER_BINDING_EXT = 34689,
	GL_FULL_SUPPORT = 33463,
	GL_SAMPLER_2D_SHADOW_ARB = 35682,
	GL_TEXTURE_LUMINANCE_SIZE_EXT = 32864,
	GL_MAX_TEXTURE_COORDS = 34929,
	GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 32,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 37081,
	GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966,
	GL_RG = 33319,
	GL_NO_RESET_NOTIFICATION_KHR = 33377,
	GL_CON_7_ATI = 35144,
	GL_TRANSFORM_FEEDBACK_VARYINGS = 35971,
	GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 36677,
	GL_INT64_VEC2_NV = 36841,
	GL_DECR_WRAP_EXT = 34056,
	GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374,
	GL_TEXTURE_COORD_ARRAY_POINTER = 32914,
	GL_LOAD = 257,
	GL_NEAREST_MIPMAP_NEAREST = 9984,
	GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064,
	GL_TESS_GEN_SPACING_OES = 36471,
	GL_UNSIGNED_INT16_NV = 36848,
	GL_FOG_INDEX = 2913,
	GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 34064,
	GL_DRAW_BUFFER4_EXT = 34857,
	GL_PRIMITIVES_GENERATED = 35975,
	GL_SAMPLES_3DFX = 34484,
	GL_STACK_UNDERFLOW = 1284,
	GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 35954,
	GL_PROGRAM_STRING_ARB = 34344,
	GL_TEXTURE_ALPHA_MODULATE_IMG = 35846,
	GL_INTERNALFORMAT_RED_SIZE = 33393,
	GL_REG_1_ATI = 35106,
	GL_TEXTURE29 = 34013,
	GL_TEXTURE13 = 33997,
	GL_LUMINANCE16F_EXT = 34846,
	GL_QUAD_TEXTURE_SELECT_SGIS = 33061,
	GL_HSL_LUMINOSITY_NV = 37552,
	GL_COMPUTE_SHADER_BIT = 32,
	GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316,
	GL_PROXY_TEXTURE_RECTANGLE_NV = 34039,
	GL_CLIP_DISTANCE_NV = 35962,
	GL_ACTIVE_UNIFORMS = 35718,
	GL_ALPHA4 = 32827,
	GL_COMPILE_AND_EXECUTE = 4865,
	GL_COLOR_TABLE_ALPHA_SIZE_SGI = 32989,
	GL_FOG_OFFSET_VALUE_SGIX = 33177,
	GL_COPY_WRITE_BUFFER_NV = 36663,
	GL_SLUMINANCE8_NV = 35911,
	GL_CMYKA_EXT = 32781,
	GL_DEBUG_SOURCE_API_KHR = 33350,
	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 34032,
	GL_READ_FRAMEBUFFER_BINDING = 36010,
	GL_EXCLUSION_KHR = 37536,
	GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358,
	GL_CONSTANT_BORDER_HP = 33105,
	GL_VARIABLE_E_NV = 34087,
	GL_LIGHT6 = 16390,
	GL_DRAW_BUFFER2_NV = 34855,
	GL_MAX_VERTEX_IMAGE_UNIFORMS = 37066,
	GL_CIRCULAR_CCW_ARC_TO_NV = 248,
	GL_MAP_COHERENT_BIT = 128,
	GL_ALPHA_ICC_SGIX = 33890,
	GL_DOT3_RGB_EXT = 34624,
	GL_OUTPUT_COLOR1_EXT = 34716,
	GL_FLOAT_MAT4x3 = 35690,
	GL_SAMPLE_BUFFERS = 32936,
	GL_TRANSFORM_FEEDBACK_BUFFER_NV = 35982,
	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 4,
	GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840,
	GL_SIGNED_LUMINANCE_ALPHA_NV = 34563,
	GL_BLEND_EQUATION_OES = 32777,
	GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 33382,
	GL_RGBA_DXT5_S3TC = 33700,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723,
	GL_DEBUG_CALLBACK_USER_PARAM_KHR = 33349,
	GL_FFT_1D_SGI = 33222,
	GL_RGB16F_EXT = 34843,
	GL_SAMPLER_1D_SHADOW = 35681,
	GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658,
	GL_QUAD_ALPHA4_SGIS = 33054,
	GL_TEXTURE_NUM_LEVELS_QCOM = 35801,
	GL_STENCIL_ATTACHMENT = 36128,
	GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 33375,
	GL_TESS_GEN_VERTEX_ORDER_EXT = 36472,
	GL_BUFFER_MAP_OFFSET = 37153,
	GL_LIST_BASE = 2866,
	GL_FOG_SPECULAR_TEXTURE_WIN = 33004,
	GL_FLOAT_RG32_NV = 34951,
	GL_RELATIVE_ARC_TO_NV = 255,
	GL_RGB16 = 32852,
	GL_NORMAL_MAP_EXT = 34065,
	GL_BOOL_VEC4 = 35673,
	GL_LOSE_CONTEXT_ON_RESET = 33362,
	GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 35762,
	GL_MAT_COLOR_INDEXES_BIT_PGI = 16777216,
	GL_NORMAL_ARRAY_STRIDE_EXT = 32895,
	GL_RGBA16_SNORM_EXT = 36763,
	GL_MINMAX_FORMAT = 32815,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 36382,
	GL_TEXTURE_BUFFER_FORMAT_ARB = 35886,
	GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 34909,
	GL_ARRAY_OBJECT_BUFFER_ATI = 34662,
	GL_RGBA16_SIGNED_SGIX = 34279,
	GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 38129,
	GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 37100,
	GL_OP_INDEX_EXT = 34690,
	GL_RGBA = 6408,
	GL_VIRTUAL_PAGE_SIZE_X_ARB = 37269,
	GL_BUFFER = 33504,
	GL_UNSIGNED_INT_IMAGE_CUBE = 36966,
	GL_COLOR_TABLE_RED_SIZE_SGI = 32986,
	GL_TEXTURE_BINDING_BUFFER_ARB = 35884,
	GL_COLOR_ARRAY_POINTER_EXT = 32912,
	GL_ELEMENT_ARRAY_BARRIER_BIT = 2,
	GL_CON_5_ATI = 35142,
	GL_RASTER_SAMPLES_EXT = 37672,
	GL_FOG_FACTOR_TO_ALPHA_SGIX = 33647,
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 37497,
	GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 33064,
	GL_PIXEL_TRANSFORM_OPERATOR_SGI = 33220,
	GL_MAP2_GRID_DOMAIN = 3538,
	GL_TEXTURE_COMPONENTS = 4099,
	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 37573,
	GL_DUAL_LUMINANCE4_SGIS = 33044,
	GL_RG_EXT = 33319,
	GL_RENDERBUFFER_SAMPLES_EXT = 36011,
	GL_DEPTH_COMPONENT32F = 36012,
	GL_MAP_PERSISTENT_BIT = 64,
	GL_NEAREST_MIPMAP_LINEAR = 9986,
	GL_TEXTURE11 = 33995,
	GL_STENCIL_INDEX = 6401,
	GL_DEPTH_CLAMP_NV = 34383,
	GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 35978,
	GL_CONVOLUTION_BORDER_COLOR = 33108,
	GL_RGB10_EXT = 32850,
	GL_TESS_GEN_MODE = 36470,
	GL_EYE_LINEAR = 9216,
	GL_GREEN_MIN_CLAMP_INGR = 34145,
	GL_QUERY_WAIT_INVERTED = 36375,
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975,
	GL_IMAGE_CLASS_11_11_10 = 33474,
	GL_SYNC_CL_EVENT_ARB = 33344,
	GL_BLEND_EQUATION_ALPHA_OES = 34877,
	GL_MIRROR_CLAMP_EXT = 34626,
	GL_MAX_FRAMEBUFFER_WIDTH = 37653,
	GL_QUERY_KHR = 33507,
	GL_COLOR_ENCODING = 33430,
	GL_INTENSITY16_SNORM = 36891,
	GL_NEAREST_CLIPMAP_LINEAR_SGIX = 33870,
	GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 36655,
	GL_VERTEX_ATTRIB_ARRAY11_NV = 34395,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 35415,
	GL_COLOR_TABLE = 32976,
	GL_EVAL_VERTEX_ATTRIB8_NV = 34510,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 35723,
	GL_PACK_SWAP_BYTES = 3328,
	GL_PIXEL_MAP_B_TO_B = 3192,
	GL_FACET_NORMAL_ARRAY_AUTODESK = 34257,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 37081,
	GL_SKIP_COMPONENTS3_NV = -4,
	GL_MAX_VERTEX_UNITS_OES = 34468,
	GL_COMPRESSED_RGBA_ARB = 34030,
	GL_FLOAT_MAT2x3_NV = 35685,
	GL_T4F_V4F = 10792,
	GL_TEXTURE_LIGHT_EXT = 33616,
	GL_IMAGE_2D_ARRAY = 36947,
	GL_BGRA_INTEGER = 36251,
	GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722,
	GL_MIPMAP = 33427,
	GL_DEBUG_SEVERITY_NOTIFICATION = 33387,
	GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 34901,
	GL_PACK_CMYK_HINT_EXT = 32782,
	GL_UNPACK_COMPRESSED_SIZE_SGIX = 33562,
	GL_ADJACENT_PAIRS_NV = 37038,
	GL_TEXTURE_BUFFER_FORMAT_EXT = 35886,
	GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 34920,
	GL_PHONG_HINT_WIN = 33003,
	GL_SHADER_OPERATION_NV = 34527,
	GL_PACK_SKIP_VOLUMES_SGIS = 33072,
	GL_TRIANGLES_ADJACENCY_ARB = 12,
	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 32,
	GL_RGB565_OES = 36194,
	GL_STENCIL_INDEX16 = 36169,
	GL_PROGRAM_BINARY_ANGLE = 37798,
	GL_COUNT_DOWN_NV = 37001,
	GL_PACK_LSB_FIRST = 3329,
	GL_TEXTURE_VIEW_MIN_LAYER_OES = 33501,
	GL_CONVOLUTION_HINT_SGIX = 33558,
	GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 36492,
	GL_CLAMP_VERTEX_COLOR_ARB = 35098,
	GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 37496,
	GL_FRAMEBUFFER_DEFAULT_LAYERS = 37650,
	GL_RESAMPLE_ZERO_FILL_SGIX = 33844,
	GL_TRANSPOSE_NV = 34348,
	GL_COLOR_TABLE_GREEN_SIZE = 32987,
	GL_BLEND_DST_RGB_EXT = 32968,
	GL_CONDITION_SATISFIED_APPLE = 37148,
	GL_IGLOO_TMESHMODE_SGIX = 33188,
	GL_DIFFERENCE_NV = 37534,
	GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 36011,
	GL_OPERAND2_ALPHA_ARB = 34202,
	GL_FLOAT_VEC3 = 35665,
	GL_DEPENDENT_RGB_TEXTURE_3D_NV = 34905,
	GL_NUM_FRAGMENT_REGISTERS_ATI = 35182,
	GL_POLYGON_OFFSET_FACTOR = 32824,
	GL_ATTENUATION_EXT = 33613,
	GL_OP_LOG_BASE_2_EXT = 34706,
	GL_MAX_PROGRAM_PARAMETERS_ARB = 34985,
	GL_PATCHES_OES = 14,
	GL_INTENSITY8_EXT = 32843,
	GL_PATH_JOIN_STYLE_NV = 36985,
	GL_CURRENT_MATRIX_INDEX_ARB = 34885,
	GL_WARPS_PER_SM_NV = 37690,
	GL_DEPTH_BITS = 3414,
	GL_TEXTURE_COORD_ARRAY_EXT = 32888,
	GL_VERTEX_ARRAY_TYPE = 32891,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 35968,
	GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 107011,
	GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 36440,
	GL_PIXEL_TILE_CACHE_SIZE_SGIX = 33093,
	GL_TESS_CONTROL_SHADER_BIT_OES = 8,
	GL_TEXTURE30 = 34014,
	GL_ATTACHED_SHADERS = 35717,
	GL_FRAGMENT_PROGRAM_BINDING_NV = 34931,
	GL_MUL_ATI = 35172,
	GL_LUMINANCE12_ALPHA4 = 32838,
	GL_MAX_TEXTURE_COORDS_NV = 34929,
	GL_MAP1_GRID_DOMAIN = 3536,
	GL_BOLD_BIT_NV = 1,
	GL_STENCIL_WRITEMASK = 2968,
	GL_CURRENT_RASTER_INDEX = 2821,
	GL_MAX_TESS_PATCH_COMPONENTS_OES = 36484,
	GL_LINE_TOKEN = 1794,
	GL_COLOR_ATTACHMENT0 = 36064,
	GL_FRAMEBUFFER_UNSUPPORTED = 36061,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 36442,
	GL_MANUAL_GENERATE_MIPMAP = 33428,
	GL_VERTEX_PROGRAM_BINDING_NV = 34378,
	GL_ATTRIB_STACK_DEPTH = 2992,
	GL_FUNC_SUBTRACT_OES = 32778,
	GL_INVERT_OVG_NV = 37556,
	GL_NORMAL_MAP_NV = 34065,
	GL_TEXTURE_MAX_LOD_SGIS = 33083,
	GL_TEXTURE_VIEW_MIN_LAYER_EXT = 33501,
	GL_LUMINANCE4 = 32831,
	GL_AVERAGE_EXT = 33589,
	GL_EVAL_VERTEX_ATTRIB15_NV = 34517,
	GL_CLAMP = 10496,
	GL_CURRENT_FOG_COORDINATE_EXT = 33875,
	GL_INT_SAMPLER_BUFFER = 36304,
	GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 34806,
	GL_GEOMETRY_SHADER_BIT = 4,
	GL_VERTEX_SHADER_BIT_EXT = 1,
	GL_POSITION = 4611,
	GL_VERTEX_WEIGHTING_EXT = 34057,
	GL_COMPRESSED_RGBA8_ETC2_EAC = 37496,
	GL_AUX0 = 1033,
	GL_GENERIC_ATTRIB_NV = 35965,
	GL_OFFSET_TEXTURE_MATRIX_NV = 34529,
	GL_INTERLEAVED_ATTRIBS_EXT = 35980,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 36485,
	GL_RELATIVE_ROUNDED_RECT2_NV = 235,
	GL_INT_VEC2 = 35667,
	GL_LOW_FLOAT = 36336,
	GL_CONST_EYE_NV = 34533,
	GL_SRC1_RGB = 34177,
	GL_SELECTION_BUFFER_POINTER = 3571,
	GL_SOURCE1_RGB_EXT = 34177,
	GL_SAMPLER_1D_ARRAY_SHADOW = 36291,
	GL_TEXTURE_COLOR_WRITEMASK_SGIS = 33263,
	GL_FLOAT_RGB16_NV = 34952,
	GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 36369,
	GL_COVERAGE_BUFFERS_NV = 36563,
	GL_INVALID_OPERATION = 1282,
	GL_3DC_XY_AMD = 34810,
	GL_CURRENT_BINORMAL_EXT = 33852,
	GL_SHADER_SOURCE_LENGTH = 35720,
	GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235,
	GL_PATH_MODELVIEW_MATRIX_NV = 2982,
	GL_PROGRAM_INPUT = 37603,
	GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 33142,
	GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 33388,
	GL_PATH_INITIAL_DASH_CAP_NV = 36988,
	GL_TEXTURE_RECTANGLE_ARB = 34037,
	GL_FRACTIONAL_EVEN_OES = 36476,
	GL_LUMINANCE32UI_EXT = 36212,
	GL_COLOR_EXT = 6144,
	GL_TRIANGLE_FAN = 6,
	GL_OBJECT_SUBTYPE_ARB = 35663,
	GL_RELATIVE_ROUNDED_RECT_NV = 233,
	GL_GENERATE_MIPMAP_HINT = 33170,
	GL_VERTEX_SHADER_ARB = 35633,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049,
	GL_WEIGHT_ARRAY_STRIDE_OES = 34474,
	GL_MAP1_VERTEX_4 = 3480,
	GL_RG8UI = 33336,
	GL_TEXTURE_BUFFER_ARB = 35882,
	GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 37694,
	GL_TEXTURE_HI_SIZE_NV = 34587,
	GL_TEXTURE_BORDER_COLOR_OES = 4100,
	GL_RGBA_FLOAT_MODE_ATI = 34848,
	GL_TEXTURE = 5890,
	GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981,
	GL_TEXTURE_IMAGE_TYPE = 33424,
	GL_TEXTURE17 = 34001,
	GL_OBJECT_LINK_STATUS_ARB = 35714,
	GL_MAX_TESS_PATCH_COMPONENTS_EXT = 36484,
	GL_BINORMAL_ARRAY_POINTER_EXT = 33859,
	GL_LUMINANCE32F_ARB = 34840,
	GL_MAX_TEXTURE_UNITS = 34018,
	GL_TEXTURE_SAMPLES = 37126,
	GL_ASYNC_HISTOGRAM_SGIX = 33580,
	GL_FRAMEBUFFER_DEFAULT = 33304,
	GL_COLOR_VALUE_SGIX = 33625,
	GL_IGNORE_BORDER_HP = 33104,
	GL_FACET_NORMAL_AUTODESK = 34256,
	GL_READ_PIXELS_TYPE = 33422,
	GL_UNIFORM = 37601,
	GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 36006,
	GL_DRAW_BUFFER7_NV = 34860,
	GL_MAP2_TEXTURE_COORD_3 = 3509,
	GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 33147,
	GL_MAP1_TEXTURE_COORD_3 = 3477,
	GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 16,
	GL_FIRST_VERTEX_CONVENTION_EXT = 36429,
	GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 36966,
	GL_CLIP_PLANE0 = 12288,
	GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 37123,
	GL_INT8_VEC4_NV = 36835,
	GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038,
	GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947,
	GL_TEXTURE_SWIZZLE_R_EXT = 36418,
	GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969,
	GL_MAX_ELEMENTS_VERTICES = 33000,
	GL_COLOR_TABLE_INTENSITY_SIZE = 32991,
	GL_INT16_VEC2_NV = 36837,
	GL_VERTEX_ELEMENT_SWIZZLE_AMD = 37284,
	GL_NEXT_BUFFER_NV = -2,
	GL_COMPRESSED_SIGNED_R11_EAC_OES = 37489,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 34763,
	GL_DEPTH_COMPONENT16 = 33189,
	GL_ACTIVE_RESOURCES = 37621,
	GL_SAMPLER_CUBE_SHADOW_NV = 36293,
	GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 36469,
	GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37131,
	GL_DUAL_TEXTURE_SELECT_SGIS = 33060,
	GL_ALPHA_TEST_FUNC_QCOM = 3009,
	GL_TESS_GEN_MODE_OES = 36470,
	GL_COMMAND_BARRIER_BIT = 64,
	GL_INDEX_ARRAY_STRIDE = 32902,
	GL_FRAMEBUFFER_COMPLETE_OES = 36053,
	GL_UNPACK_SUBSAMPLE_RATE_SGIX = 34209,
	GL_MAX_COMPUTE_UNIFORM_BLOCKS = 37307,
	GL_FONT_TARGET_UNAVAILABLE_NV = 37737,
	GL_READ_PIXELS_FORMAT = 33421,
	GL_DEBUG_SEVERITY_LOW_ARB = 37192,
	GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017,
	GL_INTERNALFORMAT_ALPHA_SIZE = 33396,
	GL_RGB12_EXT = 32851,
	GL_CURRENT_RASTER_TEXTURE_COORDS = 2822,
	GL_POINT_SIZE_ARRAY_POINTER_OES = 35212,
	GL_OUTPUT_FOG_EXT = 34749,
	GL_MAX_ELEMENTS_INDICES_EXT = 33001,
	GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 32906,
	GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 36328,
	GL_RGBA4_S3TC = 33699,
	GL_MODELVIEW_MATRIX = 2982,
	GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 33380,
	GL_IMPLEMENTATION_COLOR_READ_FORMAT = 35739,
	GL_LEQUAL = 515,
	GL_ZERO = 0,
	GL_INDEX_MATERIAL_EXT = 33208,
	GL_SLUMINANCE8_EXT = 35911,
	GL_RESET_NOTIFICATION_STRATEGY_KHR = 33366,
	GL_TEXTURE_GEN_T = 3169,
	GL_SRC_ALPHA = 770,
	GL_TEXTURE_VIEW_NUM_LEVELS = 33500,
	GL_DRAW_BUFFER5 = 34858,
	GL_RG16 = 33324,
	GL_TEXCOORD2_BIT_PGI = 536870912,
	GL_STENCIL_BACK_REF = 36003,
	GL_LINE_QUALITY_HINT_SGIX = 33627,
	GL_TEXTURE_MATERIAL_FACE_EXT = 33617,
	GL_DEPTH_TEXTURE_MODE = 34891,
	GL_RGBA32F_EXT = 34836,
	GL_CALLIGRAPHIC_FRAGMENT_SGIX = 33155,
	GL_VERTEX_ARRAY_SIZE = 32890,
	GL_COMBINE = 34160,
	GL_INDEX_ARRAY_BUFFER_BINDING = 34969,
	GL_MAX_COMBINED_ATOMIC_COUNTERS = 37591,
	GL_WRITE_ONLY_OES = 35001,
	GL_CLIP_DISTANCE3 = 12291,
	GL_LOCAL_CONSTANT_EXT = 34755,
	GL_FLOAT_VEC4_ARB = 35666,
	GL_INVALID_INDEX = 4294967295,
	GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 34573,
	GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 33803,
	GL_UNIFORM_NAME_LENGTH = 35385,
	GL_DEPTH_ATTACHMENT_OES = 36096,
	GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 34881,
	GL_LINEARDODGE_NV = 37540,
	GL_INTERLEAVED_ATTRIBS_NV = 35980,
	GL_TEXTURE_BIT = 262144,
	GL_FRAMEBUFFER = 36160,
	GL_DEBUG_SOURCE_APPLICATION = 33354,
	GL_CONSTANT_COLOR0_NV = 34090,
	GL_EVAL_VERTEX_ATTRIB10_NV = 34512,
	GL_MAX_RENDERBUFFER_SIZE_EXT = 34024,
	GL_PACK_IMAGE_DEPTH_SGIS = 33073,
	GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060,
	GL_QUERY_TARGET = 33514,
	GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 35096,
	GL_CURRENT_QUERY_ARB = 34917,
	GL_FASTEST = 4353,
	GL_INTENSITY4 = 32842,
	GL_UNDEFINED_APPLE = 35356,
	GL_CLIP_PLANE5_IMG = 12293,
	GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 35185,
	GL_1PASS_SGIS = 32929,
	GL_TEXTURE_RECTANGLE = 34037,
	GL_MULTISAMPLES_NV = 37745,
	GL_GLYPH_WIDTH_BIT_NV = 1,
	GL_VERSION_ES_CL_1_0 = 1,
	GL_STENCIL_INDEX_OES = 6401,
	GL_DEBUG_CATEGORY_DEPRECATION_AMD = 37195,
	GL_QUERY_ALL_EVENT_BITS_AMD = 4294967295,
	GL_DOUBLEBUFFER = 3122,
	GL_PIXEL_MAP_S_TO_S = 3185,
	GL_OPERAND1_RGB_EXT = 34193,
	GL_BLEND_DST = 3040,
	GL_LO_SCALE_NV = 34575,
	GL_POST_CONVOLUTION_GREEN_SCALE = 32797,
	GL_MAX_LIST_NESTING = 2865,
	GL_IMAGE_ROTATE_ANGLE_HP = 33113,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 35372,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36382,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER = 35069,
	GL_FLOAT_MAT2_ARB = 35674,
	GL_CAVEAT_SUPPORT = 33464,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 35885,
	GL_MULTISAMPLE = 32925,
	GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021,
	GL_DELETE_STATUS = 35712,
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661,
	GL_MAX_HEIGHT = 33407,
	GL_COLOR_ATTACHMENT2_NV = 36066,
	GL_MAX_GREEN_SGIS = 34217,
	GL_CULL_VERTEX_EXT = 33194,
	GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 33296,
	GL_TEXTURE_BINDING_2D_ARRAY = 35869,
	GL_SAMPLE_SHADING_ARB = 35894,
	GL_INDEX_TEST_REF_EXT = 33207,
	GL_MATERIAL_SIDE_HINT_PGI = 107052,
	GL_RGB_INTEGER_EXT = 36248,
	GL_UNPACK_ROW_LENGTH = 3314,
	GL_POST_COLOR_MATRIX_RED_BIAS = 32952,
	GL_DEBUG_ASSERT_MESA = 34651,
	GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 34040,
	GL_TABLE_TOO_LARGE = 32817,
	GL_IMAGE_TRANSLATE_X_HP = 33111,
	GL_COMPILE = 4864,
	GL_PROGRAM_POINT_SIZE_ARB = 34370,
	GL_MEDIUM_INT = 36340,
	GL_MULTISAMPLE_EXT = 32925,
	GL_INT_SAMPLER_2D = 36298,
	GL_EYE_DISTANCE_TO_POINT_SGIS = 33264,
	GL_SAMPLER_CUBE_MAP_ARRAY_OES = 36876,
	GL_POINT_SPRITE_R_MODE_NV = 34915,
	GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308,
	GL_CLIP_PLANE3 = 12291,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 34076,
	GL_HISTOGRAM_WIDTH_EXT = 32806,
	GL_PROXY_TEXTURE_1D_STACK_MESAX = 34651,
	GL_FRAGMENT_LIGHT5_SGIX = 33809,
	GL_AUX2 = 1035,
	GL_BGRA_EXT = 32993,
	GL_FILE_NAME_NV = 36980,
	GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464,
	GL_VERTEX_SHADER_OPTIMIZED_EXT = 34772,
	GL_SPRITE_OBJECT_ALIGNED_SGIX = 33101,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37133,
	GL_HSL_LUMINOSITY_KHR = 37552,
	GL_OFFSET_TEXTURE_2D_NV = 34536,
	GL_COLOR_TABLE_FORMAT = 32984,
	GL_SHADER_INCLUDE_ARB = 36270,
	GL_DEPTH_SCALE = 3358,
	GL_COMBINE_RGB = 34161,
	GL_SYNC_FENCE_APPLE = 37142,
	GL_TEXTURE_SHARED_SIZE = 35903,
	GL_STENCIL_BACK_OP_VALUE_AMD = 34637,
	GL_COPY_INVERTED = 5388,
	GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 36921,
	GL_DEBUG_SOURCE_APPLICATION_KHR = 33354,
	GL_TEXTURE_MAG_SIZE_NV = 34591,
	GL_OR_INVERTED = 5389,
	GL_MITER_REVERT_NV = 37031,
	GL_DSDT8_MAG8_INTENSITY8_NV = 34571,
	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973,
	GL_RENDERBUFFER_SAMPLES_IMG = 37171,
	GL_POLYGON_OFFSET_LINE = 10754,
	GL_MATRIX0_NV = 34352,
	GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 33387,
	GL_TEXTURE_3D_BINDING_EXT = 32874,
	GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 36645,
	GL_PROXY_TEXTURE_2D = 32868,
	GL_DEPTH32F_STENCIL8_NV = 36268,
	GL_REG_2_ATI = 35107,
	GL_INT_SAMPLER_1D_ARRAY = 36302,
	GL_TRACE_NAME_MESA = 34646,
	GL_MAX_DEBUG_LOGGED_MESSAGES = 37188,
	GL_TEXTURE_ENV = 8960,
	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 36445,
	GL_LINE_STRIP_ADJACENCY_OES = 11,
	GL_IMAGE_TEXEL_SIZE = 33447,
	GL_ALPHA16F_ARB = 34844,
	GL_SAMPLER_KHR = 33510,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 36874,
	GL_DEBUG_TYPE_PORTABILITY = 33359,
	GL_TIMESTAMP = 36392,
	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 32980,
	GL_VIEW_CLASS_128_BITS = 33476,
	GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 36164,
	GL_MODELVIEW1_EXT = 34058,
	GL_STENCIL_INDEX8 = 36168,
	GL_BOOL_VEC2_ARB = 35671,
	GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081,
	GL_FOG_SCALE_SGIX = 33276,
	GL_R1UI_T2F_N3F_V3F_SUN = 34250,
	GL_DEPTH_STENCIL_NV = 34041,
	GL_CUBE_MAP_SGIX = 33601,
	GL_COLOR_ARRAY_STRIDE_EXT = 32899,
	GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 37693,
	GL_FAILURE_NV = 36912,
	GL_STRICT_LIGHTING_HINT_PGI = 107031,
	GL_FOG_COORDINATE_ARRAY_STRIDE = 33877,
	GL_MAX_TESS_GEN_LEVEL_OES = 36478,
	GL_TRIANGLE_STRIP_ADJACENCY = 13,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 36490,
	GL_TEXTURE_BUFFER_OES = 35882,
	GL_OP_MUL_EXT = 34694,
	GL_SCISSOR_BIT = 524288,
	GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 16,
	GL_DRAW_BUFFER3 = 34856,
	GL_ISOLINES = 36474,
	GL_EMBOSS_MAP_NV = 34143,
	GL_QUERY_RESULT_NO_WAIT_AMD = 37268,
	GL_ALPHA_FLOAT32_APPLE = 34838,
	GL_COLOR_ATTACHMENT9_NV = 36073,
	GL_SEPARATE_SPECULAR_COLOR = 33274,
	GL_LUMINANCE4_EXT = 32831,
	GL_VERTEX_ARRAY_BINDING_APPLE = 34229,
	GL_UNPACK_SKIP_ROWS_EXT = 3315,
	GL_TEXTURE_COMPRESSION_HINT = 34031,
	GL_STENCIL_BACK_FUNC = 34816,
	GL_RGBA16_EXT = 32859,
	GL_PIXEL_UNPACK_BUFFER = 35052,
	GL_COLOR_TABLE_GREEN_SIZE_SGI = 32987,
	GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347,
	GL_READ_FRAMEBUFFER_EXT = 36008,
	GL_LIGHT2 = 16386,
	GL_TEXTURE_SAMPLES_IMG = 37174,
	GL_ROUNDED_RECT8_NV = 238,
	GL_REFLECTION_MAP_NV = 34066,
	GL_DRAW_BUFFER8_NV = 34861,
	GL_FULL_RANGE_EXT = 34785,
	GL_COMBINER3_NV = 34131,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 37067,
	GL_TEXTURE15 = 33999,
	GL_MAX_TEXTURE_STACK_DEPTH = 3385,
	GL_TRACE_PIXELS_BIT_MESA = 16,
	GL_DECR_WRAP = 34056,
	GL_ADD_SIGNED_EXT = 34164,
	GL_MAP1_INDEX = 3473,
	GL_VBO_FREE_MEMORY_ATI = 34811,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076,
	GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 37683,
	GL_SLUMINANCE8 = 35911,
	GL_R32F = 33326,
	GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 34521,
	GL_POLYGON_OFFSET_EXT = 32823,
	GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 34759,
	GL_COLOR_ATTACHMENT7 = 36071,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 37639,
	GL_SAMPLE_MASK_INVERT_EXT = 32939,
	GL_LUMINANCE16_SIGNED_SGIX = 34281,
	GL_EDGE_FLAG = 2883,
	GL_PATCHES_EXT = 14,
	GL_POINT_SIZE = 2833,
	GL_UNSIGNED_INT64_AMD = 35778,
	GL_FALSE = 0,
	GL_WEIGHT_ARRAY_OES = 34477,
	GL_SOURCE0_ALPHA_EXT = 34184,
	GL_BLEND_DST_RGB_OES = 32968,
	GL_PHASE_SGIX = 33578,
	GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 35081,
	GL_TRANSFORM_FEEDBACK_PAUSED = 36387,
	GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986,
	GL_ATTRIB_ARRAY_POINTER_NV = 34373,
	GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 33620,
	GL_SYNC_CONDITION_APPLE = 37139,
	GL_PURGEABLE_APPLE = 35357,
	GL_PRIMITIVE_BOUNDING_BOX_OES = 37566,
	GL_TESSELLATION_MODE_AMD = 36868,
	GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 11,
	GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 1,
	GL_ELEMENT_ARRAY_BUFFER_ARB = 34963,
	GL_RGB_422_APPLE = 35359,
	GL_QUERY = 33507,
	GL_LAST_VIDEO_CAPTURE_STATUS_NV = 36903,
	GL_VERTEX_BINDING_STRIDE = 33496,
	GL_TRACE_ERRORS_BIT_MESA = 32,
	GL_PRIMITIVE_RESTART_INDEX_NV = 34137,
	GL_GEOMETRY_SHADER = 36313,
	GL_TEXTURE_INTERNAL_FORMAT_QCOM = 35797,
	GL_SIGNED_INTENSITY_NV = 34567,
	GL_TEXTURE_4D_SGIS = 33076,
	GL_MATRIX14_NV = 34366,
	GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 33532,
	GL_COMPRESSED_ALPHA = 34025,
	GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 1,
	GL_INTERNALFORMAT_RED_TYPE = 33400,
	GL_INSTRUMENT_MEASUREMENTS_SGIX = 33153,
	GL_Z400_BINARY_AMD = 34624,
	GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466,
	GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272,
	GL_BLEND_COLOR = 32773,
	GL_LIGHT_MODEL_AMBIENT = 2899,
	GL_LINE = 6913,
	GL_BLEND_EQUATION_RGB_EXT = 32777,
	GL_MIN_BLUE_SGIS = 34218,
	GL_RGB32UI_EXT = 36209,
	GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 1,
	GL_TESS_EVALUATION_SHADER_BIT_OES = 16,
	GL_TEXTURE_DEFORMATION_SGIX = 33173,
	GL_TEXTURE26 = 34010,
	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297,
	GL_REPLACE_EXT = 32866,
	GL_IMAGE_CUBE_MAP_ARRAY_OES = 36948,
	GL_MAX_ELEMENT_INDEX = 36203,
	GL_VIDEO_COLOR_CONVERSION_MIN_NV = 36907,
	GL_DOUBLE_VEC2_EXT = 36860,
	GL_OP_ADD_EXT = 34695,
	GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946,
	GL_FOG_GROUND_PLANE_SGIX = 33574,
	GL_TRANSFORM_FEEDBACK_ACTIVE = 36388,
	GL_RGB16F_ARB = 34843,
	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 36388,
	GL_R16I = 33331,
	GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 34943,
	GL_LINE_STRIP_ADJACENCY_ARB = 11,
	GL_TRACE_PRIMITIVES_BIT_MESA = 2,
	GL_BGRA_INTEGER_EXT = 36251,
	GL_MVP_MATRIX_EXT = 34787,
	GL_MIN_ALPHA_SGIS = 34220,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069,
	GL_BACK_RIGHT = 1027,
	GL_MAX_SAMPLES_NV = 36183,
	GL_FRONT_FACE = 2886,
	GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 33784,
	GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 36665,
	GL_TEXTURE_LOD_BIAS_R_SGIX = 33168,
	GL_SUBTRACT_ARB = 34023,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 36263,
	GL_GUILTY_CONTEXT_RESET_ARB = 33363,
	GL_LINES_ADJACENCY_EXT = 10,
	GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 16,
	GL_SMALL_CW_ARC_TO_NV = 20,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 36312,
	GL_POINT_FADE_THRESHOLD_SIZE_EXT = 33064,
	GL_RELATIVE_LARGE_CW_ARC_TO_NV = 25,
	GL_MAX_FRAMEBUFFER_SAMPLES = 37656,
	GL_MAX_VARYING_FLOATS_ARB = 35659,
	GL_READ_WRITE = 35002,
	GL_TEXTURE_TOO_LARGE_EXT = 32869,
	GL_GEOMETRY_PROGRAM_NV = 35878,
	GL_EVAL_VERTEX_ATTRIB1_NV = 34503,
	GL_PATH_COMMAND_COUNT_NV = 37021,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 36879,
	GL_SAMPLE_BUFFERS_ARB = 32936,
	GL_VALIDATE_STATUS = 35715,
	GL_INDEX_BITS = 3409,
	GL_DEPTH_ATTACHMENT = 36096,
	GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998,
	GL_RGB16UI = 36215,
	GL_DEPTH_STENCIL_ATTACHMENT = 33306,
	GL_SAMPLES_EXT = 32937,
	GL_FRAGMENT_PROGRAM_NV = 34928,
	GL_SIGNED_HILO_NV = 34553,
	GL_TESS_CONTROL_PROGRAM_NV = 35102,
	GL_FUNC_REVERSE_SUBTRACT_EXT = 32779,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319,
	GL_SRGB8_EXT = 35905,
	GL_TEXTURE23 = 34007,
	GL_SCREEN_COORDINATES_REND = 33936,
	GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 1,
	GL_TRACE_TEXTURES_BIT_MESA = 8,
	GL_DS_BIAS_NV = 34582,
	GL_NORMAL_ARRAY = 32885,
	GL_UNPACK_CMYK_HINT_EXT = 32783,
	GL_MAX_LABEL_LENGTH = 33512,
	GL_Q = 8195,
	GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 33502,
	GL_PROGRAM_BINARY_LENGTH_OES = 34625,
	GL_PLUS_CLAMPED_ALPHA_NV = 37554,
	GL_SCISSOR_TEST = 3089,
	GL_ENV_MAP_SGIX = 33600,
	GL_TEXTURE_INTENSITY_SIZE_EXT = 32865,
	GL_REG_5_ATI = 35110,
	GL_TEXTURE_CUBE_MAP_OES = 34067,
	GL_SLUMINANCE_EXT = 35910,
	GL_COORD_REPLACE = 34914,
	GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 33634,
	GL_POST_CONVOLUTION_RED_BIAS_EXT = 32800,
	GL_ELEMENT_ARRAY_APPLE = 35340,
	GL_UNPACK_ROW_LENGTH_EXT = 3314,
	GL_AFFINE_2D_NV = 37010,
	GL_MAX_LUMINANCE_SGIS = 34297,
	GL_SPECULAR = 4610,
	GL_UNDEFINED_VERTEX = 33376,
	GL_OP_RECIP_EXT = 34708,
	GL_TEXTURE_4D_BINDING_SGIS = 33103,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 37639,
	GL_RED_BIAS = 3349,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 36482,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 37696,
	GL_SECONDARY_COLOR_NV = 34093,
	GL_SAMPLE_PATTERN_EXT = 32940,
	GL_T4F_C4F_N3F_V4F = 10797,
	GL_VERTEX_STREAM6_ATI = 34674,
	GL_COPY_WRITE_BUFFER_BINDING = 36663,
	GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 36058,
	GL_SPRITE_MODE_SGIX = 33097,
	GL_CONTEXT_LOST = 1287,
	GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 34113,
	GL_RGB2_EXT = 32846,
	GL_GREEN_BIAS = 3353,
	GL_VERTEX_ARRAY_RANGE_POINTER_NV = 34081,
	GL_SHADER_IMAGE_STORE = 33445,
	GL_RECT_NV = 246,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 33351,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 37279,
	GL_COVERAGE_COMPONENT4_NV = 36561,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 36489,
	GL_TEXTURE_NORMAL_EXT = 34223,
	GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 34080,
	GL_DRAW_BUFFER11 = 34864,
	GL_COLOR_ARRAY_LIST_IBM = 103072,
	GL_UNIFORM_BUFFER_BINDING_EXT = 36335,
	GL_OBJECT_BUFFER_SIZE_ATI = 34660,
	GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 32914,
	GL_SHADER_BINARY_DMP = 37456,
	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 35958,
	GL_DRAW_INDIRECT_UNIFIED_NV = 36672,
	GL_SOFTLIGHT_NV = 37532,
	GL_DEBUG_OUTPUT = 37600,
	GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 32798,
	GL_REPLACEMENT_CODE_SUN = 33240,
	GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899,
	GL_TRUE = 1,
	GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 37187,
	GL_BITMAP_TOKEN = 1796,
	GL_GUILTY_CONTEXT_RESET = 33363,
	GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370,
	GL_DEBUG_OUTPUT_SYNCHRONOUS = 33346,
	GL_MULTISAMPLE_FILTER_HINT_NV = 34100,
	GL_BLEND_DST_ALPHA_OES = 32970,
	GL_COMPRESSED_RGBA_FXT1_3DFX = 34481,
	GL_LINES = 1,
	GL_VERTEX_SUBROUTINE = 37608,
	GL_GET_TEXTURE_IMAGE_TYPE = 33426,
	GL_SAMPLER_2D_ARRAY_EXT = 36289,
	GL_EXPAND_NEGATE_NV = 34105,
	GL_TRACE_ALL_BITS_MESA = 65535,
	GL_OFFSET_TEXTURE_2D_BIAS_NV = 34531,
	GL_NUM_SHADER_BINARY_FORMATS = 36345,
	GL_RGB8_SNORM = 36758,
	GL_PIXEL_MAP_R_TO_R_SIZE = 3254,
	GL_PIXEL_MAP_A_TO_A_SIZE = 3257,
	GL_DARKEN_KHR = 37527,
	GL_FRAMEBUFFER_RENDERABLE = 33417,
	GL_VERSION = 7938,
	GL_TESS_GEN_VERTEX_ORDER_OES = 36472,
	GL_DEBUG_TYPE_ERROR = 33356,
	GL_PROGRAM_INSTRUCTIONS_ARB = 34976,
	GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 36915,
	GL_ALPHA12 = 32829,
	GL_MAX_VERTEX_SHADER_LOCALS_EXT = 34761,
	GL_OPERAND1_ALPHA_EXT = 34201,
	GL_MATRIX_INDEX_ARRAY_OES = 34884,
	GL_REDUCE_EXT = 32790,
	GL_VERTEX_PROGRAM_POINT_SIZE = 34370,
	GL_SLUMINANCE_ALPHA_NV = 35908,
	GL_HSL_HUE_NV = 37549,
	GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 8,
	GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 17,
	GL_CLAMP_READ_COLOR_ARB = 35100,
	GL_UNPACK_IMAGE_HEIGHT = 32878,
	GL_PATH_GEN_COEFF_NV = 37041,
	GL_MODELVIEW3_ARB = 34595,
	GL_PIXEL_TEX_GEN_LAMBDA_SOURCE_SGIX = 33626,
	GL_SUB_ATI = 35173,
	GL_TEXTURE_COLOR_SAMPLES_NV = 36934,
	GL_FORMAT_SUBSAMPLE_24_24_OML = 35202,
	GL_BGR = 32992,
	GL_ATTRIB_ARRAY_STRIDE_NV = 34340,
	GL_MULTISAMPLE_BIT_EXT = 536870912,
	GL_GLYPH_HAS_KERNING_BIT_NV = 256,
	GL_SRC_IN_NV = 37514,
	GL_R32F_EXT = 33326,
	GL_PATH_FILL_BOUNDING_BOX_NV = 37025,
	GL_UNSIGNED_INVERT_NV = 34103,
	GL_VERTEX_ARRAY_RANGE_VALID_NV = 34079,
	GL_CLAMP_TO_BORDER_ARB = 33069,
	GL_COLOR_ATTACHMENT5 = 36069,
	GL_MAX_CONVOLUTION_HEIGHT_EXT = 32795,
	GL_C4F_N3F_V3F = 10790,
	GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305,
	GL_MAP_ATTRIB_U_ORDER_NV = 34499,
	GL_TRANSFORM_FEEDBACK_BUFFER_START = 35972,
	GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 2147483648,
	GL_FACTOR_ALPHA_MODULATE_IMG = 35847,
	GL_VERTEX_ATTRIB_ARRAY9_NV = 34393,
	GL_NOR = 5384,
	GL_PALETTE4_RGBA8_OES = 35729,
	GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 34523,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357,
	GL_TEXTURE_MIPMAP_ANISOTROPY_SGIX = 33582,
	GL_MAX_TEXTURE_BUFFER_SIZE = 35883,
	GL_SAMPLE_MASK_EXT = 32928,
	GL_SAMPLER_CUBE = 35680,
	GL_MAX_CLIP_DISTANCES_APPLE = 3378,
	GL_SAMPLES = 32937,
	GL_TEXTURE_3D_OES = 32879,
	GL_SAMPLE_COVERAGE_INVERT_ARB = 32939,
	GL_UNSIGNED_INT_10_10_10_2_EXT = 32822,
	GL_STENCIL_INDEX1_EXT = 36166,
	GL_VERTEX_SHADER_BIT = 1,
	GL_MAX_4D_TEXTURE_SIZE_SGIS = 33080,
	GL_SEPARATE_ATTRIBS_NV = 35981,
	GL_MAX_NUM_ACTIVE_VARIABLES = 37623,
	GL_SAMPLE_ALPHA_TO_ONE_SGIS = 32927,
	GL_SLIM12S_SGIX = 33567,
	GL_RGB16_EXTENDED_RANGE_SGIX = 34290,
	GL_LIGHT4 = 16388,
	GL_MOVE_TO_RESETS_NV = 37045,
	GL_RGBA_FLOAT32_ATI = 34836,
	GL_FOG_COORDINATE_ARRAY = 33879,
	GL_COLOR_INDEX16_EXT = 32999,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 37079,
	GL_VARIABLE_A_NV = 34083,
	GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 37087,
	GL_INT_10_10_10_2_OES = 36343,
	GL_BITMAP = 6656,
	GL_ITALIC_BIT_NV = 2,
	GL_LUMINANCE_FLOAT32_APPLE = 34840,
	GL_DEBUG_TYPE_PORTABILITY_KHR = 33359,
	GL_SAMPLER_BUFFER_AMD = 36865,
	GL_AUTO_GENERATE_MIPMAP = 33429,
	GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 34242,
	GL_REPLACEMENT_CODE_ARRAY_SUN = 34240,
	GL_SHADER_STORAGE_BUFFER_BINDING = 37075,
	GL_COMPRESSED_RGB_FXT1_3DFX = 34480,
	GL_MULTISAMPLE_3DFX = 34482,
	GL_READ_ONLY_ARB = 35000,
	GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 37078,
	GL_TEXTURE_BUFFER_BINDING_EXT = 35882,
	GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 33353,
	GL_SECONDARY_COLOR_ARRAY_TYPE = 33883,
	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657,
	GL_NORMAL_ARRAY_POINTER = 32911,
	GL_CPU_OPTIMIZED_QCOM = 36785,
	GL_GENERATE_MIPMAP_SGIS = 33169,
	GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 33459,
	GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915,
	GL_TEXTURE_IMMUTABLE_FORMAT = 37167,
	GL_VERTEX_ARRAY_TYPE_EXT = 32891,
	GL_REDUCE = 32790,
	GL_BUFFER_ACCESS_OES = 35003,
	GL_DEBUG_CALLBACK_FUNCTION_ARB = 33348,
	GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284,
	GL_EVAL_VERTEX_ATTRIB6_NV = 34508,
	GL_COMPRESSED_LUMINANCE_ALPHA = 34027,
	GL_DRAW_BUFFER = 3073,
	GL_TEXTURE_GEN_MODE = 9472,
	GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068,
	GL_RESAMPLE_DECIMATE_OML = 35209,
	GL_RGBA_SNORM = 36755,
	GL_TEXTURE_WRAP_T = 10243,
	GL_POLYGON_STIPPLE_BIT = 16,
	GL_HISTOGRAM_WIDTH = 32806,
	GL_BUFFER_KHR = 33504,
	GL_UNSIGNED_INT_8_8_8_8 = 32821,
	GL_QUADS_OES = 7,
	GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979,
	GL_POINT_SPRITE_COORD_ORIGIN = 36000,
	GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045,
	GL_INVERTED_SCREEN_W_REND = 33937,
	GL_CONTEXT_FLAGS = 33310,
	GL_MAX_LAYERS = 33409,
	GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441,
	GL_TEXTURE_HEIGHT = 4097,
	GL_QUADRATIC_ATTENUATION = 4617,
	GL_SOURCE0_RGB_EXT = 34176,
	GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 37020,
	GL_YCRCB_SGIX = 33560,
	GL_UNIFORM_MATRIX_STRIDE = 35389,
	GL_PROGRAM_LENGTH_ARB = 34343,
	GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309,
	GL_WRITE_PIXEL_DATA_RANGE_NV = 34936,
	GL_DYNAMIC_COPY = 35050,
	GL_LUMINANCE_ALPHA8I_EXT = 36243,
	GL_EXTENDED_RANGE_SGIS = 34213,
	GL_COMBINER_MUX_SUM_NV = 34119,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 37068,
	GL_IMAGE_ROTATE_ORIGIN_Y_HP = 33115,
	GL_QUERY_BUFFER_AMD = 37266,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 37577,
	GL_VERTEX_PRECLIP_HINT_SGIX = 33775,
	GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 8,
	GL_TEXTURE_3D = 32879,
	GL_COLOR_ARRAY_POINTER = 32912,
	GL_LUMINANCE4_ALPHA4 = 32835,
	GL_TEXTURE_FORMAT_QCOM = 35798,
	GL_HISTOGRAM_GREEN_SIZE = 32809,
	GL_NEGATIVE_X_EXT = 34777,
	GL_R32UI = 33334,
	GL_COLOR_MATERIAL = 2903,
	GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022,
	GL_DETAIL_TEXTURE_LEVEL_SGIS = 32922,
	GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819,
	GL_QUAD_LUMINANCE8_SGIS = 33057,
	GL_2X_BIT_ATI = 1,
	GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 33352,
	GL_UNSIGNED_INT_SAMPLER_1D = 36305,
	GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 35096,
	GL_CURRENT_RASTER_SECONDARY_COLOR = 33887,
	GL_ALIASED_POINT_SIZE_RANGE = 33901,
	GL_COMPRESSED_RG11_EAC_OES = 37490,
	GL_MAX_TESS_PATCH_COMPONENTS = 36484,
	GL_TEXTURE_BORDER_COLOR = 4100,
	GL_EMBOSS_LIGHT_NV = 34141,
	GL_FRAGMENT_SHADER = 35632,
	GL_SHARED_TEXTURE_PALETTE_EXT = 33275,
	GL_SWIZZLE_STR_ATI = 35190,
	GL_LUMINANCE8_SNORM = 36885,
	GL_TEXTURE1 = 33985,
	GL_MAX_DEBUG_MESSAGE_LENGTH = 37187,
	GL_CONTEXT_ROBUST_ACCESS = 37107,
	GL_MODELVIEW1_STACK_DEPTH_EXT = 34050,
	GL_FRACTIONAL_EVEN = 36476,
	GL_PERFQUERY_DONOT_FLUSH_INTEL = 33785,
	GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 4,
	GL_ANY_SAMPLES_PASSED_EXT = 35887,
	GL_UNSIGNED_SHORT_5_6_5_REV = 33636,
	GL_STANDARD_FONT_NAME_NV = 36978,
	GL_MAX_PALETTE_MATRICES_OES = 34882,
	GL_OP_CROSS_PRODUCT_EXT = 34711,
	GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971,
	GL_UNSIGNED_INT_SAMPLER_2D = 36306,
	GL_MAP_READ_BIT = 1,
	GL_CURRENT_TIME_NV = 36392,
	GL_BGR_EXT = 32992,
	GL_QUERY_BY_REGION_WAIT_INVERTED = 36377,
	GL_MAX_ASYNC_READ_PIXELS_SGIX = 33633,
	GL_POST_CONVOLUTION_RED_SCALE = 32796,
	GL_STENCIL_INDEX1 = 36166,
	GL_ALPHA32UI_EXT = 36210,
	GL_RETAINED_APPLE = 35355,
	GL_COMPUTE_TEXTURE = 33440,
	GL_BLUE_MIN_CLAMP_INGR = 34146,
	GL_MAP1_GRID_SEGMENTS = 3537,
	GL_MAP2_GRID_SEGMENTS = 3539,
	GL_DRAW_BUFFER6_NV = 34859,
	GL_3_BYTES_NV = 5128,
	GL_MAP_WRITE_BIT = 2,
	GL_RENDERBUFFER_SAMPLES_APPLE = 36011,
	GL_ALPHA_TEST_QCOM = 3008,
	GL_RGB = 6407,
	GL_ALPHA16F_EXT = 34844,
	GL_DOUBLE_MAT3x2 = 36683,
	GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 37188,
	GL_INDEX_ARRAY_STRIDE_EXT = 32902,
	GL_TEXTURE_RESIDENT = 32871,
	GL_POINT_SIZE_MAX_EXT = 33063,
	GL_BINORMAL_ARRAY_EXT = 33850,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 36479,
	GL_YCRCB_444_SGIX = 33212,
	GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34760,
	GL_NONE = 0,
	GL_MAX_TEXTURES_SGIS = 33731,
	GL_RGB8I = 36239,
	GL_MALI_PROGRAM_BINARY_ARM = 36705,
	GL_MATRIX13_NV = 34365,
	GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 36485,
	GL_PROGRAM_FORMAT_ASCII_ARB = 34933,
	GL_PINLIGHT_NV = 37544,
	GL_SECONDARY_COLOR_ARRAY = 33886,
	GL_INTENSITY = 32841,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 37587,
	GL_RENDERBUFFER_INTERNAL_FORMAT = 36164,
	GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 33148,
	GL_TRIANGLE_LIST_SUN = 33239,
	GL_TEXTURE_COMPRESSED_ARB = 34465,
	GL_RELATIVE_VERTICAL_LINE_TO_NV = 9,
	GL_GUILTY_CONTEXT_RESET_EXT = 33363,
	GL_MAP2_TEXTURE_COORD_4 = 3510,
	GL_TEXTURE_VIEW_NUM_LAYERS_OES = 33502,
	GL_RELATIVE_LINE_TO_NV = 5,
	GL_COMPARE_REF_TO_TEXTURE = 34894,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 35881,
	GL_OBJECT_BUFFER_USAGE_ATI = 34661,
	GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 36665,
	GL_CULL_FACE_MODE = 2885,
	GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 38143,
	GL_COVERAGE_SAMPLES_NV = 36564,
	GL_TEXTURE_DEPTH = 32881,
	GL_RESET_NOTIFICATION_STRATEGY_EXT = 33366,
	GL_INNOCENT_CONTEXT_RESET = 33364,
	GL_MAX_3D_TEXTURE_SIZE_EXT = 32883,
	GL_CONTEXT_RELEASE_BEHAVIOR = 33531,
	GL_LAYER_PROVOKING_VERTEX_EXT = 33374,
	GL_POST_CONVOLUTION_RED_BIAS = 32800,
	GL_DEPTH_TEXTURE_MODE_ARB = 34891,
	GL_ETC1_SRGB8_NV = 35054,
	GL_VERTEX23_BIT_PGI = 4,
	GL_REGISTER_COMBINERS_NV = 34082,
	GL_TESS_EVALUATION_SHADER_BIT = 16,
	GL_PIXEL_MAP_I_TO_I = 3184,
	GL_CONVOLUTION_BORDER_MODE = 32787,
	GL_COLOR_ATTACHMENT3 = 36067,
	GL_DEPTH_STENCIL_OES = 34041,
	GL_INT8_VEC3_NV = 36834,
	GL_PIXEL_COUNTER_BITS_NV = 34916,
	GL_SOURCE2_ALPHA_ARB = 34186,
	GL_VERTEX_ATTRIB_ARRAY15_NV = 34399,
	GL_RELATIVE_SMALL_CW_ARC_TO_NV = 21,
	GL_3DC_X_AMD = 34809,
	GL_R16 = 33322,
	GL_DRAW_BUFFER_EXT = 3073,
	GL_SPOT_CUTOFF = 4614,
	GL_PN_TRIANGLES_ATI = 34800,
	GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 37099,
	GL_RG8_EXT = 33323,
	GL_RESAMPLE_DECIMATE_SGIX = 33840,
	GL_UNPACK_SKIP_PIXELS = 3316,
	GL_REG_12_ATI = 35117,
	GL_COLOR_SUM_EXT = 33880,
	GL_R8I = 33329,
	GL_DRAW_BUFFER7 = 34860,
	GL_COMPRESSED_SIGNED_RG11_EAC_OES = 37491,
	GL_UNSIGNED_INT_SAMPLER_2D_RECT = 36309,
	GL_POST_TEXTURE_FILTER_SCALE_SGIX = 33146,
	GL_EYE_RADIAL_NV = 34139,
	GL_LIGHT_ENV_MODE_SGIX = 33799,
	GL_LIST_PRIORITY_SGIX = 33154,
	GL_PROGRAM_ERROR_POSITION_NV = 34379,
	GL_DST_COLOR = 774,
	GL_MAX_TEXTURE_LOD_BIAS = 34045,
	GL_OCCLUSION_TEST_HP = 33125,
	GL_HILO8_NV = 34910,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 36320,
	GL_FLOAT_MAT2x4 = 35686,
	GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 32990,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069,
	GL_PROGRAM = 33506,
	GL_PROXY_TEXTURE_RECTANGLE = 34039,
	GL_ENABLE_BIT = 8192,
	GL_ROUNDED_RECT2_NV = 234,
	GL_HISTOGRAM_BLUE_SIZE_EXT = 32810,
	GL_SRC_ALPHA_SATURATE = 776,
	GL_DRAW_BUFFER10_EXT = 34863,
	GL_IMAGE_2D_MULTISAMPLE_EXT = 36949,
	GL_COVERAGE_ALL_FRAGMENTS_NV = 36565,
	GL_DOUBLE_MAT4x3 = 36686,
	GL_TEXTURE_PRIORITY = 32870,
	GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 36259,
	GL_MAP1_COLOR_4_NURBS_SGIX = 33230,
	GL_DEPTH_CLAMP_FAR_AMD = 36895,
	GL_MAP1_BINORMAL_EXT = 33862,
	GL_R8_EXT = 33321,
	GL_REPLACE_OLDEST_SUN = 3,
	GL_QUERY_WAIT_NV = 36371,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347,
	GL_GEOMETRY_SHADER_INVOCATIONS_OES = 34943,
	GL_OBJECT_LINEAR_NV = 9217,
	GL_MAX_VERTEX_STREAMS_ATI = 34667,
	GL_EYE_PLANE = 9474,
	GL_TESS_EVALUATION_SHADER_BIT_EXT = 16,
	GL_TEXTURE_COMPRESSED = 34465,
	GL_TEXTURE_BUFFER_BINDING = 35882,
	GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 34940,
	GL_DOMAIN = 2562,
	GL_TEXTURE_BINDING_1D = 32872,
	GL_RGB5_EXT = 32848,
	GL_RGB_EXTENDED_RANGE_SGIX = 34284,
	GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 16777216,
	GL_VERTEX_ARRAY_LENGTH_NV = 36651,
	GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 23,
	GL_IMAGE_CLASS_4_X_32 = 33465,
	GL_TEXTURE_STENCIL_SIZE = 35057,
	GL_COLOR_TO_TEXTURE_COORD_SGIX = 33623,
	GL_UNKNOWN_CONTEXT_RESET_ARB = 33365,
	GL_QUERY_NO_WAIT_NV = 36372,
	GL_COLOR_WRITEMASK = 3107,
	GL_MAX_IMAGE_SAMPLES_EXT = 36973,
	GL_UNDEFINED_VERTEX_OES = 33376,
	GL_SAMPLE_ALPHA_TO_MASK_SGIS = 32926,
	GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 37167,
	GL_MAX_3D_TEXTURE_SIZE_OES = 32883,
	GL_TEXTURE_1D_ARRAY = 35864,
	GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33591,
	GL_PACK_SKIP_ROWS = 3331,
	GL_TESS_CONTROL_SHADER_EXT = 36488,
	GL_MAX_DRAW_BUFFERS_EXT = 34852,
	GL_TIME_ELAPSED = 35007,
	GL_TEXCOORD3_BIT_PGI = 1073741824,
	GL_TEXTURE_MEMORY_LAYOUT_INTEL = 33791,
	GL_FILTER4_SGIS = 33094,
	GL_TEXTURE_ALPHA_TYPE = 35859,
	GL_VIBRANCE_BIAS_NV = 34585,
	GL_OCCLUSION_TEST_RESULT_HP = 33126,
	GL_TEXTURE_VIEW = 33461,
	GL_FLOAT_R16_NV = 34948,
	GL_RGB32F_ARB = 34837,
	GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 37674,
	GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282,
	GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 35213,
	GL_LUMINANCE16_SNORM = 36889,
	GL_TEXTURE_WRAP_S = 10242,
	GL_VIEW_CLASS_24_BITS = 33481,
	GL_ACTIVE_TEXTURE = 34016,
	GL_MAX_COMBINED_DIMENSIONS = 33410,
	GL_GPU_ADDRESS_NV = 36660,
	GL_TRANSFORM_BIT = 4096,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 36049,
	GL_UNSIGNED_INT = 5125,
	GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396,
	GL_FONT_UNAVAILABLE_NV = 37738,
	GL_MINOR_VERSION = 33308,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 37079,
	GL_ALL_BARRIER_BITS_EXT = 4294967295,
	GL_EYE_DISTANCE_TO_LINE_SGIS = 33266,
	GL_STENCIL_REF = 2967,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY = 36878,
	GL_IMAGE_TRANSFORM_2D_HP = 33121,
	GL_TIME_ELAPSED_EXT = 35007,
	GL_RGBA_MODE = 3121,
	GL_XOR_NV = 5382,
	GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867,
	GL_READ_WRITE_ARB = 35002,
	GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776,
	GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982,
	GL_GEOMETRY_SHADER_OES = 36313,
	GL_VERTEX_ARRAY_RANGE_APPLE = 34077,
	GL_VIEW_CLASS_S3TC_DXT1_RGB = 33484,
	GL_LINE_STIPPLE = 2852,
	GL_VERTEX_ARRAY_BINDING_OES = 34229,
	GL_INTERNALFORMAT_BLUE_SIZE = 33395,
	GL_ARC_TO_NV = 254,
	GL_DEPTH_COMPONENT16_OES = 33189,
	GL_VERTEX_SHADER = 35633,
	GL_FLOAT_RGBA32_NV = 34955,
	GL_FRAGMENT_INPUT_NV = 37741,
	GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 37086,
	GL_MATRIX1_NV = 34353,
	GL_PATH_STROKE_MASK_NV = 36996,
	GL_FOG_COORDINATE_SOURCE_EXT = 33872,
	GL_TEXTURE_OBJECT_VALID_QCOM = 35803,
	GL_LUMINANCE4_ALPHA4_EXT = 32835,
	GL_READ_FRAMEBUFFER_ANGLE = 36008,
	GL_TESS_CONTROL_OUTPUT_VERTICES = 36469,
	GL_COLOR_ARRAY_TYPE_EXT = 32898,
	GL_BLOCK_INDEX = 37629,
	GL_FLOAT16_VEC2_NV = 36857,
	GL_TEXTURE_GEQUAL_R_SGIX = 33181,
	GL_STENCIL_RENDERABLE = 33416,
	GL_MAX_3D_TEXTURE_SIZE = 32883,
	GL_SGX_PROGRAM_BINARY_IMG = 37168,
	GL_C4UB_V3F = 10787,
	GL_SAMPLER_3D = 35679,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 35070,
	GL_ATOMIC_COUNTER_BARRIER_BIT = 4096,
	GL_MIN_MAP_BUFFER_ALIGNMENT = 37052,
	GL_COMBINER_BIAS_NV = 34121,
	GL_DEPTH_CLAMP = 34383,
	GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 34902,
	GL_BOUNDING_BOX_NV = 37005,
	GL_SAMPLER_EXTERNAL_OES = 36198,
	GL_DEBUG_SEVERITY_HIGH_KHR = 37190,
	GL_PROGRAM_RESULT_COMPONENTS_NV = 35079,
	GL_UNPACK_CLIENT_STORAGE_APPLE = 34226,
	GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 36269,
	GL_DEBUG_GROUP_STACK_DEPTH = 33389,
	GL_TEXTURE7 = 33991,
	GL_TEXTURE_RESIDENT_EXT = 32871,
	GL_COMPRESSED_RGB_ARB = 34029,
	GL_LARGE_CCW_ARC_TO_NV = 22,
	GL_PHONG_WIN = 33002,
	GL_TEXTURE_GREEN_SIZE_EXT = 32861,
	GL_RENDERBUFFER_HEIGHT = 36163,
	GL_PRIMARY_COLOR = 34167,
	GL_EVAL_VERTEX_ATTRIB9_NV = 34511,
	GL_TEXTURE_IMMUTABLE_LEVELS = 33503,
	GL_UNSIGNED_INT_VEC3 = 36295,
	GL_DEBUG_SOURCE_APPLICATION_ARB = 33354,
	GL_CONTEXT_LOST_WEBGL = 37442,
	GL_FLOAT_RGB32_NV = 34953,
	GL_NUM_PROGRAM_BINARY_FORMATS = 34814,
	GL_MAX_INTENSITY_SGIS = 34299,
	GL_T = 8193,
	GL_INCR_WRAP = 34055,
	GL_DRAW_FRAMEBUFFER_EXT = 36009,
	GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 34078,
	GL_AUTO_NORMAL = 3456,
	GL_BALI_R_CHIP_COUNT_SGIX = 33772,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 34765,
	GL_MAX_VIEWPORTS = 33371,
	GL_COMPLEX_UNSIGNED_SHORT_SGI = 33215,
	GL_TEXTURE_WIDTH = 4096,
	GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 36442,
	GL_REFERENCE_PLANE_EQUATION_SGIX = 33150,
	GL_RGB4 = 32847,
	GL_COMPARE_R_TO_TEXTURE = 34894,
	GL_CON_30_ATI = 35167,
	GL_UNSIGNED_INT_24_8_OES = 34042,
	GL_CLAMP_TO_BORDER_SGIS = 33069,
	GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950,
	GL_LUMINANCE8_ALPHA8_OES = 32837,
	GL_CON_11_ATI = 35148,
	GL_PROGRAM_POINT_SIZE = 34370,
	GL_TEXCOORD1_BIT_PGI = 268435456,
	GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 32802,
	GL_MAX_FRAMEBUFFER_LAYERS_EXT = 37655,
	GL_FUNC_SUBTRACT_EXT = 32778,
	GL_INT_SAMPLER_1D_EXT = 36297,
	GL_ETC1_RGB8_OES = 36196,
	GL_COMBINER0_NV = 34128,
	GL_DRAW_BUFFER15 = 34868,
	GL_DIFFUSE = 4609,
	GL_SPOT_CUTOFF_DELTA_SGIX = 33171,
	GL_DEPTH_COMPONENT32 = 33191,
	GL_MAP2_INDEX = 3505,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321,
	GL_UNSIGNED_INT_10F_11F_11F_REV = 35899,
	GL_SRGB_DECODE_ARB = 33433,
	GL_TRANSPOSE_MODELVIEW_MATRIX = 34019,
	GL_COLOR_MATRIX = 32945,
	GL_MAP_UNSYNCHRONIZED_BIT_EXT = 32,
	GL_TEXTURE_IMAGE_VALID_QCOM = 35800,
	GL_MAX_VERTEX_ATTRIBS = 34921,
	GL_ALPHA16 = 32830,
	GL_TRACK_MATRIX_TRANSFORM_NV = 34377,
	GL_VERTEX_PROGRAM_POSITION_MESA = 35764,
	GL_RG8_SNORM = 36757,
	GL_SYNC_X11_FENCE_EXT = 37089,
	GL_TEXTURE_RECTANGLE_NV = 34037,
	GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831,
	GL_COMBINER_COMPONENT_USAGE_NV = 34116,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 37156,
	GL_DST_OVER_NV = 37513,
	GL_RGB16_SNORM = 36762,
	GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 8,
	GL_RGB16F = 34843,
	GL_UNPACK_IMAGE_DEPTH_SGIS = 33075,
	GL_SAMPLER_3D_ARB = 35679,
	GL_FRAGMENT_COLOR_EXT = 33612,
	GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 36767,
	GL_ATOMIC_COUNTER_BUFFER_SIZE = 37571,
	GL_COMPRESSED_SRGB_ALPHA = 35913,
	GL_BALI_DEPTH_PASS_INSTRUMENT_SGIX = 33771,
	GL_PACK_RESAMPLE_SGIX = 33838,
	GL_C3F_V3F = 10788,
	GL_CURRENT_VERTEX_EXT = 34786,
	GL_BUMP_TARGET_ATI = 34684,
	GL_SLUMINANCE8_ALPHA8 = 35909,
	GL_LIGHT0 = 16384,
	GL_POINT_DISTANCE_ATTENUATION = 33065,
	GL_SMOOTH_POINT_SIZE_RANGE = 2834,
	GL_TEXTURE_RED_TYPE_ARB = 35856,
	GL_ONE = 1,
	GL_MIRRORED_REPEAT_ARB = 33648,
	GL_CURRENT_FOG_COORDINATE = 33875,
	GL_SPRITE_SGIX = 33096,
	GL_VIEW_COMPATIBILITY_CLASS = 33462,
	GL_SECONDARY_INTERPOLATOR_ATI = 35181,
	GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076,
	GL_PIXEL_UNPACK_BUFFER_EXT = 35052,
	GL_DEPTH32F_STENCIL8 = 36013,
	GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 37494,
	GL_SPHERE_MAP = 9218,
	GL_VIEWPORT_BOUNDS_RANGE = 33373,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 36483,
	GL_MATRIX15_NV = 34367,
	GL_VERTEX_ATTRIB_ARRAY3_NV = 34387,
	GL_ALL_BARRIER_BITS = 4294967295,
	GL_FRAGMENTS_INSTRUMENT_SGIX = 33555,
	GL_COMPRESSED_INTENSITY_ARB = 34028,
	GL_MAP_INVALIDATE_RANGE_BIT_EXT = 4,
	GL_FUNC_REVERSE_SUBTRACT = 32779,
	GL_WEIGHT_ARRAY_SIZE_OES = 34475,
	GL_MAX_VERTEX_HINT_PGI = 107053,
	GL_FLOAT_MAT4x2 = 35689,
	GL_TEXTURE_BASE_LEVEL_SGIS = 33084,
	GL_VERTEX_CONSISTENT_HINT_PGI = 107051,
	GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008,
	GL_IMAGE_CLASS_1_X_8 = 33473,
	GL_MAX_VARYING_COMPONENTS_EXT = 35659,
	GL_VERTEX_DATA_HINT_PGI = 107050,
	GL_BACK_NORMALS_HINT_PGI = 107043,
	GL_SHADING_LANGUAGE_VERSION_ARB = 35724,
	GL_TESS_EVALUATION_SHADER = 36487,
	GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 36481,
	GL_PATH_MODELVIEW_NV = 5888,
	GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 32991,
	GL_MAX_DEPTH = 33408,
	GL_CURRENT_TEXTURE_COORDS = 2819,
	GL_TEXTURE_RANGE_POINTER_APPLE = 34232,
	GL_FULL_STIPPLE_HINT_PGI = 107033,
	GL_STRICT_SCISSOR_HINT_PGI = 107032,
	GL_VOLATILE_APPLE = 35354,
	GL_ATOMIC_COUNTER_BUFFER = 37568,
	GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954,
	GL_HISTOGRAM_SINK_EXT = 32813,
	GL_SIGNED_INTENSITY8_NV = 34568,
	GL_STRICT_DEPTHFUNC_HINT_PGI = 107030,
	GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 36968,
	GL_RGB9_E5_EXT = 35901,
	GL_COLOR_MATERIAL_FACE = 2901,
	GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 34350,
	GL_EYE_LINE_SGIS = 33270,
	GL_ALLOW_DRAW_FRG_HINT_PGI = 107024,
	GL_ALLOW_DRAW_WIN_HINT_PGI = 107023,
	GL_STATIC_DRAW_ARB = 35044,
	GL_ALLOW_DRAW_OBJ_HINT_PGI = 107022,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36383,
	GL_ALWAYS_SOFT_HINT_PGI = 107021,
	GL_NATIVE_GRAPHICS_END_HINT_PGI = 107012,
	GL_NATIVE_GRAPHICS_HANDLE_PGI = 107010,
	GL_RECLAIM_MEMORY_HINT_PGI = 107006,
	GL_PROGRAM_TEMPORARIES_ARB = 34980,
	GL_POINT_FADE_THRESHOLD_SIZE = 33064,
	GL_COUNTER_RANGE_AMD = 35777,
	GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087,
	GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086,
	GL_RASTERIZER_DISCARD_EXT = 35977,
	GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 15,
	GL_SMALL_CCW_ARC_TO_NV = 18,
	GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 37122,
	GL_NUM_PROGRAM_BINARY_FORMATS_OES = 34814,
	GL_DEBUG_TYPE_PERFORMANCE = 33360,
	GL_DEBUG_TYPE_PERFORMANCE_ARB = 33360,
	GL_RENDERBUFFER_FREE_MEMORY_ATI = 34813,
	GL_DUAL_INTENSITY16_SGIS = 33051,
	GL_ADD_BLEND_IMG = 35849,
	GL_FIELDS_NV = 36391,
	GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082,
	GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077,
	GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076,
	GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075,
	GL_PIXEL_TEX_GEN_SGIX = 33081,
	GL_FRACTIONAL_EVEN_EXT = 36476,
	GL_INDEX_ARRAY_LIST_IBM = 103073,
	GL_ALPHA_BITS = 3413,
	GL_NORMAL_ARRAY_LIST_IBM = 103071,
	GL_VERTEX_ARRAY_LIST_IBM = 103070,
	GL_COMPRESSED_R11_EAC_OES = 37488,
	GL_DEBUG_SEVERITY_MEDIUM_KHR = 37191,
	GL_STATIC_VERTEX_ARRAY_IBM = 103061,
	GL_LOWER_LEFT = 36001,
	GL_TEXTURE_ENV_COORD_SET_SGIS = 33734,
	GL_VIEWPORT_SUBPIXEL_BITS_NV = 33372,
	GL_ALL_STATIC_DATA_IBM = 103060,
	GL_DOUBLE_MAT2x3 = 36681,
	GL_RASTER_POSITION_UNCLIPPED_IBM = 103010,
	GL_FRAMEBUFFER_STATUS_ERROR_EXT = 36062,
	GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 38141,
	GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 38140,
	GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373,
	GL_GPU_OPTIMIZED_QCOM = 36786,
	GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 38139,
	GL_MAX_MAP_TESSELLATION_NV = 34518,
	GL_COLOR_ATTACHMENT6_NV = 36070,
	GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 38138,
	GL_COLOR_TABLE_BIAS_SGI = 32983,
	GL_NORMAL_BIT_PGI = 134217728,
	GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 38137,
	GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 38136,
	GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 35987,
	GL_TIMESTAMP_EXT = 36392,
	GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 38131,
	GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 38130,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 34762,
	GL_FOG_DENSITY = 2914,
	GL_PERFQUERY_COUNTER_EVENT_INTEL = 38128,
	GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373,
	GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 37873,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 37872,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 37865,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 37864,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 37863,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 37862,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 37861,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 37860,
	GL_TEXTURE_LOD_BIAS_EXT = 34049,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 37859,
	GL_MIN_INTENSITY_SGIS = 34298,
	GL_BACK = 1029,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 37858,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 37857,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 37856,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 37853,
	GL_LUMINANCE = 6409,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 37852,
	GL_RGB_INTEGER = 36248,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 36182,
	GL_GEOMETRY_TEXTURE = 33438,
	GL_RENDERBUFFER_SAMPLES_NV = 36011,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 37850,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 37849,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 37848,
	GL_REG_24_ATI = 35129,
	GL_SIGNALED = 37145,
	GL_BLEND_DST_ALPHA_EXT = 32970,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 37847,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 37846,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 37845,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 37844,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 37843,
	GL_MINUS_CLAMPED_NV = 37555,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 37842,
	GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 34941,
	GL_POINT_BIT = 2,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 37841,
	GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 35766,
	GL_MAX_CLIP_PLANES_IMG = 3378,
	GL_SLIM8U_SGIX = 33565,
	GL_UNSIGNED_BYTE = 5121,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 37582,
	GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 37840,
	GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 37833,
	GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 37832,
	GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 37831,
	GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 37830,
	GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 37829,
	GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 37143,
	GL_TRACE_MASK_MESA = 34645,
	GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 37828,
	GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 37827,
	GL_INTENSITY_EXT = 32841,
	GL_LUMINANCE_SIGNED_SGIX = 34275,
	GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 37826,
	GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 37825,
	GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 37824,
	GL_SAMPLE_COVERAGE_INVERT = 32939,
	GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 37821,
	GL_VERTEX_ARRAY_EXT = 32884,
	GL_SPRITE_AXIAL_SGIX = 33100,
	GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 37820,
	GL_CURRENT_RASTER_DISTANCE = 2825,
	GL_SWIZZLE_STRQ_DQ_ATI = 35195,
	GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 37818,
	GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 36284,
	GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 37817,
	GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 37816,
	GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 37815,
	GL_IMAGE_2D_ARRAY_EXT = 36947,
	GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 37814,
	GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 37813,
	GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 37812,
	GL_COMPRESSED_RG = 33318,
	GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 37811,
	GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 37810,
	GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 37809,
	GL_TEXTURE20 = 34004,
	GL_SECONDARY_COLOR_ARRAY_POINTER = 33885,
	GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976,
	GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 37707,
	GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 37795,
	GL_TEXTURE_USAGE_ANGLE = 37794,
	GL_PATCHES = 14,
	GL_LUMINANCE32I_EXT = 36230,
	GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 37792,
	GL_RENDERBUFFER_DEPTH_SIZE_OES = 36180,
	GL_PIXEL_GROUP_COLOR_SGIS = 33622,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 34074,
	GL_CONFORMANT_NV = 37748,
	GL_GREATER = 516,
	GL_SUPERSAMPLE_SCALE_Y_NV = 37747,
	GL_GEOMETRY_SHADER_BIT_OES = 4,
	GL_SUPERSAMPLE_SCALE_X_NV = 37746,
	GL_EVAL_VERTEX_ATTRIB14_NV = 34516,
	GL_SIGNED_RGB_NV = 34558,
	GL_UNIFORM_BUFFER_LENGTH_NV = 37744,
	GL_STANDARD_FONT_FORMAT_NV = 37740,
	GL_MAX_SAMPLES_ANGLE = 36183,
	GL_SRC_COLOR = 768,
	GL_UNSIGNED_INT64_NV = 5135,
	GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 33553,
	GL_FONT_GLYPHS_AVAILABLE_NV = 37736,
	GL_DRAW_BUFFER3_EXT = 34856,
	GL_NEGATIVE_ONE_TO_ONE = 37726,
	GL_REG_13_ATI = 35118,
	GL_MODELVIEW1_MATRIX_EXT = 34054,
	GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 37708,
	GL_TEXTURE_2D_ARRAY_EXT = 35866,
	GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 37705,
	GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 36260,
	GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 37704,
	GL_MAX_TEXTURE_UNITS_ARB = 34018,
	GL_MATRIX4_NV = 34356,
	GL_TEXTURE_BINDING_CUBE_MAP_OES = 34068,
	GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286,
	GL_CLIP_DISTANCE4 = 12292,
	GL_CONSERVATIVE_RASTERIZATION_NV = 37702,
	GL_4X_BIT_ATI = 2,
	GL_DRAW_BUFFER13_ATI = 34866,
	GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 36317,
	GL_VERTEX_ARRAY_ADDRESS_NV = 36641,
	GL_MAX_ARRAY_TEXTURE_LAYERS = 35071,
	GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 37701,
	GL_LUMINANCE16_ICC_SGIX = 33897,
	GL_COLOR_TABLE_WIDTH = 32985,
	GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 37700,
	GL_TEXTURE_MAX_LOD = 33083,
	GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 34899,
	GL_RENDERBUFFER_GREEN_SIZE_OES = 36177,
	GL_OPERAND1_ALPHA = 34201,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 36480,
	GL_STATIC_COPY_ARB = 35046,
	GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 37698,
	GL_BUFFER_MAP_POINTER_ARB = 35005,
	GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 37697,
	GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 37695,
	GL_MATRIX16_ARB = 35024,
	GL_SM_COUNT_NV = 37691,
	GL_WARP_SIZE_NV = 37689,
	GL_MAX_VERTEX_UNITS_ARB = 34468,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 34073,
	GL_COVERAGE_MODULATION_TABLE_NV = 37681,
	GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333,
	GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 37680,
	GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 33157,
	GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 37679,
	GL_STENCIL_SAMPLES_NV = 37678,
	GL_PATCH_VERTICES = 36466,
	GL_EFFECTIVE_RASTER_SAMPLES_EXT = 37676,
	GL_LAYER_PROVOKING_VERTEX_OES = 33374,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 37125,
	GL_RASTER_MULTISAMPLE_EXT = 37671,
	GL_IDENTITY_NV = 34346,
	GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930,
	GL_MAX_INTEGER_SAMPLES = 37136,
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660,
	GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982,
	GL_FOG_COORD_ARRAY = 33879,
	GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 37652,
	GL_FRAMEBUFFER_DEFAULT_SAMPLES = 37651,
	GL_MAX_VARYING_VECTORS = 36348,
	GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 37650,
	GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 37650,
	GL_FRAMEBUFFER_DEFAULT_WIDTH = 37648,
	GL_MAP1_TANGENT_EXT = 33860,
	GL_LOCATION_INDEX = 37647,
	GL_TOP_LEVEL_ARRAY_STRIDE = 37645,
	GL_BLEND_EQUATION_RGB_OES = 32777,
	GL_REFERENCED_BY_COMPUTE_SHADER = 37643,
	GL_SRGB8_ALPHA8_EXT = 35907,
	GL_REFERENCED_BY_FRAGMENT_SHADER = 37642,
	GL_CLEAR_BUFFER = 33460,
	GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 37641,
	GL_FRAMEBUFFER_UNDEFINED_OES = 33305,
	GL_COLOR_ATTACHMENT2 = 36066,
	GL_DUAL_INTENSITY8_SGIS = 33049,
	GL_DISCARD_NV = 34096,
	GL_PATH_FOG_GEN_MODE_NV = 37036,
	GL_REFERENCED_BY_GEOMETRY_SHADER = 37641,
	GL_DSDT_NV = 34549,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 37640,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 37640,
	GL_DEPTH_BOUNDS_TEST_EXT = 34960,
	GL_BALI_INSTRUMENT_TIME_UNIT_SGIX = 33868,
	GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847,
	GL_TEXTURE_DEPTH_SIZE = 34890,
	GL_TEXTURE_BINDING_1D_ARRAY = 35868,
	GL_VECTOR_EXT = 34751,
	GL_COMBINE_ALPHA_EXT = 34162,
	GL_ACTIVE_VARIABLES = 37637,
	GL_SAMPLER_CUBE_MAP_ARRAY = 36876,
	GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059,
	GL_BUFFER_BINDING = 37634,
	GL_ATOMIC_COUNTER_BUFFER_INDEX = 37633,
	GL_TEXTURE_COMPARE_SGIX = 33178,
	GL_IS_ROW_MAJOR = 37632,
	GL_MATRIX_PALETTE_OES = 34880,
	GL_PALETTE8_R5_G6_B5_OES = 35735,
	GL_ARRAY_STRIDE = 37630,
	GL_VIRTUAL_PAGE_SIZE_Y_AMD = 37270,
	GL_TYPE = 37626,
	GL_MINMAX_SINK_EXT = 32816,
	GL_RENDERBUFFER_OES = 36161,
	GL_MAD_ATI = 35176,
	GL_HALF_BIT_ATI = 8,
	GL_MAX_NAME_LENGTH = 37622,
	GL_SHADER_KHR = 33505,
	GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 36905,
	GL_TRANSFORM_FEEDBACK_VARYING = 37620,
	GL_COMPUTE_SUBROUTINE_UNIFORM = 37619,
	GL_FRAGMENT_SUBROUTINE_UNIFORM = 37618,
	GL_DEBUG_CALLBACK_FUNCTION = 33348,
	GL_LUMINANCE16 = 32834,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054,
	GL_GEOMETRY_SUBROUTINE_UNIFORM = 37617,
	GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 37616,
	GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 37615,
	GL_VERTEX_SUBROUTINE_UNIFORM = 37614,
	GL_COMPUTE_SUBROUTINE = 37613,
	GL_FRAGMENT_SUBROUTINE = 37612,
	GL_COMPLEX_UNSIGNED_BYTE_SGI = 33213,
	GL_MIRROR_CLAMP_TO_EDGE = 34627,
	GL_TESS_EVALUATION_SUBROUTINE = 37610,
	GL_SAMPLE_PATTERN_SGIS = 32940,
	GL_FONT_Y_MIN_BOUNDS_BIT_NV = 131072,
	GL_TESS_CONTROL_SUBROUTINE = 37609,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 36443,
	GL_IS_PER_PATCH_OES = 37607,
	GL_IS_PER_PATCH_EXT = 37607,
	GL_MODELVIEW2_ARB = 34594,
	GL_BUFFER_VARIABLE = 37605,
	GL_OUTPUT_TEXTURE_COORD20_EXT = 34737,
	GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074,
	GL_COMPUTE_SHADER_INVOCATIONS_ARB = 33525,
	GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948,
	GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 37597,
	GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 37596,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983,
	GL_READ_FRAMEBUFFER_BINDING_EXT = 36010,
	GL_COVERAGE_BUFFER_BIT_NV = 32768,
	GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 37592,
	GL_PROGRAM_SEPARABLE = 33368,
	GL_EVAL_VERTEX_ATTRIB0_NV = 34502,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 37589,
	GL_COLOR_BUFFER_BIT1_QCOM = 2,
	GL_PROGRAM_ERROR_STRING_ARB = 34932,
	GL_DRAW_INDIRECT_BUFFER_BINDING = 36675,
	GL_TESS_CONTROL_SHADER_BIT = 8,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 37588,
	GL_ARRAY_SIZE = 37627,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 37587,
	GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333,
	GL_FEEDBACK_BUFFER_SIZE = 3569,
	GL_SUBPIXEL_BITS = 3408,
	GL_MODELVIEW13_ARB = 34605,
	GL_QUERY_BUFFER_BINDING = 37267,
	GL_DEBUG_CATEGORY_APPLICATION_AMD = 37199,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 37583,
	GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020,
	GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 37583,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 37582,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 37582,
	GL_IMAGE_BINDING_FORMAT = 36974,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 37581,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 37581,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 37581,
	GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 37580,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 37579,
	GL_VERTEX_PRECLIP_SGIX = 33774,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 37576,
	GL_SOURCE0_RGB = 34176,
	GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 37574,
	GL_ELEMENT_ARRAY_TYPE_APPLE = 35341,
	GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 37572,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 37155,
	GL_GEOMETRY_OUTPUT_TYPE_ARB = 36316,
	GL_ALREADY_SIGNALED = 37146,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263,
	GL_PRIMITIVE_BOUNDING_BOX_EXT = 37566,
	GL_SLUMINANCE_ALPHA_EXT = 35908,
	GL_PLUS_CLAMPED_NV = 37553,
	GL_QUERY_OBJECT_EXT = 37203,
	GL_MODELVIEW30_ARB = 34622,
	GL_LINES_ADJACENCY_ARB = 10,
	GL_LINEAR_CLIPMAP_NEAREST_SGIX = 33871,
	GL_COMBINER_MAPPING_NV = 34115,
	GL_HSL_COLOR_KHR = 37551,
	GL_BLEND_ADVANCED_COHERENT_KHR = 37509,
	GL_ALREADY_SIGNALED_APPLE = 37146,
	GL_HSL_HUE_KHR = 37549,
	GL_RGBA12 = 32858,
	GL_HARDMIX_NV = 37545,
	GL_TEXTURE_SWIZZLE_RGBA = 36422,
	GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330,
	GL_FLOAT_MAT2x3 = 35685,
	GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827,
	GL_CONTEXT_ROBUST_ACCESS_KHR = 37107,
	GL_VARIANT_ARRAY_EXT = 34792,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 35919,
	GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291,
	GL_INVERT_RGB_NV = 37539,
	GL_TEXTURE_FILTER4_SIZE_SGIS = 33095,
	GL_CONTRAST_NV = 37537,
	GL_EXCLUSION_NV = 37536,
	GL_MINUS_NV = 37535,
	GL_VERTEX_BLEND_ARB = 34471,
	GL_INVALID_FRAMEBUFFER_OPERATION = 1286,
	GL_QUAD_LUMINANCE4_SGIS = 33056,
	GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991,
	GL_INTENSITY16_EXT = 32845,
	GL_HARDLIGHT_KHR = 37531,
	GL_DRAW_BUFFER13 = 34866,
	GL_COLORDODGE_NV = 37529,
	GL_COLORDODGE_KHR = 37529,
	GL_RESTART_SUN = 1,
	GL_DARKEN_NV = 37527,
	GL_DU8DV8_ATI = 34682,
	GL_PREVIOUS_EXT = 34168,
	GL_INTENSITY_EXTENDED_RANGE_SGIX = 34288,
	GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059,
	GL_TEXTURE31 = 34015,
	GL_OP_MULTIPLY_MATRIX_EXT = 34712,
	GL_INDEX_ARRAY_POINTER_EXT = 32913,
	GL_SCREEN_NV = 37525,
	GL_TEXTURE_BINDING_BUFFER = 35884,
	GL_ALPHA_TEST_REF = 3010,
	GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 36442,
	GL_MAX_VERTEX_STREAMS = 36465,
	GL_PIXEL_MODE_BIT = 32,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 37156,
	GL_PLUS_DARKER_NV = 37522,
	GL_PATH_SAMPLE_QUALITY_NV = 36997,
	GL_RGB10_A2UI = 36975,
	GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818,
	GL_PACK_RESAMPLE_OML = 35204,
	GL_TEXTURE25_ARB = 34009,
	GL_SRC_ATOP_NV = 37518,
	GL_BEVEL_NV = 37030,
	GL_SRC_OUT_NV = 37516,
	GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 36006,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 36482,
	GL_INT16_VEC3_NV = 36838,
	GL_DST_IN_NV = 37515,
	GL_DYNAMIC_ATI = 34657,
	GL_LUMINANCE8_ALPHA8 = 32837,
	GL_TEXTURE12 = 33996,
	GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895,
	GL_SRC_OVER_NV = 37512,
	GL_UNSIGNED_INT_24_8 = 34042,
	GL_DUP_LAST_CUBIC_CURVE_TO_NV = 244,
	GL_VERTEX_SHADER_EXT = 34688,
	GL_SRC_NV = 37510,
	GL_BLEND_ADVANCED_COHERENT_NV = 37509,
	GL_INT_SAMPLER_1D = 36297,
	GL_HSL_SATURATION_NV = 37550,
	GL_PACK_SKIP_PIXELS = 3332,
	GL_UNCORRELATED_NV = 37506,
	GL_ACCUM_RED_BITS = 3416,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051,
	GL_BLEND_OVERLAP_NV = 37505,
	GL_STORAGE_SHARED_APPLE = 34239,
	GL_MAX_ELEMENTS_VERTICES_EXT = 33000,
	GL_BLEND_PREMULTIPLIED_SRC_NV = 37504,
	GL_MODELVIEW31_ARB = 34623,
	GL_PACK_ALIGNMENT = 3333,
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922,
	GL_COLOR_FLOAT_APPLE = 35343,
	GL_COLOR_ATTACHMENT12 = 36076,
	GL_PATH_FILL_COVER_MODE_NV = 36994,
	GL_COMPRESSED_SRGB8_ETC2_OES = 37493,
	GL_FRAGMENT_TEXTURE = 33439,
	GL_COLOR_ATTACHMENT0_OES = 36064,
	GL_COMPRESSED_RGB8_ETC2_OES = 37492,
	GL_LINEAR_ATTENUATION = 4616,
	GL_EIGHTH_BIT_ATI = 32,
	GL_SRC0_ALPHA = 34184,
	GL_MAX_PROGRAM_MATRICES_ARB = 34351,
	GL_CLIP_DISTANCE0_APPLE = 12288,
	GL_IMAGE_CUBE_EXT = 36944,
	GL_COMPRESSED_RG11_EAC = 37490,
	GL_COMPRESSED_SIGNED_R11_EAC = 37489,
	GL_CONVEX_HULL_NV = 37003,
	GL_PROGRAM_PARAMETER_NV = 34372,
	GL_REFLECTION_MAP_ARB = 34066,
	GL_COMPRESSED_R11_EAC = 37488,
	GL_GCCSO_SHADER_BINARY_FJ = 37472,
	GL_DMP_PROGRAM_BINARY_DMP = 37459,
	GL_DONT_CARE = 4352,
	GL_SMAPHS_PROGRAM_BINARY_DMP = 37458,
	GL_CON_12_ATI = 35149,
	GL_BROWSER_DEFAULT_WEBGL = 37444,
	GL_SHADER_STORAGE_BUFFER_START = 37076,
	GL_UNPACK_FLIP_Y_WEBGL = 37440,
	GL_RG16I = 33337,
	GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 37311,
	GL_POLYGON_MODE = 2880,
	GL_MAX_COMPUTE_WORK_GROUP_SIZE = 37311,
	GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778,
	GL_ZERO_EXT = 34781,
	GL_DEPTH_TEST = 2929,
	GL_RGBA2_EXT = 32853,
	GL_CLIENT_VERTEX_ARRAY_BIT = 2,
	GL_MAX_COMPUTE_IMAGE_UNIFORMS = 37309,
	GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 37308,
	GL_COMPUTE_SHADER = 37305,
	GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 37289,
	GL_DST_ALPHA = 772,
	GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 37288,
	GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 37287,
	GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 36286,
	GL_VERTEX_ID_SWIZZLE_AMD = 37285,
	GL_IUI_V3F_EXT = 33198,
	GL_STREAM_RASTERIZATION_AMD = 37280,
	GL_COLOR_ATTACHMENT10_NV = 36074,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 34070,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 37279,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 36052,
	GL_TEXTURE_BUFFER_SIZE_OES = 37278,
	GL_MAX_SAMPLES = 36183,
	GL_TEXTURE_BUFFER_OFFSET_OES = 37277,
	GL_TEXTURE_BUFFER_OFFSET_EXT = 37277,
	GL_TEXTURE_BUFFER_OFFSET = 37277,
	GL_SYNC_STATUS_APPLE = 37140,
	GL_UNSIGNED_BYTE_3_3_2_EXT = 32818,
	GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 37160,
	GL_UNSIGNED_INT64_ARB = 5135,
	GL_MIN_LOD_WARNING_AMD = 37276,
	GL_MIN_SPARSE_LEVEL_AMD = 37275,
	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 37274,
	GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 37274,
	GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 37273,
	GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 37273,
	GL_SEPARABLE_2D_EXT = 32786,
	GL_VIRTUAL_PAGE_SIZE_Z_AMD = 37271,
	GL_VIRTUAL_PAGE_SIZE_Z_ARB = 37271,
	GL_TIMEOUT_EXPIRED = 37147,
	GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 37588,
	GL_VIRTUAL_PAGE_SIZE_Y_ARB = 37270,
	GL_VIRTUAL_PAGE_SIZE_X_AMD = 37269,
	GL_DEPTH_BUFFER_FLOAT_MODE_NV = 36271,
	GL_QUERY_RESULT_NO_WAIT = 37268,
	GL_QUERY_BUFFER_BINDING_AMD = 37267,
	GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 37585,
	GL_QUERY_BUFFER = 37266,
	GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 37216,
	GL_SAMPLER_OBJECT_AMD = 37205,
	GL_INTENSITY12 = 32844,
	GL_VERTEX_ARRAY_OBJECT_EXT = 37204,
	GL_DEBUG_SOURCE_API_ARB = 33350,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 35979,
	GL_MAX_SAMPLES_IMG = 37173,
	GL_QUERY_OBJECT_AMD = 37203,
	GL_USE_MISSING_GLYPH_NV = 37034,
	GL_PERFORMANCE_MONITOR_AMD = 37202,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 36874,
	GL_OPERAND0_RGB_ARB = 34192,
	GL_TEXTURE9 = 33993,
	GL_UNPACK_SKIP_PIXELS_EXT = 3316,
	GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335,
	GL_DEBUG_CATEGORY_OTHER_AMD = 37200,
	GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 37584,
	GL_ACTIVE_SUBROUTINES = 36325,
	GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 37197,
	GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 37194,
	GL_FLOAT_MAT3x2 = 35687,
	GL_DEBUG_CATEGORY_API_ERROR_AMD = 37193,
	GL_DEBUG_SEVERITY_LOW_KHR = 37192,
	GL_DEBUG_SEVERITY_LOW_AMD = 37192,
	GL_EVAL_VERTEX_ATTRIB13_NV = 34515,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 36447,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,
	GL_DEBUG_SEVERITY_MEDIUM_AMD = 37191,
	GL_STACK_UNDERFLOW_KHR = 1284,
	GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33140,
	GL_DEBUG_SEVERITY_HIGH_ARB = 37190,
	GL_TEXTURE_ENV_BIAS_SGIX = 32958,
	GL_DEBUG_SEVERITY_HIGH_AMD = 37190,
	GL_FLOAT16_VEC3_NV = 36858,
	GL_CURRENT_WEIGHT_ARB = 34472,
	GL_DEBUG_LOGGED_MESSAGES_KHR = 37189,
	GL_FONT_X_MIN_BOUNDS_BIT_NV = 65536,
	GL_DEBUG_LOGGED_MESSAGES_AMD = 37189,
	GL_DEBUG_LOGGED_MESSAGES = 37189,
	GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 37188,
	GL_MATRIX_INDEX_ARRAY_POINTER_OES = 34889,
	GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 128,
	GL_TEXTURE_GEN_R = 3170,
	GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 37188,
	GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 37187,
	GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 37187,
	GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 37176,
	GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 37175,
	GL_VERTEX_BINDING_BUFFER = 36687,
	GL_TEXTURE_1D_STACK_BINDING_MESAX = 34653,
	GL_EDGE_FLAG_ARRAY_POINTER = 32915,
	GL_VERTEX_ARRAY_OBJECT_AMD = 37204,
	GL_PACK_COMPRESSED_BLOCK_SIZE = 37166,
	GL_MAGNITUDE_BIAS_NV = 34584,
	GL_PACK_COMPRESSED_BLOCK_DEPTH = 37165,
	GL_UNSIGNED_INT_VEC3_EXT = 36295,
	GL_WRITE_DISCARD_NV = 35006,
	GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 37053,
	GL_CONTEXT_PROFILE_MASK = 37158,
	GL_MAX_FRAGMENT_INPUT_COMPONENTS = 37157,
	GL_COLOR_TABLE_BLUE_SIZE_SGI = 32988,
	GL_DOT2_ADD_ATI = 35180,
	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 37132,
	GL_FUNC_ADD = 32774,
	GL_MULTIPLY_KHR = 37524,
	GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 32801,
	GL_INT_IMAGE_1D_EXT = 36951,
	GL_ATOMIC_COUNTER_BUFFER_START = 37570,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS = 37155,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 35885,
	GL_FIXED = 5132,
	GL_BUFFER_ACCESS_FLAGS = 37151,
	GL_EXTENSIONS = 7939,
	GL_VERTEX_SHADER_INVARIANTS_EXT = 34769,
	GL_INDEX_MATERIAL_FACE_EXT = 33210,
	GL_TIMEOUT_EXPIRED_APPLE = 37147,
	GL_HSL_SATURATION_KHR = 37550,
	GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 37703,
	GL_UNSIGNALED_APPLE = 37144,
	GL_UNSIGNALED = 37144,
	GL_TEXTURE16_ARB = 34000,
	GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,
	GL_SYNC_FLAGS_APPLE = 37141,
	GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070,
	GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 16777216,
	GL_INT16_VEC4_NV = 36839,
	GL_TRANSFORM_FEEDBACK_RECORD_NV = 35974,
	GL_SYNC_CONDITION = 37139,
	GL_TEXTURE_ENV_COLOR = 8705,
	GL_OBJECT_TYPE_APPLE = 37138,
	GL_IMAGE_PIXEL_FORMAT = 33449,
	GL_OBJECT_TYPE = 37138,
	GL_SQUARE_NV = 37027,
	GL_OP_EXP_BASE_2_EXT = 34705,
	GL_INDEX_BIT_PGI = 524288,
	GL_MAX_SERVER_WAIT_TIMEOUT = 37137,
	GL_DEPTH_COMPONENT16_SGIX = 33189,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 36204,
	GL_MAX_FRAMEBUFFER_LAYERS_OES = 37655,
	GL_TEXTURE_ENV_MODE = 8704,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 36050,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37133,
	GL_BUFFER_MAPPED_ARB = 35004,
	GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 37132,
	GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 37156,
	GL_RG8 = 33323,
	GL_R = 8194,
	GL_VERTEX_SHADER_LOCALS_EXT = 34771,
	GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 34063,
	GL_STENCIL_INDEX8_OES = 36168,
	GL_SHADER = 33505,
	GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 33353,
	GL_CLIP_FAR_HINT_PGI = 107041,
	GL_FOG_DISTANCE_MODE_NV = 34138,
	GL_MAX_RASTER_SAMPLES_EXT = 37673,
	GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 32908,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE = 37124,
	GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 37122,
	GL_TEXTURE_MINIMIZE_STORAGE_APPLE = 34230,
	GL_ANY_SAMPLES_PASSED = 35887,
	GL_TEXTURE_2D_MULTISAMPLE = 37120,
	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972,
	GL_CURRENT_PROGRAM = 35725,
	GL_MAP1_TEXTURE_COORD_4_NURBS_SGIX = 33251,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 36264,
	GL_CONTEXT_ROBUST_ACCESS_EXT = 37107,
	GL_WAIT_FAILED = 37149,
	GL_STREAM_READ_ARB = 35041,
	GL_MULTIVIEW_EXT = 37105,
	GL_COLOR_ATTACHMENT_EXT = 37104,
	GL_DISPATCH_INDIRECT_BUFFER_BINDING = 37103,
	GL_DISPATCH_INDIRECT_BUFFER = 37102,
	GL_FLOAT_VEC2_ARB = 35664,
	GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 37099,
	GL_DEPTH_STENCIL_MESA = 34640,
	GL_COMPRESSED_INTENSITY = 34028,
	GL_FRAMEBUFFER_BINDING_ANGLE = 36006,
	GL_FRACTIONAL_ODD_OES = 36475,
	GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 37085,
	GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 37084,
	GL_RENDERBUFFER_EXT = 36161,
	GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902,
	GL_TEXTURE_CROP_RECT_OES = 35741,
	GL_MAP2_NORMAL = 3506,
	GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 37083,
	GL_TRANSFORM_FEEDBACK_BINDING_NV = 36389,
	GL_PER_STAGE_CONSTANTS_NV = 34101,
	GL_DRAW_BUFFER13_EXT = 34866,
	GL_DUAL_INTENSITY12_SGIS = 33050,
	GL_MODELVIEW0_EXT = 5888,
	GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 33795,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 37080,
	GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 37079,
	GL_SHADER_STORAGE_BUFFER_SIZE = 37077,
	GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443,
	GL_TEXTURE_2D = 3553,
	GL_CURRENT_RASTER_POSITION = 2823,
	GL_CLIP_DEPTH_MODE = 37725,
	GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 37072,
	GL_MAX_COMBINED_IMAGE_UNIFORMS = 37071,
	GL_MODELVIEW0_STACK_DEPTH_EXT = 2979,
	GL_CLIP_DISTANCE6 = 12294,
	GL_MAP_COLOR = 3344,
	GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 37070,
	GL_MAP_TESSELLATION_NV = 34498,
	GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 33379,
	GL_INTENSITY12_EXT = 32844,
	GL_TEXTURE24_ARB = 34008,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 37069,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 37068,
	GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 37068,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 37067,
	GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 37067,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 37065,
	GL_CONVOLUTION_WIDTH_EXT = 32792,
	GL_VIEW_CLASS_BPTC_FLOAT = 33491,
	GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 37064,
	GL_FLOAT = 5126,
	GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 37063,
	GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 35738,
	GL_COMPRESSED_SLUMINANCE = 35914,
	GL_FRAGMENT_SHADER_ARB = 35632,
	GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 37159,
	GL_HISTOGRAM_RED_SIZE_EXT = 32808,
	GL_SCALED_RESOLVE_NICEST_EXT = 37051,
	GL_SCALAR_EXT = 34750,
	GL_SCALED_RESOLVE_FASTEST_EXT = 37050,
	GL_PATH_FORMAT_SVG_NV = 36976,
	GL_FLAT = 7424,
	GL_PATH_STENCIL_REF_NV = 37048,
	GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 32812,
	GL_MOVE_TO_CONTINUES_NV = 37046,
	GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 36924,
	GL_PATH_DASH_OFFSET_RESET_NV = 37044,
	GL_PATH_GEN_MODE_NV = 37040,
	GL_FIRST_TO_REST_NV = 37039,
	GL_ACCUM_ADJACENT_PAIRS_NV = 37037,
	GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 36787,
	GL_SKIP_MISSING_GLYPH_NV = 37033,
	GL_MITER_TRUNCATE_NV = 37032,
	GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 35094,
	GL_DST_OUT_NV = 37517,
	GL_COORD_REPLACE_NV = 34914,
	GL_LAYOUT_LINEAR_INTEL = 1,
	GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 37137,
	GL_REG_9_ATI = 35114,
	GL_PATH_STROKE_BOUNDING_BOX_NV = 37026,
	GL_COMPRESSED_SRGB = 35912,
	GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398,
	GL_PATH_DASH_ARRAY_COUNT_NV = 37023,
	GL_PATH_COORD_COUNT_NV = 37022,
	GL_MAP1_VERTEX_ATTRIB12_4_NV = 34412,
	GL_MINMAX_SINK = 32816,
	GL_TEXTURE3 = 33987,
	GL_BLEND_EQUATION_RGB = 32777,
	GL_DRAW_BUFFER15_EXT = 34868,
	GL_TRANSPOSE_PROJECTIVE_3D_NV = 37017,
	GL_TRANSPOSE_AFFINE_3D_NV = 37016,
	GL_TRANSPOSE_PROJECTIVE_2D_NV = 37015,
	GL_TRANSPOSE_AFFINE_2D_NV = 37014,
	GL_PROJECTIVE_3D_NV = 37013,
	GL_AFFINE_3D_NV = 37012,
	GL_PROJECTIVE_2D_NV = 37011,
	GL_LAST_VERTEX_CONVENTION = 36430,
	GL_IMAGE_BINDING_LEVEL_EXT = 36667,
	GL_CLIP_PLANE5 = 12293,
	GL_PATH_INITIAL_END_CAP_NV = 36983,
	GL_TRANSLATE_3D_NV = 37009,
	GL_ALPHA_FLOAT32_ATI = 34838,
	GL_TRANSLATE_X_NV = 37006,
	GL_EDGE_FLAG_ARRAY_COUNT_EXT = 32909,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36479,
	GL_COUNT_UP_NV = 37000,
	GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 35971,
	GL_ALPHA8_OES = 32828,
	GL_UNSIGNED_IDENTITY_NV = 34102,
	GL_PATH_STROKE_BOUND_NV = 36998,
	GL_PATH_STROKE_COVER_MODE_NV = 36995,
	GL_PATH_FILL_MODE_NV = 36992,
	GL_TRANSFORM_HINT_APPLE = 34225,
	GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877,
	GL_PACK_IMAGE_HEIGHT_EXT = 32876,
	GL_PATH_DASH_OFFSET_NV = 36990,
	GL_VERTEX_ATTRIB_MAP2_APPLE = 35329,
	GL_PATH_DASH_CAPS_NV = 36987,
	GL_INT_IMAGE_CUBE_EXT = 36955,
	GL_TEXTURE_DEPTH_TYPE = 35862,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978,
	GL_UNSIGNED_SHORT_4_4_4_4 = 32819,
	GL_PATH_END_CAPS_NV = 36982,
	GL_PATH_STROKE_WIDTH_NV = 36981,
	GL_LUMINANCE_ALPHA16F_EXT = 34847,
	GL_DSDT_MAG_INTENSITY_NV = 34524,
	GL_PATH_FORMAT_PS_NV = 36977,
	GL_PATH_STENCIL_VALUE_MASK_NV = 37049,
	GL_IMAGE_BINDING_FORMAT_EXT = 36974,
	GL_STENCIL_EXT = 6146,
	GL_FRAMEBUFFER_BARRIER_BIT = 1024,
	GL_ACTIVE_UNIFORM_BLOCKS = 35382,
	GL_MAX_IMAGE_SAMPLES = 36973,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36972,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 36972,
	GL_PROXY_TEXTURE_1D = 32867,
	GL_IGLOO_IRISGL_MODE_SGIX = 33186,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 36971,
	GL_SIGNALED_APPLE = 37145,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36970,
	GL_NORMAL_ARRAY_LENGTH_NV = 36652,
	GL_QUERY_RESULT_EXT = 34918,
	GL_TEXTURE10_ARB = 33994,
	GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 36918,
	GL_OUTPUT_TEXTURE_COORD21_EXT = 34738,
	GL_TEXCOORD4_BIT_PGI = 2147483648,
	GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 36969,
	GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 36969,
	GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 36968,
	GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 36967,
	GL_UNSIGNED_INT_IMAGE_BUFFER = 36967,
	GL_ALPHA12_EXT = 32829,
	GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841,
	GL_UNSIGNED_INT_IMAGE_2D_RECT = 36965,
	GL_BLEND_SRC_ALPHA = 32971,
	GL_INDEX_CLEAR_VALUE = 3104,
	GL_UNSIGNED_INT_IMAGE_3D_EXT = 36964,
	GL_UNSIGNED_INT_IMAGE_2D_EXT = 36963,
	GL_RGBA8I = 36238,
	GL_DEPTH_EXT = 6145,
	GL_POINT = 6912,
	GL_UNSIGNED_INT_IMAGE_1D_EXT = 36962,
	GL_GREEN_INTEGER = 36245,
	GL_RGB_SCALE = 34163,
	GL_UNPACK_SWAP_BYTES = 3312,
	GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 37819,
	GL_NORMAL_ARRAY_TYPE_EXT = 32894,
	GL_RGBA_INTEGER = 36249,
	GL_CLAMP_TO_BORDER_EXT = 33069,
	GL_COMPRESSED_RG_RGTC2 = 36285,
	GL_COMBINE_EXT = 34160,
	GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 36959,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 35372,
	GL_INT_IMAGE_CUBE_MAP_ARRAY = 36959,
	GL_INT_IMAGE_2D_ARRAY = 36958,
	GL_DRAW_BUFFER1_NV = 34854,
	GL_INT_IMAGE_1D_ARRAY_EXT = 36957,
	GL_INT_IMAGE_1D_ARRAY = 36957,
	GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 34798,
	GL_TEXTURE5_ARB = 33989,
	GL_INT_IMAGE_BUFFER = 36956,
	GL_PATH_MITER_LIMIT_NV = 36986,
	GL_PROXY_COLOR_TABLE = 32979,
	GL_CONSTANT_EXT = 34166,
	GL_MATRIX10_NV = 34362,
	GL_HIGH_INT = 36341,
	GL_SRGB_WRITE = 33432,
	GL_INT_IMAGE_2D_RECT_EXT = 36954,
	GL_INT_IMAGE_2D_RECT = 36954,
	GL_TEXTURE_LEQUAL_R_SGIX = 33180,
	GL_UNSIGNED_NORMALIZED_EXT = 35863,
	GL_INT_IMAGE_3D_EXT = 36953,
	GL_INT_IMAGE_3D = 36953,
	GL_INTENSITY8 = 32843,
	GL_INT_IMAGE_2D_EXT = 36952,
	GL_COLOR_MATRIX_SGI = 32945,
	GL_INT_IMAGE_1D = 36951,
	GL_R16_SNORM_EXT = 36760,
	GL_FLOAT16_NV = 36856,
	GL_MOV_ATI = 35169,
	GL_READ_BUFFER = 3074,
	GL_IMAGE_2D_MULTISAMPLE_ARRAY = 36950,
	GL_LINE_SMOOTH = 2848,
	GL_IMAGE_2D_MULTISAMPLE = 36949,
	GL_IMAGE_CUBE_MAP_ARRAY_EXT = 36948,
	GL_IMAGE_CUBE_MAP_ARRAY = 36948,
	GL_IMAGE_1D_ARRAY = 36946,
	GL_TESS_EVALUATION_TEXTURE = 33437,
	GL_BLEND_SRC_RGB_EXT = 32969,
	GL_OUTPUT_TEXTURE_COORD9_EXT = 34726,
	GL_STENCIL_PASS_DEPTH_PASS = 2966,
	GL_LUMINANCE_ICC_SGIX = 33891,
	GL_DEPENDENT_GB_TEXTURE_2D_NV = 34538,
	GL_TRIANGLE_STRIP_ADJACENCY_ARB = 13,
	GL_IMAGE_BUFFER_EXT = 36945,
	GL_DRAW_BUFFER8_EXT = 34861,
	GL_QUERY_WAIT = 36371,
	GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 35956,
	GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047,
	GL_LINE_TO_NV = 4,
	GL_MAX_FOG_LAYERS_POINTS_SGIX = 33576,
	GL_BUFFER_SIZE = 34660,
	GL_CONVOLUTION_HEIGHT = 32793,
	GL_TEXTURE21_ARB = 34005,
	GL_MAP1_NORMAL = 3474,
	GL_MAX_DEBUG_GROUP_STACK_DEPTH = 33388,
	GL_SAMPLE_MASK = 36433,
	GL_IMAGE_2D_RECT_EXT = 36943,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 35885,
	GL_PRIMITIVES_GENERATED_OES = 35975,
	GL_MOVE_TO_NV = 2,
	GL_IMAGE_3D_EXT = 36942,
	GL_QUERY_NO_WAIT = 36372,
	GL_IMAGE_2D_EXT = 36941,
	GL_IMAGE_2D = 36941,
	GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975,
	GL_IMAGE_1D_EXT = 36940,
	GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 36939,
	GL_HALF_FLOAT_ARB = 5131,
	GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 36938,
	GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884,
	GL_INDEX_TEST_EXT = 33205,
	GL_COVERAGE_COMPONENT_NV = 36560,
	GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387,
	GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 36936,
	GL_TEXTURE_HEIGHT_QCOM = 35795,
	GL_EDGEFLAG_BIT_PGI = 262144,
	GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368,
	GL_TEXTURE_COVERAGE_SAMPLES_NV = 36933,
	GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 36923,
	GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349,
	GL_Z4Y12Z4CB12Z4CR12_444_NV = 36919,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 36490,
	GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 36917,
	GL_PIXEL_SUBSAMPLE_2424_SGIX = 34211,
	GL_NORMAL_ARRAY_EXT = 32885,
	GL_YCBAYCR8A_4224_NV = 36914,
	GL_YCBYCR8_422_NV = 36913,
	GL_ALPHA_MIN_SGIX = 33568,
	GL_WEIGHT_ARRAY_ARB = 34477,
	GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 36909,
	GL_ARRAY_BUFFER_BINDING = 34964,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 34071,
	GL_VIDEO_COLOR_CONVERSION_MAX_NV = 36906,
	GL_RED_MIN_CLAMP_INGR = 34144,
	GL_SRGB = 35904,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 36493,
	GL_COLOR_ATTACHMENT2_EXT = 36066,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 36383,
	GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 36900,
	GL_FIELD_LOWER_NV = 36899,
	GL_FIELD_UPPER_NV = 36898,
	GL_VIDEO_BUFFER_NV = 36896,
	GL_FACTOR_MAX_AMD = 36893,
	GL_LUMINANCE16_ALPHA16_SNORM = 36890,
	GL_POLYGON_STIPPLE = 2882,
	GL_ALPHA16_SNORM = 36888,
	GL_LUMINANCE8 = 32832,
	GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318,
	GL_FLOAT_MAT2 = 35674,
	GL_HISTOGRAM_RED_SIZE = 32808,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,
	GL_LUMINANCE8_ALPHA8_SNORM = 36886,
	GL_ALPHA8_SNORM = 36884,
	GL_NOTEQUAL = 517,
	GL_INT_SAMPLER_1D_ARRAY_EXT = 36302,
	GL_LUMINANCE_SNORM = 36881,
	GL_ALPHA_SNORM = 36880,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36879,
	GL_DRAW_BUFFER1_EXT = 34854,
	GL_STENCIL_FUNC = 2962,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 36878,
	GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 36878,
	GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 36877,
	GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 36876,
	GL_FRAMEBUFFER_SRGB = 36281,
	GL_MAT_SHININESS_BIT_PGI = 33554432,
	GL_TEXTURE18 = 34002,
	GL_SAMPLE_MASK_VALUE_EXT = 32938,
	GL_NUM_ACTIVE_VARIABLES = 37636,
	GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 19,
	GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992,
	GL_CLAMP_TO_EDGE = 33071,
	GL_MAX_IMAGE_UNITS = 36664,
	GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332,
	GL_SLIM10U_SGIX = 33566,
	GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 35883,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 36874,
	GL_INTERLACE_SGIX = 32916,
	GL_TEXTURE_CUBE_MAP_ARRAY_OES = 36873,
	GL_VERTEX_PROGRAM_POINT_SIZE_NV = 34370,
	GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 36202,
	GL_T2F_C4UB_V3F = 10793,
	GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 36873,
	GL_COMPLEX_BYTE_SGI = 33214,
	GL_LINE_STRIP_ADJACENCY_EXT = 11,
	GL_TEXTURE_CUBE_MAP_ARRAY = 36873,
	GL_CONTINUOUS_AMD = 36871,
	GL_DISCRETE_AMD = 36870,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 36867,
	GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340,
	GL_DOUBLE_VEC4_EXT = 36862,
	GL_DOUBLE_VEC4 = 36862,
	GL_DOUBLE_VEC3_EXT = 36861,
	GL_MAX_SHADER_BUFFER_ADDRESS_NV = 36661,
	GL_DEBUG_SEVERITY_HIGH = 37190,
	GL_UNSIGNED_INT64_VEC4_NV = 36855,
	GL_UNSIGNED_INT64_VEC3_NV = 36854,
	GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 35883,
	GL_UNSIGNED_INT64_VEC2_NV = 36853,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 34925,
	GL_UNSIGNED_INT16_VEC4_NV = 36851,
	GL_UNSIGNED_INT16_VEC3_NV = 36850,
	GL_UNSIGNED_INT16_VEC2_NV = 36849,
	GL_DEBUG_TYPE_OTHER_KHR = 33361,
	GL_UNSIGNED_INT8_VEC3_NV = 36846,
	GL_UNSIGNED_INT8_NV = 36844,
	GL_TEXTURE20_ARB = 34004,
	GL_NORMAL_MAP_OES = 34065,
	GL_SAMPLER_BUFFER = 36290,
	GL_INT8_NV = 36832,
	GL_INT_SAMPLER_2D_RECT_EXT = 36301,
	GL_SHADER_BINARY_VIV = 36804,
	GL_PATH_ERROR_POSITION_NV = 37035,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 35070,
	GL_LIGHT5 = 16389,
	GL_TESS_CONTROL_SHADER_PATCHES_ARB = 33521,
	GL_SOURCE0_RGB_ARB = 34176,
	GL_OBJECT_COMPILE_STATUS_ARB = 35713,
	GL_ALWAYS = 519,
	GL_PERFMON_GLOBAL_MODE_QCOM = 36768,
	GL_INT_SAMPLER_3D = 36299,
	GL_PRIMITIVE_RESTART = 36765,
	GL_SIGNED_NORMALIZED = 36764,
	GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 34939,
	GL_RG16_SNORM_EXT = 36761,
	GL_RESAMPLE_REPLICATE_SGIX = 33843,
	GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36950,
	GL_R16_SNORM = 36760,
	GL_BUFFER_IMMUTABLE_STORAGE = 33311,
	GL_STENCIL_BUFFER_BIT = 1024,
	GL_ALPHA16I_EXT = 36234,
	GL_RG_SNORM = 36753,
	GL_RED_SNORM = 36752,
	GL_RED_INTEGER = 36244,
	GL_LESS = 513,
	GL_MAX_DRAW_BUFFERS_ATI = 34852,
	GL_ELEMENT_ARRAY_LENGTH_NV = 36659,
	GL_FETCH_PER_SAMPLE_ARM = 36709,
	GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 36708,
	GL_DOUBLE_MAT4x3_EXT = 36686,
	GL_DOUBLE_MAT4x2_EXT = 36685,
	GL_DOUBLE_MAT4x2 = 36685,
	GL_COLOR_BUFFER_BIT = 16384,
	GL_DOUBLE_MAT3x4_EXT = 36684,
	GL_DOUBLE_MAT3x4 = 36684,
	GL_LIGHT_MODEL_LOCAL_VIEWER = 2897,
	GL_DOUBLE_MAT3x2_EXT = 36683,
	GL_DOUBLE_MAT2x4_EXT = 36682,
	GL_MAX_DRAW_BUFFERS = 34852,
	GL_SYSTEM_FONT_NAME_NV = 36979,
	GL_DOUBLE_MAT2x3_EXT = 36681,
	GL_RGBA4 = 32854,
	GL_COMPRESSED_RED_RGTC1_EXT = 36283,
	GL_GENERATE_MIPMAP = 33169,
	GL_CULL_VERTEX_IBM = 103050,
	GL_FUNC_ADD_OES = 32774,
	GL_DOUBLE_MAT4_EXT = 36680,
	GL_DOUBLE_MAT4 = 36680,
	GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075,
	GL_DOUBLE_MAT3_EXT = 36679,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968,
	GL_DOUBLE_MAT3 = 36679,
	GL_DOUBLE_MAT2_EXT = 36678,
	GL_FRAMEBUFFER_BARRIER_BIT_EXT = 1024,
	GL_DISTANCE_ATTENUATION_EXT = 33065,
	GL_UNSIGNED_BYTE_2_3_3_REV = 33634,
	GL_GUILTY_CONTEXT_RESET_KHR = 33363,
	GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181,
	GL_DEPTH_COMPONENT24_SGIX = 33190,
	GL_DRAW_INDIRECT_LENGTH_NV = 36674,
	GL_DRAW_INDIRECT_ADDRESS_NV = 36673,
	GL_PRIMITIVE_RESTART_NV = 34136,
	GL_DRAW_BUFFER6_EXT = 34859,
	GL_STENCIL_BUFFER_BIT7_QCOM = 8388608,
	GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 2097152,
	GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 2,
	GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978,
	GL_IMAGE_BINDING_LAYER_EXT = 36669,
	GL_NUM_SHADING_LANGUAGE_VERSIONS = 33513,
	GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36959,
	GL_SORT_SGI = 33225,
	GL_COMPLEX_FLOAT_SGI = 33219,
	GL_IMAGE_BINDING_LEVEL = 36667,
	GL_LUMINANCE8UI_EXT = 36224,
	GL_COLOR_TABLE_SCALE = 32982,
	GL_DEPTH_STENCIL_EXT = 34041,
	GL_IMAGE_BINDING_NAME = 36666,
	GL_MAX_IMAGE_UNITS_EXT = 36664,
	GL_MAP_INVALIDATE_RANGE_BIT = 4,
	GL_COPY_WRITE_BUFFER = 36663,
	GL_ALPHA32F_ARB = 34838,
	GL_MODULATE_SIGNED_ADD_ATI = 34629,
	GL_OUTPUT_TEXTURE_COORD28_EXT = 34745,
	GL_TEXTURE16 = 34000,
	GL_STENCIL_BACK_VALUE_MASK = 36004,
	GL_COPY_READ_BUFFER = 36662,
	GL_DOUBLE_VEC3 = 36861,
	GL_SURFACE_SIZE_HINT_SUNX = 33234,
	GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 36711,
	GL_FRONT_RIGHT = 1025,
	GL_CURRENT_OCCLUSION_QUERY_ID_NV = 34917,
	GL_TEXTURE_BORDER_COLOR_EXT = 4100,
	GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 34959,
	GL_ACTIVE_VARYINGS_NV = 35969,
	GL_UNDEFINED_VERTEX_EXT = 33376,
	GL_COLOR_ARRAY_LENGTH_NV = 36653,
	GL_SAMPLER_2D_ARRAY_SHADOW = 36292,
	GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 36650,
	GL_DEBUG_SEVERITY_LOW = 37192,
	GL_SOURCE3_ALPHA_NV = 34187,
	GL_MAP1_VERTEX_4_NURBS_SGIX = 33228,
	GL_INTENSITY_FLOAT32_APPLE = 34839,
	GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 36647,
	GL_RGB8 = 32849,
	GL_MODELVIEW_PROJECTION_NV = 34345,
	GL_ASYNC_READ_PIXELS_SGIX = 33630,
	GL_INTENSITY16_ICC_SGIX = 33898,
	GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881,
	GL_RGBA8 = 32856,
	GL_COLOR_ARRAY_SIZE = 32897,
	GL_IGLOO_SWAPTMESH_SGIX = 33184,
	GL_CLIP_DISTANCE2 = 12290,
	GL_MAP1_VERTEX_3 = 3479,
	GL_COVERAGE_AUTOMATIC_NV = 36567,
	GL_SAMPLER_2D_ARB = 35678,
	GL_COVERAGE_ATTACHMENT_NV = 36562,
	GL_UNPACK_CONSTANT_DATA_SUNX = 33237,
	GL_CLAMP_READ_COLOR = 35100,
	GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847,
	GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372,
	GL_RENDERBUFFER_WIDTH = 36162,
	GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 34871,
	GL_BGRA8_EXT = 37793,
	GL_ISOLINES_EXT = 36474,
	GL_COMPRESSED_RGBA_BPTC_UNORM = 36492,
	GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 34886,
	GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 36490,
	GL_OBJECT_TYPE_ARB = 35662,
	GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 64,
	GL_FOG_COORD_ARRAY_POINTER = 33878,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 36489,
	GL_TESS_CONTROL_SHADER_OES = 36488,
	GL_CLIP_DISTANCE5_APPLE = 12293,
	GL_TESS_EVALUATION_SHADER_OES = 36487,
	GL_TESS_EVALUATION_SHADER_EXT = 36487,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 36486,
	GL_SOURCE3_RGB_NV = 34179,
	GL_FOG_START = 2915,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 36486,
	GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 36486,
	GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 36485,
	GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 34541,
	GL_PROJECTION_STACK_DEPTH = 2980,
	GL_PROXY_TEXTURE_4D_SGIS = 33077,
	GL_RASTERIZER_DISCARD = 35977,
	GL_PROGRAM_OBJECT_EXT = 35648,
	GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 36482,
	GL_OP_SET_GE_EXT = 34700,
	GL_UNKNOWN_CONTEXT_RESET_KHR = 33365,
	GL_WIDE_LINE_HINT_PGI = 107042,
	GL_CLIP_PLANE4_IMG = 12292,
	GL_PATH_OBJECT_BOUNDING_BOX_NV = 37002,
	GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 36479,
	GL_OPERAND0_RGB_EXT = 34192,
	GL_ATTRIB_ARRAY_TYPE_NV = 34341,
	GL_ABGR_EXT = 32768,
	GL_MAX_PATCH_VERTICES_EXT = 36477,
	GL_MAX_PATCH_VERTICES = 36477,
	GL_DEBUG_OUTPUT_KHR = 37600,
	GL_DEPTH_STENCIL_TEXTURE_MODE = 37098,
	GL_FRACTIONAL_ODD_EXT = 36475,
	GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927,
	GL_TEXTURE24 = 34008,
	GL_MAX_ELEMENTS_INDICES = 33001,
	GL_XOR = 5382,
	GL_FRACTIONAL_ODD = 36475,
	GL_EVAL_VERTEX_ATTRIB2_NV = 34504,
	GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 33640,
	GL_ISOLINES_OES = 36474,
	GL_TESS_GEN_POINT_MODE_OES = 36473,
	GL_RG16_EXT = 33324,
	GL_REG_3_ATI = 35108,
	GL_TESS_GEN_VERTEX_ORDER = 36472,
	GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 36258,
	GL_TESS_GEN_SPACING_EXT = 36471,
	GL_REG_8_ATI = 35113,
	GL_TESS_GEN_MODE_EXT = 36470,
	GL_HISTOGRAM_LUMINANCE_SIZE = 32812,
	GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970,
	GL_SRC0_RGB = 34176,
	GL_TEXTURE_LOD_BIAS = 34049,
	GL_GLOBAL_ALPHA_FACTOR_SUN = 33242,
	GL_FOG_MODE = 2917,
	GL_PATCH_DEFAULT_OUTER_LEVEL = 36468,
	GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 33122,
	GL_CLIP_DISTANCE0 = 12288,
	GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 36467,
	GL_NUM_SAMPLE_COUNTS = 37760,
	GL_PATCH_VERTICES_OES = 36466,
	GL_MATRIX13_ARB = 35021,
	GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 35410,
	GL_BACK_PRIMARY_COLOR_NV = 35959,
	GL_DEPTH_SAMPLES_NV = 37677,
	GL_DRAW_BUFFER14_ARB = 34867,
	GL_FRAMEZOOM_FACTOR_SGIX = 33164,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36447,
	GL_ELEMENT_ARRAY_ADDRESS_NV = 36649,
	GL_MODELVIEW16_ARB = 34608,
	GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 36447,
	GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 36446,
	GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 36445,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 36444,
	GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 35880,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 36444,
	GL_POINT_SPRITE = 34913,
	GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 36444,
	GL_READ_BUFFER_EXT = 3074,
	GL_IMAGE_BINDING_LAYER = 36669,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 36443,
	GL_MAX_SAMPLE_MASK_WORDS_NV = 36441,
	GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464,
	GL_SAMPLER_RENDERBUFFER_NV = 36438,
	GL_INTERPOLATE_ARB = 34165,
	GL_TEXTURE_RENDERBUFFER_NV = 36437,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,
	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311,
	GL_INDEX_ARRAY_POINTER = 32913,
	GL_AVERAGE_HP = 33120,
	GL_SAMPLE_MASK_VALUE = 36434,
	GL_EDGE_FLAG_ARRAY_POINTER_EXT = 32915,
	GL_SAMPLE_LOCATION_NV = 36432,
	GL_VERTEX_BINDING_DIVISOR = 33494,
	GL_LINE_STRIP_ADJACENCY = 11,
	GL_VARIANT_VALUE_EXT = 34788,
	GL_COLOR_ATTACHMENT0_NV = 36064,
	GL_SAMPLE_POSITION_NV = 36432,
	GL_SAMPLE_POSITION = 36432,
	GL_TEXTURE_GREEN_TYPE_ARB = 35857,
	GL_PIXEL_TEXTURE_SGIS = 33619,
	GL_TEXTURE_LUMINANCE_TYPE = 35860,
	GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 36056,
	GL_LAST_VERTEX_CONVENTION_OES = 36430,
	GL_UNSIGNED_SHORT_8_8_REV_MESA = 34235,
	GL_FIRST_VERTEX_CONVENTION_OES = 36429,
	GL_LUMINANCE12 = 32833,
	GL_FIRST_VERTEX_CONVENTION = 36429,
	GL_MATRIX_PALETTE_ARB = 34880,
	GL_BUMP_TEX_UNITS_ATI = 34680,
	GL_SOURCE2_ALPHA_EXT = 34186,
	GL_COMPATIBLE_SUBROUTINES = 36427,
	GL_SLUMINANCE_NV = 35910,
	GL_STENCIL_INDEX8_EXT = 36168,
	GL_INNOCENT_CONTEXT_RESET_KHR = 33364,
	GL_SRGB_READ = 33431,
	GL_FRONT = 1028,
	GL_OBJECT_POINT_SGIS = 33269,
	GL_TEXTURE_SWIZZLE_RGBA_EXT = 36422,
	GL_LIST_MODE = 2864,
	GL_ONE_MINUS_CONSTANT_ALPHA = 32772,
	GL_TEXTURE_SWIZZLE_A_EXT = 36421,
	GL_MATRIX2_NV = 34354,
	GL_MAP2_VERTEX_ATTRIB9_4_NV = 34425,
	GL_COMPLEX_SHORT_SGI = 33216,
	GL_DRAW_BUFFER9_ATI = 34862,
	GL_POINT_SIZE_MIN = 33062,
	GL_TEXTURE_SWIZZLE_B_EXT = 36420,
	GL_TEXTURE_SWIZZLE_B = 36420,
	GL_TEXTURE_SWIZZLE_G_EXT = 36419,
	GL_DEBUG_TYPE_OTHER_ARB = 33361,
	GL_SAMPLER_CUBE_SHADOW = 36293,
	GL_R11F_G11F_B10F_EXT = 35898,
	GL_EYE_PLANE_ABSOLUTE_NV = 34140,
	GL_TEXTURE_3D_BINDING_OES = 32874,
	GL_TEXTURE_SWIZZLE_R = 36418,
	GL_BIAS_BIT_ATI = 8,
	GL_LUMINANCE_ALPHA32UI_EXT = 36213,
	GL_FONT_UNDERLINE_POSITION_BIT_NV = 67108864,
	GL_VIDEO_BUFFER_PITCH_NV = 36904,
	GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 35767,
	GL_PROGRAM_FORMAT_ARB = 34934,
	GL_DEPTH_COMPONENT16_NONLINEAR_NV = 36396,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264,
	GL_PRESENT_DURATION_NV = 36395,
	GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 34925,
	GL_NUM_FILL_STREAMS_NV = 36393,
	GL_COMBINE_ALPHA = 34162,
	GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083,
	GL_CONVOLUTION_1D_EXT = 32784,
	GL_MATRIX25_ARB = 35033,
	GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 37082,
	GL_MAX_NAME_STACK_DEPTH = 3383,
	GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 36388,
	GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 36387,
	GL_TRANSFORM_FEEDBACK_NV = 36386,
	GL_COLOR_SAMPLES_NV = 36384,
	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 33313,
	GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 36383,
	GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 36382,
	GL_MAX_RED_SGIS = 34215,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052,
	GL_EDGE_FLAG_ARRAY_STRIDE = 32908,
	GL_POLYGON_OFFSET_CLAMP_EXT = 36379,
	GL_MAX_MIPMAP_ANISOTROPY_SGIX = 33583,
	GL_BYTE = 5120,
	GL_MATRIX12_ARB = 35020,
	GL_QUERY_NO_WAIT_INVERTED = 36376,
	GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 34381,
	GL_VERTEX_ARRAY_POINTER_EXT = 32910,
	GL_LINEAR = 9729,
	GL_QUERY_BY_REGION_NO_WAIT = 36374,
	GL_CLIP_PLANE0_IMG = 12288,
	GL_QUERY_BY_REGION_WAIT = 36373,
	GL_OP_POWER_EXT = 34707,
	GL_IMAGE_3D = 36942,
	GL_MAX_FRAMEBUFFER_HEIGHT = 37654,
	GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 36922,
	GL_COLOR_ATTACHMENT6_EXT = 36070,
	GL_SAMPLE_COVERAGE_VALUE_ARB = 32938,
	GL_SHADER_BINARY_FORMATS = 36344,
	GL_UNSIGNED_INT_10_10_10_2_OES = 36342,
	GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 34757,
	GL_SHADE_MODEL = 2900,
	GL_REPLICATE_BORDER = 33107,
	GL_RECIP_ADD_SIGNED_ALPHA_IMG = 35845,
	GL_BLEND_DST_ALPHA = 32970,
	GL_FORMAT_SUBSAMPLE_244_244_OML = 35203,
	GL_CONSTANT_NV = 34166,
	GL_LIGHT_MODEL_TWO_SIDE = 2898,
	GL_NAMED_STRING_LENGTH_ARB = 36329,
	GL_MAX_SUBROUTINES = 36327,
	GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 32799,
	GL_COLOR_ARRAY_SIZE_EXT = 32897,
	GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 37198,
	GL_COLOR_LOGIC_OP = 3058,
	GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 37101,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 36321,
	GL_SAMPLER_1D_ARB = 35677,
	GL_VERTEX_STREAM2_ATI = 34670,
	GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 36489,
	GL_RGBA_ICC_SGIX = 33889,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 36319,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 36319,
	GL_INTERNALFORMAT_STENCIL_SIZE = 33398,
	GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 36319,
	GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 36318,
	GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317,
	GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 33801,
	GL_4_BYTES_NV = 5129,
	GL_ATOMIC_COUNTER_BUFFER_BINDING = 37569,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057,
	GL_FRAMEBUFFER_BINDING = 36006,
	GL_GEOMETRY_INPUT_TYPE_ARB = 36315,
	GL_TEXTURE_MAX_LEVEL = 33085,
	GL_TESS_EVALUATION_PROGRAM_NV = 35103,
	GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 1,
	GL_GEOMETRY_VERTICES_OUT_EXT = 36314,
	GL_COLOR_ATTACHMENT7_EXT = 36071,
	GL_GEOMETRY_SHADER_EXT = 36313,
	GL_PREVIOUS = 34168,
	GL_PROXY_TEXTURE_2D_ARRAY = 35867,
	GL_UNSIGNED_INT_SAMPLER_BUFFER = 36312,
	GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 36436,
	GL_TEXTURE_WRAP_R_EXT = 32882,
	GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 36311,
	GL_UNKNOWN_CONTEXT_RESET_EXT = 33365,
	GL_422_REV_EXT = 32973,
	GL_DEPTH_COMPONENT32_SGIX = 33191,
	GL_Z_EXT = 34775,
	GL_FLOAT_VEC2 = 35664,
	GL_UNSIGNED_INT_SAMPLER_CUBE = 36308,
	GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 8,
	GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307,
	GL_UNSIGNED_INT_SAMPLER_3D = 36307,
	GL_SLUMINANCE_ALPHA = 35908,
	GL_RG32F_EXT = 33328,
	GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306,
	GL_INT_SAMPLER_BUFFER_OES = 36304,
	GL_INT_SAMPLER_2D_ARRAY_EXT = 36303,
	GL_INT_SAMPLER_2D_ARRAY = 36303,
	GL_LUMINANCE_ALPHA_SNORM = 36882,
	GL_SECONDARY_COLOR_ARRAY_SIZE = 33882,
	GL_INT_SAMPLER_2D_RECT = 36301,
	GL_4PASS_1_SGIS = 32933,
	GL_RGB10_A2_EXT = 32857,
	GL_INT_SAMPLER_CUBE = 36300,
	GL_INT_SAMPLER_3D_EXT = 36299,
	GL_CLAMP_TO_BORDER_OES = 33069,
	GL_PRIMITIVE_RESTART_INDEX = 36766,
	GL_INT_SAMPLER_2D_EXT = 36298,
	GL_UNSIGNED_INT_VEC4_EXT = 36296,
	GL_UNSIGNED_INT_VEC4 = 36296,
	GL_PACK_COMPRESSED_BLOCK_WIDTH = 37163,
	GL_UNSIGNED_INT_VEC2_EXT = 36294,
	GL_UNSIGNED_INT_VEC2 = 36294,
	GL_PALETTE8_RGBA4_OES = 35736,
	GL_SAMPLER_2D_ARRAY_SHADOW_NV = 36292,
	GL_FRAMEBUFFER_RENDERABLE_LAYERED = 33418,
	GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292,
	GL_LINEARBURN_NV = 37541,
	GL_SAMPLER_BUFFER_OES = 36290,
	GL_SAMPLER_BUFFER_EXT = 36290,
	GL_INT16_NV = 36836,
	GL_SAMPLER_2D_ARRAY = 36289,
	GL_SAMPLER_1D_ARRAY_EXT = 36288,
	GL_SAMPLER_1D_ARRAY = 36288,
	GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 36971,
	GL_TEXTURE_SPARSE_ARB = 37286,
	GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 36285,
	GL_SAMPLE_COVERAGE_ARB = 32928,
	GL_BALI_GEOM_TIMER_INSTRUMENT_SGIX = 33866,
	GL_COMPRESSED_RED_RGTC1 = 36283,
	GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323,
	GL_EDGE_FLAG_ARRAY_EXT = 32889,
	GL_CONVOLUTION_FILTER_SCALE_EXT = 32788,
	GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 36876,
	GL_DEPTH_COMPONENT32F_NV = 36267,
	GL_LAYER_NV = 36266,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265,
	GL_QUAD_MESH_SUN = 34324,
	GL_RG_INTEGER = 33320,
	GL_MODULATE_SUBTRACT_ATI = 34630,
	GL_COMPUTE_PROGRAM_NV = 37115,
	GL_BUFFER_ACCESS_ARB = 35003,
	GL_SEPARATE_ATTRIBS = 35981,
	GL_MAP2_TEXTURE_COORD_4_NURBS_SGIX = 33260,
	GL_EVAL_2D_NV = 34496,
	GL_1PASS_EXT = 32929,
	GL_CUBE_MAP_ZN_SGIX = 33603,
	GL_SHORT = 5122,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 36263,
	GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 36263,
	GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 36262,
	GL_LINEAR_DETAIL_ALPHA_SGIS = 32920,
	GL_VERTEX_ARRAY = 32884,
	GL_OUTPUT_TEXTURE_COORD31_EXT = 34748,
	GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 36256,
	GL_COMBINER1_NV = 34129,
	GL_RGBA_INTEGER_MODE_EXT = 36254,
	GL_LUMINANCE_INTEGER_EXT = 36252,
	GL_HISTOGRAM_EXT = 32804,
	GL_RENDERBUFFER_BINDING_ANGLE = 36007,
	GL_OUTPUT_TEXTURE_COORD27_EXT = 34744,
	GL_MODELVIEW25_ARB = 34617,
	GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 36960,
	GL_ALPHA_INTEGER_EXT = 36247,
	GL_ALPHA_INTEGER = 36247,
	GL_BLUE_INTEGER_EXT = 36246,
	GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 33590,
	GL_BLUE_INTEGER = 36246,
	GL_GREEN_INTEGER_EXT = 36245,
	GL_MAX_EXT = 32776,
	GL_UNSIGNED_INT_IMAGE_1D = 36962,
	GL_RED_INTEGER_EXT = 36244,
	GL_LUMINANCE8I_EXT = 36242,
	GL_INTENSITY8I_EXT = 36241,
	GL_CON_27_ATI = 35164,
	GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965,
	GL_LUMINANCE_ALPHA16I_EXT = 36237,
	GL_DOT3_RGBA = 34479,
	GL_NURBS_KNOT_COUNT_SGIX = 33261,
	GL_LUMINANCE16I_EXT = 36236,
	GL_INTENSITY16I_EXT = 36235,
	GL_STATIC_READ = 35045,
	GL_RGBA8_SNORM = 36759,
	GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 33781,
	GL_RGB16I_EXT = 36233,
	GL_ARRAY_BUFFER_BINDING_ARB = 34964,
	GL_TEXTURE_LOD_BIAS_S_SGIX = 33166,
	GL_RGBA16I_EXT = 36232,
	GL_RGBA16I = 36232,
	GL_MAX_TEXTURE_IMAGE_UNITS_NV = 34930,
	GL_SPOT_EXPONENT = 4613,
	GL_LUMINANCE_ALPHA32I_EXT = 36231,
	GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 32918,
	GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 36493,
	GL_RGBA8_OES = 32856,
	GL_INTENSITY32I_EXT = 36229,
	GL_ALPHA32I_EXT = 36228,
	GL_FOG_OFFSET_SGIX = 33176,
	GL_PASS_THROUGH_TOKEN = 1792,
	GL_UNPACK_SKIP_ROWS = 3315,
	GL_RGB32I_EXT = 36227,
	GL_RGBA32I_EXT = 36226,
	GL_LUMINANCE_ALPHA8UI_EXT = 36225,
	GL_IMAGE_BINDING_NAME_EXT = 36666,
	GL_UNIFORM_BUFFER = 35345,
	GL_ALPHA8UI_EXT = 36222,
	GL_RGBA8UI_EXT = 36220,
	GL_MAX_SPOT_EXPONENT_NV = 34053,
	GL_RGBA8UI = 36220,
	GL_AUX1 = 1034,
	GL_LUMINANCE_ALPHA16UI_EXT = 36219,
	GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719,
	GL_LUMINANCE16UI_EXT = 36218,
	GL_INTENSITY16UI_EXT = 36217,
	GL_ALPHA16UI_EXT = 36216,
	GL_DEBUG_SOURCE_OTHER = 33355,
	GL_RGB16UI_EXT = 36215,
	GL_DISJOINT_NV = 37507,
	GL_NO_RESET_NOTIFICATION_EXT = 33377,
	GL_RGB32UI = 36209,
	GL_UNSIGNED_INT_24_8_MESA = 34641,
	GL_RGBA32UI_EXT = 36208,
	GL_POINT_TOKEN = 1793,
	GL_LIGHT7 = 16391,
	GL_RGBA32UI = 36208,
	GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302,
	GL_R16F_EXT = 33325,
	GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 36873,
	GL_PRIMITIVE_RESTART_FIXED_INDEX = 36201,
	GL_TEXTURE_BINDING_EXTERNAL_OES = 36199,
	GL_INVALID_FRAMEBUFFER_OPERATION_OES = 1286,
	GL_SET_AMD = 34634,
	GL_REPLACE_VALUE_AMD = 34635,
	GL_TEXTURE_EXTERNAL_OES = 36197,
	GL_HALF_FLOAT_OES = 36193,
	GL_MAP1_VERTEX_ATTRIB5_4_NV = 34405,
	GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 33375,
	GL_4PASS_0_EXT = 32932,
	GL_MAX_FOG_FUNC_POINTS_SGIS = 33068,
	GL_PARAMETER_BUFFER_BINDING_ARB = 33007,
	GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027,
	GL_MATRIX4_ARB = 35012,
	GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 35215,
	GL_MAX_SAMPLES_APPLE = 36183,
	GL_TEXTURE_BUFFER_SIZE_EXT = 37278,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182,
	GL_TEXTURE_STACK_DEPTH = 2981,
	GL_DRAW_BUFFER8_ARB = 34861,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182,
	GL_RGBA_SIGNED_COMPONENTS_EXT = 35900,
	GL_STENCIL_BACK_FAIL = 34817,
	GL_MATRIX8_ARB = 35016,
	GL_RENDERBUFFER_STENCIL_SIZE = 36181,
	GL_CURRENT_INDEX = 2817,
	GL_MAX_PROGRAM_IF_DEPTH_NV = 35062,
	GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951,
	GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084,
	GL_RENDERBUFFER_DEPTH_SIZE = 36180,
	GL_RENDERBUFFER_ALPHA_SIZE_OES = 36179,
	GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179,
	GL_RENDERBUFFER_ALPHA_SIZE = 36179,
	GL_RENDERBUFFER_BLUE_SIZE_OES = 36178,
	GL_FEEDBACK_BUFFER_POINTER = 3568,
	GL_LUMINANCE_FLOAT16_ATI = 34846,
	GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177,
	GL_DRAW_BUFFER15_ARB = 34868,
	GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340,
	GL_MAP2_VERTEX_ATTRIB8_4_NV = 34424,
	GL_RENDERBUFFER_RED_SIZE_EXT = 36176,
	GL_INT_SAMPLER_2D_MULTISAMPLE = 37129,
	GL_REG_0_ATI = 35105,
	GL_EYE_LINEAR_NV = 9216,
	GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 36425,
	GL_STENCIL_INDEX4_OES = 36167,
	GL_STENCIL_INDEX4_EXT = 36167,
	GL_STENCIL_INDEX4 = 36167,
	GL_STENCIL_INDEX1_OES = 36166,
	GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164,
	GL_RENDERBUFFER_HEIGHT_EXT = 36163,
	GL_FLOAT_MAT3x4 = 35688,
	GL_RENDERBUFFER_WIDTH_EXT = 36162,
	GL_RENDERBUFFER = 36161,
	GL_PROGRAM_ERROR_STRING_NV = 34932,
	GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 37640,
	GL_LINK_STATUS = 35714,
	GL_FRAMEBUFFER_EXT = 36160,
	GL_STENCIL_ATTACHMENT_OES = 36128,
	GL_DEBUG_TYPE_POP_GROUP_KHR = 33386,
	GL_BLEND = 3042,
	GL_STENCIL_ATTACHMENT_EXT = 36128,
	GL_DEPTH_ATTACHMENT_EXT = 36096,
	GL_COLOR_ATTACHMENT15_EXT = 36079,
	GL_POST_CONVOLUTION_GREEN_BIAS = 32801,
	GL_COLOR_ATTACHMENT14_EXT = 36078,
	GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 35972,
	GL_COLOR_ATTACHMENT14 = 36078,
	GL_COLOR_ATTACHMENT13_EXT = 36077,
	GL_COLOR_ATTACHMENT12_EXT = 36076,
	GL_COLOR_ATTACHMENT11_NV = 36075,
	GL_COLOR_ATTACHMENT11_EXT = 36075,
	GL_BLEND_SRC = 3041,
	GL_COLOR_ATTACHMENT11 = 36075,
	GL_RGB4_S3TC = 33697,
	GL_COLOR_ATTACHMENT10_EXT = 36074,
	GL_COLOR_ATTACHMENT10 = 36074,
	GL_COLOR_ATTACHMENT9_EXT = 36073,
	GL_DIFFERENCE_KHR = 37534,
	GL_COLOR_ATTACHMENT8_NV = 36072,
	GL_COLOR_ATTACHMENT8_EXT = 36072,
	GL_COLOR_ATTACHMENT7_NV = 36071,
	GL_BLUE_BIT_ATI = 4,
	GL_CONVOLUTION_FILTER_SCALE = 32788,
	GL_GEOMETRY_VERTICES_OUT_ARB = 36314,
	GL_GREEN = 6404,
	GL_MAX_VERTEX_UNIFORM_VECTORS = 36347,
	GL_RENDERBUFFER_COLOR_SAMPLES_NV = 36368,
	GL_COLOR_ATTACHMENT5_EXT = 36069,
	GL_4PASS_0_SGIS = 32932,
	GL_UNSIGNED_INT_8_24_REV_MESA = 34642,
	GL_COLOR_ATTACHMENT4_EXT = 36068,
	GL_COLOR_ATTACHMENT3_NV = 36067,
	GL_COLOR_ATTACHMENT3_EXT = 36067,
	GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 36399,
	GL_EVAL_VERTEX_ATTRIB7_NV = 34509,
	GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779,
	GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 37641,
	GL_PRESERVE_ATI = 34658,
	GL_DRAW_BUFFER5_ATI = 34858,
	GL_COLOR_ATTACHMENT1_EXT = 36065,
	GL_COLOR_ATTACHMENT1 = 36065,
	GL_COLOR_TABLE_WIDTH_SGI = 32985,
	GL_FLOAT_R32_NV = 34949,
	GL_COMPRESSED_SRGB8_ETC2 = 37493,
	GL_MAX_COLOR_ATTACHMENTS_NV = 36063,
	GL_MAX_COLOR_ATTACHMENTS_EXT = 36063,
	GL_TEXTURE_2D_BINDING_EXT = 32873,
	GL_STENCIL_BITS = 3415,
	GL_FRAMEBUFFER_UNSUPPORTED_OES = 36061,
	GL_RGBA16F_ARB = 34842,
	GL_FOG_END = 2916,
	GL_FRAGMENT_PROGRAM_ARB = 34820,
	GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 35978,
	GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466,
	GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061,
	GL_MAX_GENERAL_COMBINERS_NV = 34125,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 36060,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060,
	GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060,
	GL_OVERLAY_KHR = 37526,
	GL_PATCH_VERTICES_EXT = 36466,
	GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 35344,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 36057,
	GL_GEOMETRY_INPUT_TYPE_EXT = 36315,
	GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 36055,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967,
	GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055,
	GL_TEXTURE_BUFFER_BINDING_OES = 35882,
	GL_TEXTURE18_ARB = 34002,
	GL_PROXY_HISTOGRAM = 32805,
	GL_FLOAT_RGBA_MODE_NV = 34958,
	GL_VERTEX_ARRAY_SIZE_EXT = 32890,
	GL_REFERENCED_BY_TESS_CONTROL_SHADER = 37639,
	GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821,
	GL_QUERY_RESULT_AVAILABLE = 34919,
	GL_SHADING_LANGUAGE_VERSION = 35724,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 36048,
	GL_POINT_SIZE_MAX = 33063,
	GL_FRAGMENT_LIGHT3_SGIX = 33807,
	GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050,
	GL_PATH_TERMINAL_END_CAP_NV = 36984,
	GL_SAMPLE_BUFFERS_3DFX = 34483,
	GL_WRITE_ONLY_ARB = 35001,
	GL_DSDT_MAG_NV = 34550,
	GL_SMOOTH_LINE_WIDTH_RANGE = 2850,
	GL_OUTPUT_TEXTURE_COORD26_EXT = 34743,
	GL_FLOAT_RGBA16_NV = 34954,
	GL_OUTPUT_TEXTURE_COORD6_EXT = 34723,
	GL_SAMPLER_2D_RECT_SHADOW = 35684,
	GL_BUFFER_DATA_SIZE = 37635,
	GL_POINT_SIZE_MAX_SGIS = 33063,
	GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052,
	GL_SIGNED_NEGATE_NV = 34109,
	GL_DRAW_BUFFER3_ATI = 34856,
	GL_READ_PIXEL_DATA_RANGE_NV = 34937,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,
	GL_INTENSITY16 = 32845,
	GL_OUT_OF_MEMORY = 1285,
	GL_TEXTURE_BINDING_BUFFER_EXT = 35884,
	GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772,
	GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 35094,
	GL_PACK_SUBSAMPLE_RATE_SGIX = 34208,
	GL_SLUMINANCE = 35910,
	GL_IMAGE_CLASS_1_X_32 = 33467,
	GL_DRAW_BUFFER3_NV = 34856,
	GL_SRGB8_NV = 35905,
	GL_IUI_N3F_V2F_EXT = 33199,
	GL_TEXTURE_COMPARE_FUNC_EXT = 34893,
	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 36875,
	GL_DEPTH_BUFFER_BIT3_QCOM = 2048,
	GL_4PASS_2_SGIS = 32934,
	GL_TEXTURE_INDEX_SIZE_EXT = 33005,
	GL_CLIP_PLANE1 = 12289,
	GL_UTF8_NV = 37018,
	GL_FOG_BIT = 128,
	GL_TRIANGLES = 4,
	GL_FILL_RECTANGLE_NV = 37692,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 34924,
	GL_REG_19_ATI = 35124,
	GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 35955,
	GL_MATRIX5_NV = 34357,
	GL_VIEW_CLASS_48_BITS = 33479,
	GL_R8 = 33321,
	GL_MAX_FFT_WIDTH_SGI = 33224,
	GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312,
	GL_INTENSITY_FLOAT16_ATI = 34845,
	GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 33358,
	GL_LUMINANCE8_ALPHA8_EXT = 32837,
	GL_BACK_SECONDARY_COLOR_NV = 35960,
	GL_TEXTURE_BORDER_COLOR_NV = 4100,
	GL_DUAL_LUMINANCE_ALPHA4_SGIS = 33052,
	GL_CLIENT_ACTIVE_TEXTURE = 34017,
	GL_TEXTURE_1D_STACK_MESAX = 34649,
	GL_VERTEX_ARRAY_RANGE_NV = 34077,
	GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717,
	GL_MEDIUM_FLOAT = 36337,
	GL_SHADOW_ATTENUATION_EXT = 33614,
	GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 37578,
	GL_DRAW_BUFFER1_ATI = 34854,
	GL_CON_17_ATI = 35154,
	GL_TEXTURE15_ARB = 33999,
	GL_READ_BUFFER_NV = 3074,
	GL_DYNAMIC_READ = 35049,
	GL_FOG_COORDINATE = 33873,
	GL_NORMALIZED_RANGE_EXT = 34784,
	GL_HALF_APPLE = 5131,
	GL_DRAW_BUFFER7_ATI = 34860,
	GL_RED_BIT_ATI = 1,
	GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 36398,
	GL_VERTEX_PROGRAM_CALLBACK_MESA = 35765,
	GL_HISTOGRAM_SINK = 32813,
	GL_CONVOLUTION_BORDER_COLOR_HP = 33108,
	GL_HINT_BIT = 32768,
	GL_CLIP_DISTANCE2_APPLE = 12290,
	GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770,
	GL_COMPARE_R_TO_TEXTURE_ARB = 34894,
	GL_REG_20_ATI = 35125,
	GL_CON_16_ATI = 35153,
	GL_MATRIX_STRIDE = 37631,
	GL_CONVOLUTION_FORMAT = 32791,
	GL_PALETTE8_RGBA8_OES = 35734,
	GL_422_REV_AVERAGE_EXT = 32975,
	GL_CON_28_ATI = 35165,
	GL_QUERY_COUNTER_BITS_EXT = 34916,
	GL_RGB16_SIGNED_SGIX = 34278,
	GL_YCBCR_422_APPLE = 34233,
	GL_RGB32F_EXT = 34837,
	GL_TEXTURE_APPLICATION_MODE_EXT = 33615,
	GL_TEXTURE_MIN_LOD_SGIS = 33082,
	GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 33532,
	GL_CUBE_MAP_XP_SGIX = 33605,
	GL_COMBINE_RGB_ARB = 34161,
	GL_TESS_CONTROL_SHADER_BIT_EXT = 8,
	GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 134217728,
	GL_BLEND_COLOR_EXT = 32773,
	GL_4PASS_3_EXT = 32935,
	GL_DRAW_BUFFER4 = 34857,
	GL_OBJECT_VALIDATE_STATUS_ARB = 35715,
	GL_SAMPLE_ALPHA_TO_MASK_EXT = 32926,
	GL_2PASS_1_EXT = 32931,
	GL_TEXTURE_MIN_LOD = 33082,
	GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 34019,
	GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980,
	GL_R1UI_V3F_SUN = 34244,
	GL_POINTS = 0,
	GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 32,
	GL_FLOAT_MAT4x2_NV = 35689,
	GL_RENDERBUFFER_WIDTH_OES = 36162,
	GL_CURRENT_VERTEX_ATTRIB_ARB = 34342,
	GL_VIVIDLIGHT_NV = 37542,
	GL_BLEND_SRC_ALPHA_EXT = 32971,
	GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959,
	GL_OUTPUT_TEXTURE_COORD23_EXT = 34740,
	GL_TEXTURE_FILTER_CONTROL_EXT = 34048,
	GL_COLOR_TABLE_SCALE_SGI = 32982,
	GL_SAMPLER_CUBE_ARB = 35680,
	GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 33524,
	GL_POLYGON_SMOOTH_HINT = 3155,
	GL_ATTRIB_ARRAY_SIZE_NV = 34339,
	GL_MATRIX26_ARB = 35034,
	GL_TEXTURE_VIEW_NUM_LEVELS_OES = 33500,
	GL_FLOAT_MAT3_ARB = 35675,
	GL_RGBA16UI = 36214,
	GL_BOOL_VEC3_ARB = 35672,
	GL_INT = 5124,
	GL_TRIANGLE_MESH_SUN = 34325,
	GL_BOOL_VEC2 = 35671,
	GL_DEPTH24_STENCIL8 = 35056,
	GL_RGBA16F_EXT = 34842,
	GL_V2F = 10784,
	GL_MAX_SAMPLES_EXT = 36183,
	GL_INT_VEC2_ARB = 35667,
	GL_BALI_NUM_PRIMS_CLIPPED_INSTRUMENT_SGIX = 33767,
	GL_MAP2_VERTEX_ATTRIB4_4_NV = 34420,
	GL_4PASS_1_EXT = 32933,
	GL_R1UI_C4UB_V3F_SUN = 34245,
	GL_MODELVIEW23_ARB = 34615,
	GL_RENDERBUFFER_BLUE_SIZE = 36178,
	GL_SKIP_COMPONENTS2_NV = -5,
	GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965,
	GL_TEXTURE_SRGB_DECODE_EXT = 35400,
	GL_TEXTURE_3D_EXT = 32879,
	GL_FOG_COORD_ARRAY_LENGTH_NV = 36658,
	GL_MODELVIEW22_ARB = 34614,
	GL_PROGRAM_OBJECT_ARB = 35648,
	GL_CLAMP_TO_BORDER_NV = 33069,
	GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 35095,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 36321,
	GL_VARIANT_ARRAY_STRIDE_EXT = 34790,
	GL_FLOAT_RGB_NV = 34946,
	GL_PROXY_TEXTURE_2D_MULTISAMPLE = 37121,
	GL_YCRCB_422_SGIX = 33211,
	GL_PROGRAM_LENGTH_NV = 34343,
	GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397,
	GL_SAMPLER_3D_OES = 35679,
	GL_PATH_STROKE_OVERSAMPLE_COUNT_NV = 36999,
	GL_LARGE_SUNX = 33235,
	GL_POLYGON_BIT = 8,
	GL_SHADER_COMPILER = 36346,
	GL_CUBE_MAP_YN_SGIX = 33606,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 37589,
	GL_CLEAR = 5376,
	GL_RGBA16 = 32859,
	GL_MATRIX_MODE = 2976,
	GL_VENDOR = 7936,
	GL_OUTPUT_TEXTURE_COORD4_EXT = 34721,
	GL_QUERY_BY_REGION_NO_WAIT_NV = 36374,
	GL_HALF_BIAS_NORMAL_NV = 34106,
	GL_READ_FRAMEBUFFER_BINDING_NV = 36010,
	GL_PROGRAM_TARGET_NV = 34374,
	GL_FRAMEBUFFER_INCOMPLETE_FORMATS = 36058,
	GL_UNIFORM_BUFFER_BINDING = 35368,
	GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078,
	GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994,
	GL_AUX_DEPTH_STENCIL_APPLE = 35348,
	GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 35966,
	GL_MAP_FLUSH_EXPLICIT_BIT = 16,
	GL_VARIABLE_F_NV = 34088,
	GL_UNIFORM_BLOCK = 37602,
	GL_EXP2 = 2049,
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 37495,
	GL_LAYERED_SGIX = 33573,
	GL_ELEMENT_ARRAY_POINTER_APPLE = 35342,
	GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 34033,
	GL_SAMPLES_PASSED_ARB = 35092,
	GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 32905,
	GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997,
	GL_BUFFER_OBJECT_EXT = 37201,
	GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334,
	GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 37587,
	GL_ZOOM_Y = 3351,
	GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 34520,
	GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 36875,
	GL_BLEND_SRC_ALPHA_OES = 32971,
	GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331,
	GL_MAX_CONVOLUTION_HEIGHT = 32795,
	GL_PATH_TERMINAL_DASH_CAP_NV = 36989,
	GL_TEXTURE_COMPARE_MODE_ARB = 34892,
	GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 33367,
	GL_3D_COLOR_TEXTURE = 1539,
	GL_SIGNED_LUMINANCE_NV = 34561,
	GL_POINT_SIZE_ARRAY_TYPE_OES = 35210,
	GL_HISTOGRAM_ALPHA_SIZE = 32811,
	GL_UNPACK_RESAMPLE_OML = 35205,
	GL_VERTEX_SOURCE_ATI = 34676,
	GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 34938,
	GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081,
	GL_DRAW_BUFFER9_EXT = 34862,
	GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 1073741824,
	GL_DEPTH_STENCIL = 34041,
	GL_RGB_SCALE_EXT = 34163,
	GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 36261,
	GL_MAGNITUDE_SCALE_NV = 34578,
	GL_SWIZZLE_STR_DR_ATI = 35192,
	GL_PROGRAM_ATTRIB_COMPONENTS_NV = 35078,
	GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 35739,
	GL_PIXEL_TRANSFORM_SGI = 33223,
	GL_DRAW_BUFFER11_ATI = 34864,
	GL_SELECTION_BUFFER_SIZE = 3572,
	GL_DEPTH_BUFFER_BIT7_QCOM = 32768,
	GL_NUM_FRAGMENT_CONSTANTS_ATI = 35183,
	GL_DRAW_BUFFER11_ARB = 34864,
	GL_CON_19_ATI = 35156,
	GL_DEBUG_GROUP_STACK_DEPTH_KHR = 33389,
	GL_DSDT_MAG_VIB_NV = 34551,
	GL_MIN = 32775,
	GL_RELATIVE_CONIC_CURVE_TO_NV = 27,
	GL_SWIZZLE_STRQ_ATI = 35194,
	GL_RG8I = 33335,
	GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 33086,
	GL_TEXTURE_2D_ARRAY = 35866,
	GL_MATRIX28_ARB = 35036,
	GL_CON_31_ATI = 35168,
	GL_PALETTE4_RGB5_A1_OES = 35732,
	GL_NEGATIVE_ONE_EXT = 34783,
	GL_DEBUG_TYPE_MARKER_KHR = 33384,
	GL_PIXEL_TILE_GRID_DEPTH_SGIX = 33092,
	GL_ALPHA8I_EXT = 36240,
	GL_CON_26_ATI = 35163,
	GL_PIXEL_MAP_R_TO_R = 3190,
	GL_COPY_PIXEL_TOKEN = 1798,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 35973,
	GL_MAX_BLUE_SGIS = 34219,
	GL_FILL = 6914,
	GL_NEAREST = 9728,
	GL_QUAD_STRIP = 8,
	GL_DST_NV = 37511,
	GL_HARDLIGHT_NV = 37531,
	GL_CON_22_ATI = 35159,
	GL_CON_21_ATI = 35158,
	GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719,
	GL_MIN_SAMPLE_SHADING_VALUE = 35895,
	GL_RGB_RAW_422_APPLE = 35409,
	GL_SIGNED_RGB8_NV = 34559,
	GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721,
	GL_NAME_STACK_DEPTH = 3440,
	GL_CONIC_CURVE_TO_NV = 26,
	GL_STENCIL = 6146,
	GL_PERFMON_RESULT_SIZE_AMD = 35781,
	GL_SAMPLER_2D_RECT_ARB = 35683,
	GL_CON_13_ATI = 35150,
	GL_SMAPHS30_PROGRAM_BINARY_DMP = 37457,
	GL_RGB_FLOAT32_ATI = 34837,
	GL_RGB32F = 34837,
	GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 35742,
	GL_INDEX = 33314,
	GL_CON_20_ATI = 35157,
	GL_CON_10_ATI = 35147,
	GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 37589,
	GL_DUAL_ALPHA4_SGIS = 33040,
	GL_STATIC_READ_ARB = 35045,
	GL_TEXT_FRAGMENT_SHADER_ATI = 33280,
	GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310,
	GL_EXPAND_NORMAL_NV = 34104,
	GL_REG_30_ATI = 35135,
	GL_CND_ATI = 35178,
	GL_REG_29_ATI = 35134,
	GL_REG_28_ATI = 35133,
	GL_REG_26_ATI = 35131,
	GL_REG_25_ATI = 35130,
	GL_HISTOGRAM = 32804,
	GL_SWIZZLE_STQ_ATI = 35191,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049,
	GL_SYNC_FLUSH_COMMANDS_BIT = 1,
	GL_REG_23_ATI = 35128,
	GL_OPERAND3_RGB_NV = 34195,
	GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996,
	GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 33530,
	GL_REG_21_ATI = 35126,
	GL_REG_18_ATI = 35123,
	GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 33346,
	GL_REG_17_ATI = 35122,
	GL_DRAW_PIXEL_TOKEN = 1797,
	GL_SIGNED_RGBA_NV = 34555,
	GL_REG_14_ATI = 35119,
	GL_SHADER_STORAGE_BUFFER = 37074,
	GL_TRIANGLE_STRIP_ADJACENCY_OES = 13,
	GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841,
	GL_REG_11_ATI = 35116,
	GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 512,
	GL_REPLICATE_BORDER_HP = 33107,
	GL_LUMINANCE_ALPHA32F_EXT = 34841,
	GL_SAMPLER_1D_SHADOW_ARB = 35681,
	GL_TEXTURE_BASE_LEVEL = 33084,
	GL_INDEX_OFFSET = 3347,
	GL_VERTEX_ATTRIB_ARRAY7_NV = 34391,
	GL_MATRIX14_ARB = 35022,
	GL_PROGRAM_PIPELINE_BINDING_EXT = 33370,
	GL_SRC2_RGB = 34178,
	GL_TEXTURE22 = 34006,
	GL_MAP1_TEXTURE_COORD_3_NURBS_SGIX = 33250,
	GL_STENCIL_BUFFER_BIT5_QCOM = 2097152,
	GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829,
	GL_MAX_LABEL_LENGTH_KHR = 33512,
	GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 33783,
	GL_MAP1_VERTEX_ATTRIB0_4_NV = 34400,
	GL_DEPTH_BUFFER_BIT5_QCOM = 8192,
	GL_SIGNED_HILO16_NV = 34554,
	GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 35983,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 35968,
	GL_SKIP_DECODE_EXT = 35402,
	GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 36657,
	GL_ZOOM_X = 3350,
	GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 35076,
	GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076,
	GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 35070,
	GL_QUAD_INTENSITY8_SGIS = 33059,
	GL_RGB10 = 32850,
	GL_TESS_GEN_SPACING = 36471,
	GL_SYNC_FLAGS = 37141,
	GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 35069,
	GL_GREEN_BIT_ATI = 2,
	GL_ONE_EXT = 34782,
	GL_POST_TEXTURE_FILTER_BIAS_SGIX = 33145,
	GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841,
	GL_INVARIANT_VALUE_EXT = 34794,
	GL_INVALID_VALUE = 1281,
	GL_LUMINANCE_EXTENDED_RANGE_SGIX = 34287,
	GL_SRC1_COLOR = 35065,
	GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064,
	GL_MAX_MULTIVIEW_BUFFERS_EXT = 37106,
	GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061,
	GL_STORAGE_CLIENT_APPLE = 34228,
	GL_CON_8_ATI = 35145,
	GL_TEXTURE_ALPHA_TYPE_ARB = 35859,
	GL_PIXEL_PACK_BUFFER_EXT = 35051,
	GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350,
	GL_UNPACK_ROW_BYTES_APPLE = 35350,
	GL_OPERAND2_ALPHA = 34202,
	GL_UNSIGNED_INT_S8_S8_8_8_NV = 34522,
	GL_SINGLE_COLOR = 33273,
	GL_PATH_COMPUTED_LENGTH_NV = 37024,
	GL_DEPTH24_STENCIL8_EXT = 35056,
	GL_PACK_INVERT_MESA = 34648,
	GL_FILTER = 33434,
	GL_PIXEL_UNPACK_BUFFER_BINDING = 35055,
	GL_BUFFER_USAGE_ARB = 34661,
	GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193,
	GL_COVERAGE_EDGE_FRAGMENTS_NV = 36566,
	GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 33636,
	GL_VERTEX_ATTRIB_ARRAY_LONG = 34638,
	GL_INTENSITY16F_ARB = 34845,
	GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 34758,
	GL_NORMAL_ARRAY_TYPE = 32894,
	GL_TEXTURE_INTENSITY_TYPE_ARB = 35861,
	GL_DOT3_RGB_ARB = 34478,
	GL_MAX_PROGRAM_ATTRIBS_ARB = 34989,
	GL_BGR_INTEGER_EXT = 36250,
	GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341,
	GL_DYNAMIC_DRAW = 35048,
	GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 34545,
	GL_UNIFORM_ARRAY_STRIDE = 35388,
	GL_MAP1_TEXTURE_COORD_4 = 3478,
	GL_RGB12 = 32851,
	GL_SOURCE0_ALPHA_ARB = 34184,
	GL_UNPACK_SKIP_IMAGES = 32877,
	GL_OPERAND2_ALPHA_EXT = 34202,
	GL_2PASS_0_SGIS = 32930,
	GL_MATRIX31_ARB = 35039,
	GL_ACCUM_CLEAR_VALUE = 2944,
	GL_RESCALE_NORMAL_EXT = 32826,
	GL_MATRIX30_ARB = 35038,
	GL_MATRIX29_ARB = 35037,
	GL_CONSTANT = 34166,
	GL_MATRIX27_ARB = 35035,
	GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 2048,
	GL_ALPHA16_ICC_SGIX = 33896,
	GL_OUTPUT_TEXTURE_COORD17_EXT = 34734,
	GL_FRAME_NV = 36390,
	GL_RGB8_EXT = 32849,
	GL_LINEAR_MIPMAP_NEAREST = 9985,
	GL_MATRIX22_ARB = 35030,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050,
	GL_MATRIX18_ARB = 35026,
	GL_MATRIX17_ARB = 35025,
	GL_VIEW_CLASS_S3TC_DXT3_RGBA = 33486,
	GL_MATRIX15_ARB = 35023,
	GL_CURRENT_VERTEX_WEIGHT_EXT = 34059,
	GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 33144,
	GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 36378,
	GL_MIN_EXT = 32775,
	GL_GEOMETRY_SHADER_BIT_EXT = 4,
	GL_READ_ONLY = 35000,
	GL_MATRIX7_ARB = 35015,
	GL_BLUE_MAX_CLAMP_INGR = 34150,
	GL_DEBUG_CALLBACK_USER_PARAM = 33349,
	GL_TEXTURE_PRE_SPECULAR_HP = 33129,
	GL_PROXY_TEXTURE_2D_EXT = 32868,
	GL_DRAW_BUFFER6 = 34859,
	GL_MATRIX3_ARB = 35011,
	GL_SECONDARY_COLOR_ARRAY_EXT = 33886,
	GL_NICEST = 4354,
	GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 33557,
	GL_MATRIX2_ARB = 35010,
	GL_BOOL_VEC3 = 35672,
	GL_LINEAR_SHARPEN_ALPHA_SGIS = 32942,
	GL_FOG_COORDINATE_EXT = 33873,
	GL_TEXTURE_1D = 3552,
	GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13,
	GL_BUFFER_MAPPED = 35004,
	GL_VARIABLE_C_NV = 34085,
	GL_TEXTURE4 = 33988,
	GL_BALI_NUM_PRIMS_CLIP_RESULT_INSTRUMENT_SGIX = 33769,
	GL_IMAGE_MAG_FILTER_HP = 33116,
	GL_EVAL_VERTEX_ATTRIB4_NV = 34506,
	GL_MAP2_VERTEX_ATTRIB5_4_NV = 34421,
	GL_RENDERBUFFER_RED_SIZE_OES = 36176,
	GL_ALL_ATTRIB_BITS = 4294967295,
	GL_MODELVIEW15_ARB = 34607,
	GL_LAYOUT_DEFAULT_INTEL = 0,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 35917,
	GL_MINMAX_EXT = 32814,
	GL_MIRRORED_REPEAT_OES = 33648,
	GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 242,
	GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 36481,
	GL_MAX_DRAW_BUFFERS_ARB = 34852,
	GL_ALPHA_TEST_FUNC = 3009,
	GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 36937,
	GL_DOT_PRODUCT_TEXTURE_3D_NV = 34543,
	GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660,
	GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428,
	GL_CON_2_ATI = 35139,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 35967,
	GL_VERTEX_STREAM4_ATI = 34672,
	GL_ARRAY_BUFFER = 34962,
	GL_MAX_RENDERBUFFER_SIZE_OES = 34024,
	GL_SKIP_COMPONENTS4_NV = -3,
	GL_RGB8_OES = 32849,
	GL_POINT_SIZE_RANGE = 2834,
	GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978,
	GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 34888,
	GL_OBJECT_DISTANCE_TO_POINT_SGIS = 33265,
	GL_FRAMEBUFFER_COMPLETE_EXT = 36053,
	GL_TEXTURE3_ARB = 33987,
	GL_VERTEX_ARRAY_POINTER = 32910,
	GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 35953,
	GL_OP_MIN_EXT = 34699,
	GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973,
	GL_IMAGE_SCALE_Y_HP = 33110,
	GL_ONE_MINUS_SRC1_ALPHA = 35067,
	GL_MODULATE_COLOR_IMG = 35844,
	GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 36182,
	GL_TEXTURE_FETCH_BARRIER_BIT = 8,
	GL_DOT3_RGBA_EXT = 34625,
	GL_AUX3 = 1036,
	GL_R16_EXT = 33322,
	GL_INT_SAMPLER_RENDERBUFFER_NV = 36439,
	GL_SAMPLER_2D_SHADOW = 35682,
	GL_RASTERIZER_DISCARD_NV = 35977,
	GL_INDEX_MODE = 3120,
	GL_PATH_CLIENT_LENGTH_NV = 36991,
	GL_FOG_COORDINATE_ARRAY_EXT = 33879,
	GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967,
	GL_SIGNED_IDENTITY_NV = 34108,
	GL_MAX_TEXTURE_SIZE = 3379,
	GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 35918,
	GL_MODULATE_ADD_ATI = 34628,
	GL_FLOAT_CLEAR_COLOR_VALUE_NV = 34957,
	GL_DRAW_BUFFER5_EXT = 34858,
	GL_STREAM_DRAW_ARB = 35040,
	GL_MAP1_VERTEX_ATTRIB7_4_NV = 34407,
	GL_REG_4_ATI = 35109,
	GL_TEXTURE_DEPTH_SIZE_ARB = 34890,
	GL_MAP2_COLOR_4 = 3504,
	GL_FUNC_REVERSE_SUBTRACT_OES = 32779,
	GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860,
	GL_VERTEX_ARRAY_STRIDE_EXT = 32892,
	GL_COMPRESSED_SLUMINANCE_ALPHA = 35915,
	GL_HALF_BIAS_NEGATE_NV = 34107,
	GL_TEXTURE28_ARB = 34012,
	GL_QUADRATIC_CURVE_TO_NV = 10,
	GL_DT_SCALE_NV = 34577,
	GL_DS_SCALE_NV = 34576,
	GL_CUBE_MAP_YP_SGIX = 33607,
	GL_DRAW_BUFFER9_ARB = 34862,
	GL_VERTEX_PROGRAM_TWO_SIDE_NV = 34371,
	GL_OP_SUB_EXT = 34710,
	GL_MATRIX9_ARB = 35017,
	GL_FOG_COORD_ARRAY_STRIDE = 33877,
	GL_RGB16_SNORM_EXT = 36762,
	GL_TEXTURE_LOD_BIAS_T_SGIX = 33167,
	GL_DEBUG_TYPE_PERFORMANCE_KHR = 33360,
	GL_ALPHA_FLOAT16_ATI = 34844,
	GL_VIEW_CLASS_32_BITS = 33480,
	GL_TEXTURE_MATRIX = 2984,
	GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 34547,
	GL_RENDERBUFFER_STENCIL_SIZE_OES = 36181,
	GL_DEPTH_STENCIL_TO_BGRA_NV = 34927,
	GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 34098,
	GL_PRESENT_TIME_NV = 36394,
	GL_PIXEL_MAP_I_TO_B_SIZE = 3252,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378,
	GL_SELECTED_TEXTURE_COORD_SET_SGIS = 33729,
	GL_VERTEX_ATTRIB_ARRAY8_NV = 34392,
	GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922,
	GL_LUMINANCE_ALPHA_ICC_SGIX = 33893,
	GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298,
	GL_SOURCE2_RGB = 34178,
	GL_OUTPUT_TEXTURE_COORD11_EXT = 34728,
	GL_EVAL_BIT = 65536,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 35378,
	GL_PIXEL_COUNT_AVAILABLE_NV = 34919,
	GL_LO_BIAS_NV = 34581,
	GL_INT_IMAGE_2D = 36952,
	GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 35979,
	GL_SAMPLE_COVERAGE_VALUE = 32938,
	GL_RGB_SIGNED_SGIX = 34272,
	GL_CURRENT_QUERY = 34917,
	GL_QUERY_COUNTER_BITS = 34916,
	GL_PROJECTION = 5889,
	GL_VERTEX_BINDING_OFFSET = 33495,
	GL_TEXTURE6_ARB = 33990,
	GL_COLOR_TABLE_ALPHA_SIZE = 32989,
	GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055,
	GL_COLOR_INDEX12_EXT = 32998,
	GL_VERTICAL_LINE_TO_NV = 8,
	GL_TEXTURE9_ARB = 33993,
	GL_POINT_SPRITE_NV = 34913,
	GL_RGBA_FLOAT16_ATI = 34842,
	GL_STATE_RESTORE = 35804,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 36970,
	GL_SIGNED_HILO8_NV = 34911,
	GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 4,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973,
	GL_TEXTURE_PRIORITY_EXT = 32870,
	GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 36961,
	GL_SYNC_OBJECT_APPLE = 35411,
	GL_DRAW_BUFFER2 = 34855,
	GL_DEPENDENT_HILO_TEXTURE_2D_NV = 34904,
	GL_SYNC_GPU_COMMANDS_COMPLETE = 37143,
	GL_TEXTURE17_ARB = 34001,
	GL_INTENSITY4_EXT = 32842,
	GL_PERTURB_EXT = 34222,
	GL_TEXTURE_COLOR_TABLE_SGI = 32956,
	GL_OFFSET_HILO_TEXTURE_2D_NV = 34900,
	GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 34896,
	GL_DEBUG_TYPE_ERROR_ARB = 33356,
	GL_COMPARE_REF_TO_TEXTURE_EXT = 34894,
	GL_SET = 5391,
	GL_INVERSE_NV = 34347,
	GL_MODELVIEW10_ARB = 34602,
	GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894,
	GL_DEPTH_BUFFER_BIT0_QCOM = 256,
	GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885,
	GL_DEPTH_RENDERABLE = 33415,
	GL_IMAGE_CUBE = 36944,
	GL_COLOR_ATTACHMENT6 = 36070,
	GL_PROGRAM_PIPELINE_OBJECT_EXT = 35407,
	GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053,
	GL_BINORMAL_ARRAY_STRIDE_EXT = 33857,
	GL_NORMAL_ARRAY_COUNT_EXT = 32896,
	GL_VERSION_ES_CL_1_1 = 1,
	GL_SRGB_EXT = 35904,
	GL_MATRIX_INDEX_ARRAY_TYPE_OES = 34887,
	GL_BLEND_SRC_RGB_OES = 32969,
	GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823,
	GL_SUCCESS_NV = 36911,
	GL_PLUS_NV = 37521,
	GL_MAP1_INDEX_NURBS_SGIX = 33229,
	GL_INT64_VEC4_NV = 36843,
	GL_8X_BIT_ATI = 4,
	GL_UNIFORM_BLOCK_BINDING = 35391,
	GL_EVAL_VERTEX_ATTRIB3_NV = 34505,
	GL_POLYGON_OFFSET_BIAS_EXT = 32825,
	GL_COLOR_SUM = 33880,
	GL_FONT_UNITS_PER_EM_BIT_NV = 1048576,
	GL_DETAIL_TEXTURE_MODE_SGIS = 32923,
	GL_MAT_EMISSION_BIT_PGI = 8388608,
	GL_MAP2_VERTEX_ATTRIB0_4_NV = 34416,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 36495,
	GL_DSDT8_NV = 34569,
	GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 33499,
	GL_DRAW_BUFFER15_ATI = 34868,
	GL_DUAL_ALPHA12_SGIS = 33042,
	GL_NORMAL_ARRAY_STRIDE = 32895,
	GL_UNSIGNED_INT_5_9_9_9_REV = 35902,
	GL_DRAW_BUFFER14_EXT = 34867,
	GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077,
	GL_2PASS_0_EXT = 32930,
	GL_DEBUG_SOURCE_THIRD_PARTY = 33353,
	GL_CONVOLUTION_2D_EXT = 32785,
	GL_PALETTE4_RGBA4_OES = 35731,
	GL_RGBA_EXTENDED_RANGE_SGIX = 34285,
	GL_OUTPUT_COLOR0_EXT = 34715,
	GL_PACK_ROW_LENGTH = 3330,
	GL_HISTOGRAM_FORMAT = 32807,
	GL_OP_MADD_EXT = 34696,
	GL_DRAW_BUFFER13_NV = 34866,
	GL_DRAW_BUFFER13_ARB = 34866,
	GL_SYNC_STATUS = 37140,
	GL_PIXEL_MAP_A_TO_A = 3193,
	GL_FOG_FUNC_POINTS_SGIS = 33067,
	GL_ONE_MINUS_CONSTANT_COLOR = 32770,
	GL_R3_G3_B2 = 10768,
	GL_WEIGHT_ARRAY_TYPE_OES = 34473,
	GL_DRAW_BUFFER11_NV = 34864,
	GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337,
	GL_2_BYTES_NV = 5127,
	GL_PATH_MODELVIEW_STACK_DEPTH_NV = 2979,
	GL_CURRENT_COLOR = 2816,
	GL_DRAW_BUFFER10_NV = 34863,
	GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 33139,
	GL_DRAW_BUFFER10_ATI = 34863,
	GL_TEXTURE_GREEN_SIZE = 32861,
	GL_MAX_UNIFORM_BLOCK_SIZE = 35376,
	GL_TEXTURE_BLUE_SIZE = 32862,
	GL_FONT_X_MAX_BOUNDS_BIT_NV = 262144,
	GL_MAP2_VERTEX_4 = 3512,
	GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 32904,
	GL_COMPRESSED_TEXTURE_FORMATS = 34467,
	GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 128,
	GL_IGLOO_FULLSCREEN_SGIX = 33182,
	GL_TRACE_ARRAYS_BIT_MESA = 4,
	GL_INVERT = 5386,
	GL_TEXTURE_COMPARE_FUNC_ARB = 34893,
	GL_IMAGE_BUFFER = 36945,
	GL_V3F = 10785,
	GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180,
	GL_TEXTURE_BINDING_BUFFER_OES = 35884,
	GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 35414,
	GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,
	GL_TEXTURE0_SGIS = 33735,
	GL_UNSIGNED_INT_24_8_EXT = 34042,
	GL_DRAW_BUFFER6_ATI = 34859,
	GL_TANGENT_ARRAY_TYPE_EXT = 33854,
	GL_FOG_COORDINATE_ARRAY_TYPE = 33876,
	GL_COLOR_ATTACHMENT1_NV = 36065,
	GL_DRAW_BUFFER5_ARB = 34858,
	GL_TRIANGULAR_NV = 37029,
	GL_SYNC_CL_EVENT_COMPLETE_ARB = 33345,
	GL_CLAMP_FRAGMENT_COLOR_ARB = 35099,
	GL_DRAW_BUFFER4_NV = 34857,
	GL_DRAW_BUFFER4_ATI = 34857,
	GL_SURFACE_MAPPED_NV = 34560,
	GL_MAP1_COLOR_4 = 3472,
	GL_DRAW_BUFFER4_ARB = 34857,
	GL_PIXEL_MAP_I_TO_R = 3186,
	GL_COMBINER_AB_OUTPUT_NV = 34122,
	GL_POLYGON_OFFSET_FILL = 32823,
	GL_MULTISAMPLE_BIT_ARB = 536870912,
	GL_LIGHT1 = 16385,
	GL_SAMPLER_2D = 35678,
	GL_STREAM_COPY = 35042,
	GL_ASYNC_DRAW_PIXELS_SGIX = 33629,
	GL_MAP1_VERTEX_ATTRIB11_4_NV = 34411,
	GL_INT_VEC4 = 35669,
	GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722,
	GL_BUFFER_MAPPED_OES = 35004,
	GL_DRAW_BUFFER14_NV = 34867,
	GL_TEXTURE_CUBE_MAP_ARB = 34067,
	GL_STREAM_COPY_ARB = 35042,
	GL_MODELVIEW0_ARB = 5888,
	GL_DISTANCE_ATTENUATION_SGIS = 33065,
	GL_DRAW_BUFFER2_ATI = 34855,
	GL_MAP1_VERTEX_ATTRIB8_4_NV = 34408,
	GL_INNOCENT_CONTEXT_RESET_EXT = 33364,
	GL_DEFORMATIONS_MASK_SGIX = 33174,
	GL_DRAW_BUFFER0_NV = 34853,
	GL_BOOL_ARB = 35670,
	GL_RGB_FLOAT16_ATI = 34843,
	GL_STENCIL_OP_VALUE_AMD = 34636,
	GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 36879,
	GL_SAMPLER_CUBE_SHADOW_EXT = 36293,
	GL_DRAW_BUFFER1 = 34854,
	GL_MAX_VARYING_COMPONENTS = 35659,
	GL_TEXTURE_LUMINANCE_SIZE = 32864,
	GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 37130,
	GL_DRAW_BUFFER0_ATI = 34853,
	GL_MIRRORED_REPEAT = 33648,
	GL_MAX_DRAW_BUFFERS_NV = 34852,
	GL_MODELVIEW9_ARB = 34601,
	GL_CLIP_PLANE3_IMG = 12291,
	GL_SOURCE0_ALPHA = 34184,
	GL_SIGNED_LUMINANCE8_ALPHA8_NV = 34564,
	GL_SAMPLER_2D_MULTISAMPLE = 37128,
	GL_PRIMITIVE_ID_NV = 35964,
	GL_BALI_NUM_PRIMS_REJECT_INSTRUMENT_SGIX = 33768,
	GL_MAX_VIEWPORT_DIMS = 3386,
	GL_INTENSITY_FLOAT16_APPLE = 34845,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070,
	GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 37279,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 34071,
	GL_R1UI_C3F_V3F_SUN = 34246,
	GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 36908,
	GL_VERTEX_PROGRAM_TWO_SIDE = 34371,
	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 33452,
	GL_CURRENT_MATRIX_ARB = 34369,
	GL_TEXTURE_COMPARE_FUNC = 34893,
	GL_INTENSITY8_SNORM = 36887,
	GL_SELECTED_TEXTURE_SGIS = 33728,
	GL_BGR_INTEGER = 36250,
	GL_BUFFER_ACCESS = 35003,
	GL_SCALE_BY_ONE_HALF_NV = 34112,
	GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32978,
	GL_BOOL = 35670,
	GL_RGBA16F = 34842,
	GL_2D = 1536,
	GL_COVERAGE_MODULATION_NV = 37682,
	GL_DUAL_LUMINANCE16_SGIS = 33047,
	GL_ALPHA4_EXT = 32827,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074,
	GL_LINE_BIT = 4,
	GL_INTERLACE_READ_OML = 35201,
	GL_DUAL_LUMINANCE8_SGIS = 33045,
	GL_TEXTURE_COORD_SET_INTERLEAVE_FACTOR_SGIS = 33733,
	GL_VERTEX_SHADER_VARIANTS_EXT = 34768,
	GL_PATCH_DEFAULT_INNER_LEVEL = 36467,
	GL_SOURCE2_RGB_EXT = 34178,
	GL_RENDERBUFFER_BINDING_EXT = 36007,
	GL_IGLOO_COLORNORMAL_SGIX = 33185,
	GL_ELEMENT_ARRAY_ATI = 34664,
	GL_UNIFORM_TYPE = 35383,
	GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039,
	GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 34897,
	GL_COLOR_TABLE_SGI = 32976,
	GL_CULL_FACE = 2884,
	GL_VARIABLE_G_NV = 34089,
	GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832,
	GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830,
	GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954,
	GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 33802,
	GL_LUMINANCE_ALPHA_SIGNED_SGIX = 34277,
	GL_CIRCULAR_CW_ARC_TO_NV = 250,
	GL_CON_3_ATI = 35140,
	GL_DEPTH_RANGE = 2928,
	GL_FRAGMENT_PROGRAM_POSITION_MESA = 35760,
	GL_VIEW_CLASS_S3TC_DXT5_RGBA = 33487,
	GL_OUTPUT_TEXTURE_COORD12_EXT = 34729,
	GL_CON_1_ATI = 35138,
	GL_ACCUM = 256,
	GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 34099,
	GL_DEBUG_TYPE_MARKER = 33384,
	GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 35743,
	GL_SEPARATE_SPECULAR_COLOR_EXT = 33274,
	GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085,
	GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818,
	GL_T2F_C3F_V3F = 10794,
	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 32981,
	GL_STENCIL_BACK_FAIL_ATI = 34817,
	GL_COLOR_ARRAY_TYPE = 32898,
	GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 33162,
	GL_SELECT = 7170,
	GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 14,
	GL_REG_7_ATI = 35112,
	GL_STENCIL_BACK_FUNC_ATI = 34816,
	GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 32803,
	GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 34241,
	GL_PROGRAM_BINARY_FORMATS_OES = 34815,
	GL_MATRIX0_ARB = 35008,
	GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 33497,
	GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 33639,
	GL_DEBUG_TYPE_PUSH_GROUP_KHR = 33385,
	GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 34974,
	GL_LUMINANCE_FLOAT32_ATI = 34840,
	GL_SWIZZLE_STQ_DQ_ATI = 35193,
	GL_BLUE_BITS = 3412,
	GL_NUM_GENERAL_COMBINERS_NV = 34126,
	GL_PN_TRIANGLES_NORMAL_MODE_ATI = 34803,
	GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299,
	GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 33563,
	GL_PN_TRIANGLES_POINT_MODE_ATI = 34802,
	GL_FRONT_AND_BACK = 1032,
	GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993,
	GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34801,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 33347,
	GL_LARGE_CW_ARC_TO_NV = 24,
	GL_DEPTH_COMPONENT24_OES = 33190,
	GL_CONVOLUTION_FILTER_BIAS = 32789,
	GL_YCRCBA_SGIX = 33561,
	GL_RGBA_SIGNED_SGIX = 34273,
	GL_MAX_VIEWPORTS_NV = 33371,
	GL_READ_FRAMEBUFFER_BINDING_ANGLE = 36010,
	GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949,
	GL_PIXEL_MAP_I_TO_A = 3189,
	GL_BUFFER_USAGE = 34661,
	GL_TEXTURE_SHADER_NV = 34526,
	GL_ACTIVE_STENCIL_FACE_EXT = 35089,
	GL_CLIP_DISTANCE1 = 12289,
	GL_COMPRESSED_LUMINANCE_ARB = 34026,
	GL_DRAW_FRAMEBUFFER_NV = 36009,
	GL_TEXTURE_BLUE_SIZE_EXT = 32862,
	GL_COMPRESSED_RED = 33317,
	GL_W_EXT = 34776,
	GL_IMAGE_CUBIC_WEIGHT_HP = 33118,
	GL_SRC2_ALPHA = 34186,
	GL_INTENSITY32F_ARB = 34839,
	GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 34767,
	GL_TEXTURE_VIEW_MIN_LAYER = 33501,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34764,
	GL_DEBUG_PRINT_MESA = 34650,
	GL_OFFSET_TEXTURE_2D_MATRIX_NV = 34529,
	GL_MAT_AMBIENT_BIT_PGI = 1048576,
	GL_MAP_UNSYNCHRONIZED_BIT = 32,
	GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 268435456,
	GL_VERTEX_WEIGHT_ARRAY_EXT = 34060,
	GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 36321,
	GL_CONSTANT_COLOR_EXT = 32769,
	GL_UPPER_LEFT = 36002,
	GL_T2F_IUI_N3F_V2F_EXT = 33203,
	GL_ADD_SIGNED = 34164,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071,
	GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063,
	GL_OUTPUT_TEXTURE_COORD30_EXT = 34747,
	GL_OUTPUT_TEXTURE_COORD29_EXT = 34746,
	GL_COPY_READ_BUFFER_NV = 36662,
	GL_UNIFORM_BUFFER_SIZE = 35370,
	GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 33357,
	GL_OUTPUT_TEXTURE_COORD25_EXT = 34742,
	GL_UNSIGNED_SHORT_5_5_5_1_EXT = 32820,
	GL_LIGHT3 = 16387,
	GL_BALI_NUM_TRIS_CULLED_INSTRUMENT_SGIX = 33766,
	GL_MAX = 32776,
	GL_REPEAT = 10497,
	GL_CUBIC_EXT = 33588,
	GL_MAP2_INDEX_NURBS_SGIX = 33254,
	GL_GEOMETRY_DEFORMATION_SGIX = 33172,
	GL_OUTPUT_TEXTURE_COORD19_EXT = 34736,
	GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 35957,
	GL_OPERAND1_ALPHA_ARB = 34201,
	GL_LERP_ATI = 35177,
	GL_MAP1_VERTEX_3_NURBS_SGIX = 33227,
	GL_TEXTURE_DS_SIZE_NV = 34589,
	GL_DEBUG_TYPE_OTHER = 33361,
	GL_FOG_BLEND_ALPHA_SGIX = 33278,
	GL_INTENSITY_SIGNED_SGIX = 34276,
	GL_POST_COLOR_MATRIX_RED_SCALE = 32948,
	GL_STATIC_DRAW = 35044,
	GL_STREAM_DRAW = 35040,
	GL_CONTEXT_CORE_PROFILE_BIT = 1,
	GL_OUTPUT_TEXTURE_COORD16_EXT = 34733,
	GL_NUM_PASSES_ATI = 35184,
	GL_OPERAND2_RGB_ARB = 34194,
	GL_OUTPUT_TEXTURE_COORD14_EXT = 34731,
	GL_TEXTURE_MAX_CLAMP_S_SGIX = 33641,
	GL_INNOCENT_CONTEXT_RESET_ARB = 33364,
	GL_SOURCE1_RGB_ARB = 34177,
	GL_OUTPUT_TEXTURE_COORD10_EXT = 34727,
	GL_IMAGE_BUFFER_OES = 36945,
	GL_VIBRANCE_SCALE_NV = 34579,
	GL_FOG = 2912,
	GL_UNSIGNED_SHORT_5_6_5_EXT = 33635,
	GL_DEBUG_SEVERITY_MEDIUM = 37191,
	GL_COPY = 5379,
	GL_INT_IMAGE_2D_MULTISAMPLE = 36960,
	GL_INT64_NV = 5134,
	GL_OUTPUT_TEXTURE_COORD5_EXT = 34722,
	GL_UNSIGNED_SHORT_8_8_MESA = 34234,
	GL_OP_FRAC_EXT = 34697,
	GL_S = 8192,
	GL_CURRENT_SECONDARY_COLOR = 33881,
	GL_CLIP_DISTANCE6_APPLE = 12294,
	GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 35761,
	GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339,
	GL_FRAGMENT_LIGHT7_SGIX = 33811,
	GL_RELATIVE_ROUNDED_RECT4_NV = 237,
	GL_LINE_STRIP = 3,
	GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 33161,
	GL_MAJOR_VERSION = 33307,
	GL_COMPLEX_INT_SGI = 33218,
	GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 33141,
	GL_DEPTH_BUFFER_BIT1_QCOM = 512,
	GL_MAX_VERTEX_OUTPUT_COMPONENTS = 37154,
	GL_ALPHA_FLOAT16_APPLE = 34844,
	GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 33500,
	GL_CLIP_PLANE2 = 12290,
	GL_2PASS_1_SGIS = 32931,
	GL_DEPTH_BUFFER_BIT6_QCOM = 16384,
	GL_RGB10_A2 = 32857,
	GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 36468,
	GL_MAX_VARYING_FLOATS = 35659,
	GL_UNKNOWN_CONTEXT_RESET = 33365,
	GL_STENCIL_BUFFER_BIT3_QCOM = 524288,
	GL_RGBA12_EXT = 32858,
	GL_MAP2_VERTEX_4_NURBS_SGIX = 33253,
	GL_SKIP_COMPONENTS1_NV = -6,
	GL_INFO_LOG_LENGTH = 35716,
	GL_COLOR_MATERIAL_PARAMETER = 2902,
	GL_STENCIL_VALUE_MASK = 2963,
	GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 37675,
	GL_NORMALIZE = 2977,
	GL_UNPACK_SKIP_VOLUMES_SGIS = 33074,
	GL_INDEX_WRITEMASK = 3105,
	GL_BUMP_NUM_TEX_UNITS_ATI = 34679,
	GL_ACTIVE_PROGRAM = 33369,
	GL_PIXEL_MAP_G_TO_G = 3191,
	GL_FEEDBACK_BUFFER_TYPE = 3570,
	GL_ARRAY_BUFFER_ARB = 34962,
	GL_PROGRAM_POINT_SIZE_EXT = 34370,
	GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865,
	GL_PROGRAM_ERROR_POSITION_ARB = 34379,
	GL_TEXTURE_BLUE_TYPE = 35858,
	GL_DEPTH_COMPONENT24_ARB = 33190,
	GL_SAMPLES_SGIS = 32937,
	GL_VERTEX_STREAM1_ATI = 34669,
	GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 33556,
	GL_OCCLUSION_INSTRUMENT_SGIX = 33773,
	GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955,
	GL_TEXTURE_CONSTANT_DATA_SUNX = 33238,
	GL_VERTEX_ATTRIB_ARRAY10_NV = 34394,
	GL_SHADER_IMAGE_LOAD = 33444,
	GL_CONSTANT_BORDER = 33105,
	GL_PIXEL_TILE_WIDTH_SGIX = 33088,
	GL_NO_ERROR = 0,
	GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 37054,
	GL_VERTEX_ATTRIB_ARRAY14_NV = 34398,
	GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 34770,
	GL_DRAW_FRAMEBUFFER_ANGLE = 36009,
	GL_FOG_HINT = 3156,
	GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 16384,
	GL_TEXTURE_2D_STACK_BINDING_MESAX = 34654,
	GL_FOG_COORDINATE_SOURCE = 33872,
	GL_LUMINANCE12_ALPHA4_EXT = 32838,
	GL_PACK_SKIP_IMAGES_EXT = 32875,
	GL_MAX_DEFORMATION_ORDER_SGIX = 33175,
	GL_COLOR_ARRAY_ADDRESS_NV = 36643,
	GL_STATIC_COPY = 35046,
	GL_VERTEX_ATTRIB_ARRAY2_NV = 34386,
	GL_PERFQUERY_FLUSH_INTEL = 33786,
	GL_OP_ROUND_EXT = 34704,
	GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 33531,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 34072,
	GL_MAP1_VERTEX_ATTRIB15_4_NV = 34415,
	GL_DEBUG_OBJECT_MESA = 34649,
	GL_FRAMEBUFFER_SRGB_EXT = 36281,
	GL_MAP2_VERTEX_ATTRIB6_4_NV = 34422,
	GL_INT_VEC4_ARB = 35669,
	GL_COMPRESSED_RGBA = 34030,
	GL_COPY_READ_BUFFER_BINDING = 36662,
	GL_CON_0_ATI = 35137,
	GL_TEXTURE_GREEN_TYPE = 35857,
	GL_MAX_TEXTURE_BUFFER_SIZE_OES = 35883,
	GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 34062,
	GL_TRANSPOSE_PROJECTION_MATRIX = 34020,
	GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 34887,
	GL_BUFFER_GPU_ADDRESS_NV = 36637,
	GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 37497,
	GL_STENCIL_TEST_TWO_SIDE_EXT = 35088,
	GL_ACTIVE_VERTEX_UNITS_ARB = 34469,
	GL_BLUE_NV = 6405,
	GL_VERTEX_STATE_PROGRAM_NV = 34337,
	GL_MODELVIEW29_ARB = 34621,
	GL_OUTPUT_TEXTURE_COORD0_EXT = 34717,
	GL_DEBUG_TYPE_PORTABILITY_ARB = 33359,
	GL_DOT3_RGBA_ARB = 34479,
	GL_RGB16I = 36233,
	GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 32924,
	GL_RGBA_INTEGER_EXT = 36249,
	GL_MODELVIEW20_ARB = 34612,
	GL_GLYPH_HEIGHT_BIT_NV = 2,
	GL_UNSIGNED_NORMALIZED_ARB = 35863,
	GL_DECAL = 8449,
	GL_CONVOLUTION_2D = 32785,
	GL_DEBUG_TYPE_ERROR_KHR = 33356,
	GL_MODELVIEW18_ARB = 34610,
	GL_UNPACK_LSB_FIRST = 3313,
	GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 37495,
	GL_MODELVIEW14_ARB = 34606,
	GL_PIXEL_MAP_I_TO_B = 3188,
	GL_MODELVIEW11_ARB = 34603,
	GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 36483,
	GL_FONT_HEIGHT_BIT_NV = 8388608,
	GL_MODELVIEW7_ARB = 34599,
	GL_TEXTURE_BINDING_3D = 32874,
	GL_RED_BITS = 3410,
	GL_MODELVIEW6_ARB = 34598,
	GL_DEBUG_SEVERITY_MEDIUM_ARB = 37191,
	GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 35879,
	GL_IS_PER_PATCH = 37607,
	GL_SHADOW_AMBIENT_SGIX = 32959,
	GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 37161,
	GL_WEIGHT_ARRAY_SIZE_ARB = 34475,
	GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 36469,
	GL_CURRENT_NORMAL = 2818,
	GL_POLYGON_OFFSET_UNITS = 10752,
	GL_GREEN_SCALE = 3352,
	GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974,
	GL_ACTIVE_TEXTURE_ARB = 34016,
	GL_HI_SCALE_NV = 34574,
	GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 34572,
	GL_MAX_RATIONAL_EVAL_ORDER_NV = 34519,
	GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 34020,
	GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981,
	GL_REFLECTION_MAP = 34066,
	GL_VERTEX_ATTRIB_ARRAY1_NV = 34385,
	GL_REG_16_ATI = 35121,
	GL_HILO_NV = 34548,
	GL_INDEX_ARRAY_COUNT_EXT = 32903,
	GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 33455,
	GL_QUERY_BUFFER_BARRIER_BIT = 32768,
	GL_CULL_MODES_NV = 34528,
	GL_SIGNED_LUMINANCE8_NV = 34562,
	GL_SAMPLER_2D_RECT = 35683,
	GL_EVAL_VERTEX_ATTRIB5_NV = 34507,
	GL_PIXEL_PACK_BUFFER_BINDING = 35053,
	GL_UTF16_NV = 37019,
	GL_MIN_SAMPLE_SHADING_VALUE_ARB = 35895,
	GL_VERTEX_ATTRIB_ARRAY13_NV = 34397,
	GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 37590,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 36265,
	GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346,
	GL_NORMAL_MAP = 34065,
	GL_DOT3_RGBA_IMG = 34479,
	GL_COORD_REPLACE_ARB = 34914,
	GL_DEBUG_CALLBACK_FUNCTION_KHR = 33348,
	GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338,
	GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661,
	GL_WEIGHT_SUM_UNITY_ARB = 34470,
	GL_LOGIC_OP_MODE = 3056,
	GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 37081,
	GL_FONT_Y_MAX_BOUNDS_BIT_NV = 524288,
	GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 37808,
	GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467,
	GL_SAMPLE_MASK_NV = 36433,
	GL_STENCIL_BUFFER_BIT1_QCOM = 131072,
	GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 34061,
	GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 35413,
	GL_UNIFORM_BLOCK_DATA_SIZE = 35392,
	GL_MAP2_VERTEX_ATTRIB15_4_NV = 34431,
	GL_MAP2_VERTEX_ATTRIB13_4_NV = 34429,
	GL_MAP2_VERTEX_ATTRIB12_4_NV = 34428,
	GL_MAP2_VERTEX_ATTRIB10_4_NV = 34426,
	GL_MAP2_VERTEX_ATTRIB7_4_NV = 34423,
	GL_INT_VEC3_ARB = 35668,
	GL_LINEAR_SHARPEN_SGIS = 32941,
	GL_TEXTURE_FILTER_CONTROL = 34048,
	GL_PROXY_COLOR_TABLE_SGI = 32979,
	GL_PRIMITIVES_SUBMITTED_ARB = 33519,
	GL_MATRIX8_NV = 34360,
	GL_ELEMENT_ARRAY_POINTER_ATI = 34666,
	GL_MAP2_VERTEX_ATTRIB2_4_NV = 34418,
	GL_MAP2_VERTEX_ATTRIB1_4_NV = 34417,
	GL_SMOOTH_CUBIC_CURVE_TO_NV = 16,
	GL_MAP1_VERTEX_ATTRIB13_4_NV = 34413,
	GL_TEXTURE_MAX_LEVEL_APPLE = 33085,
	GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 2,
	GL_SEPARATE_ATTRIBS_EXT = 35981,
	GL_FONT_DESCENDER_BIT_NV = 4194304,
	GL_BINNING_CONTROL_HINT_QCOM = 36784,
	GL_MAP1_VERTEX_ATTRIB10_4_NV = 34410,
	GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 32957,
	GL_MAP1_VERTEX_ATTRIB9_4_NV = 34409,
	GL_FRAGMENT_SHADER_ATI = 35104,
	GL_CND0_ATI = 35179,
	GL_MAP1_VERTEX_ATTRIB1_4_NV = 34401,
	GL_INCR_WRAP_EXT = 34055,
	GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 33637,
	GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395,
	GL_RENDERBUFFER_BINDING = 36007,
	GL_VERTEX_ATTRIB_ARRAY12_NV = 34396,
	GL_TEXTURE_FOG_SGIX = 33645,
	GL_VERTEX_ATTRIB_ARRAY6_NV = 34390,
	GL_VERTEX_ATTRIB_ARRAY4_NV = 34388,
	GL_REG_31_ATI = 35136,
	GL_TEXTURE_DT_SIZE_NV = 34590,
	GL_FOG_COORD_ARRAY_ADDRESS_NV = 36648,
	GL_OFFSET_TEXTURE_BIAS_NV = 34531,
	GL_TEXTURE28 = 34012,
	GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373,
	GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999,
	GL_DRAW_BUFFER8 = 34861,
	GL_CURRENT_MATRIX_NV = 34369,
	GL_ONE_MINUS_DST_COLOR = 775,
	GL_OUTPUT_TEXTURE_COORD13_EXT = 34730,
	GL_PIXEL_MAP_I_TO_G = 3187,
	GL_TESS_CONTROL_TEXTURE = 33436,
	GL_MIN_SAMPLE_SHADING_VALUE_OES = 35895,
	GL_SCISSOR_BOX = 3088,
	GL_MATRIX11_NV = 34363,
	GL_TEXTURE10 = 33994,
	GL_MATRIX3_NV = 34355,
	GL_COMP_BIT_ATI = 2,
	GL_FENCE_APPLE = 35339,
	GL_GEOMETRY_VERTICES_OUT = 35094,
	GL_COLOR_ATTACHMENT14_NV = 36078,
	GL_UNSIGNED_SHORT_15_1_MESA = 34643,
	GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 35973,
	GL_MAP2_VERTEX_3_NURBS_SGIX = 33252,
	GL_FOG_FUNC_SGIS = 33066,
	GL_RG16F_EXT = 33327,
	GL_DOUBLE_EXT = 5130,
	GL_REFERENCED_BY_VERTEX_SHADER = 37638,
	GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301,
	GL_COMPRESSED_SLUMINANCE_EXT = 35914,
	GL_LUMINANCE8_EXT = 32832,
	GL_INTENSITY32UI_EXT = 36211,
	GL_CURRENT_SECONDARY_COLOR_EXT = 33881,
	GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX = 34295,
	GL_TEXTURE_SWIZZLE_G = 36419,
	GL_POINT_SIZE_MIN_ARB = 33062,
	GL_FRAGMENT_LIGHTING_SGIX = 33792,
	GL_INDEX_SHIFT = 3346,
	GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 35068,
	GL_VERSION_ES_CM_1_1 = 1,
	GL_READ_FRAMEBUFFER_NV = 36008,
	GL_TEXTURE_CUBE_MAP = 34067,
	GL_STENCIL_CLEAR_TAG_VALUE_EXT = 35059,
	GL_VERTEX_ATTRIB_BINDING = 33492,
	GL_ASYNC_MARKER_SGIX = 33577,
	GL_PRIMITIVES_GENERATED_NV = 35975,
	GL_MAX_PROJECTION_STACK_DEPTH = 3384,
	GL_PIXEL_MIN_FILTER_EXT = 33586,
	GL_ALLOW_DRAW_MEM_HINT_PGI = 107025,
	GL_INTERNALFORMAT_SUPPORTED = 33391,
	GL_PIXEL_MAP_I_TO_R_SIZE = 3250,
	GL_IMAGE_BINDING_ACCESS = 36670,
	GL_FRAGMENT_COVERAGE_COLOR_NV = 37598,
	GL_COMBINER_CD_DOT_PRODUCT_NV = 34118,
	GL_TEXTURE_RANGE_LENGTH_APPLE = 34231,
	GL_COLOR_BUFFER_BIT6_QCOM = 64,
	GL_VERTEX_STREAM7_ATI = 34675,
	GL_OBJECT_LINE_SGIS = 33271,
	GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972,
	GL_MAX_TEXTURE_COORDS_ARB = 34929,
	GL_RED_EXT = 6403,
	GL_INTERNALFORMAT_PREFERRED = 33392,
	GL_OPERAND2_RGB = 34194,
	GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 36916,
	GL_BOOL_VEC4_ARB = 35673,
	GL_TEXTURE_BINDING_CUBE_MAP = 34068,
	GL_TEXTURE_MAX_CLAMP_T_SGIX = 33642,
	GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 37699,
	GL_NUM_LOOPBACK_COMPONENTS_ATI = 35188,
	GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949,
	GL_OPERAND1_RGB = 34193,
	GL_OPERAND0_RGB = 34192,
	GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987,
	GL_MAP2_VERTEX_3 = 3511,
	GL_COLOR_ATTACHMENT9 = 36073,
	GL_DOT_PRODUCT_PASS_THROUGH_NV = 34907,
	GL_PROVOKING_VERTEX = 36431,
	GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 37125,
	GL_TEXTURE5 = 33989,
	GL_SPOT_DIRECTION = 4612,
	GL_UNSIGNED_SHORT_4_4_4_4_EXT = 32819,
	GL_SOURCE1_ALPHA = 34185,
	GL_NAND = 5390,
	GL_MATRIX21_ARB = 35029,
	GL_PRIMARY_COLOR_ARB = 34167,
	GL_NAMED_STRING_TYPE_ARB = 36330,
	GL_INT_IMAGE_CUBE = 36955,
	GL_OVERLAY_NV = 37526,
	GL_DOT3_ATI = 35174,
	GL_SOURCE1_RGB = 34177,
	GL_OBJECT_DISTANCE_TO_LINE_SGIS = 33267,
	GL_EDGE_FLAG_ARRAY_LENGTH_NV = 36656,
	GL_T2F_IUI_N3F_V3F_EXT = 33204,
	GL_CONSTANT_ARB = 34166,
	GL_SOURCE2_ALPHA = 34186,
	GL_PACK_COMPRESSED_SIZE_SGIX = 33564,
	GL_DOUBLE_MAT2 = 36678,
	GL_LUMINANCE16_EXT = 32834,
	GL_ASYNC_TEX_IMAGE_SGIX = 33628,
	GL_GREEN_MAX_CLAMP_INGR = 34149,
	GL_RED_MAX_CLAMP_INGR = 34148,
	GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 36935,
	GL_UNIFORM_SGIX = 33572,
	GL_REG_15_ATI = 35120,
	GL_C4UB_V2F = 10786,
	GL_OPERAND1_RGB_ARB = 34193,
	GL_LOSE_CONTEXT_ON_RESET_KHR = 33362,
	GL_READ_FRAMEBUFFER_APPLE = 36008,
	GL_UNSIGNED_SHORT = 5123,
	GL_R1UI_T2F_V3F_SUN = 34249,
	GL_FRAGMENT_LIGHT0_SGIX = 33804,
	GL_TEXTURE_CLIPMAP_CENTER_SGIX = 33137,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054,
	GL_PIXEL_MAP_I_TO_G_SIZE = 3251,
	GL_DUAL_LUMINANCE12_SGIS = 33046,
	GL_COMBINER7_NV = 34135,
	GL_RED = 6403,
	GL_PIXEL_SUBSAMPLE_4242_SGIX = 34212,
	GL_COMBINER5_NV = 34133,
	GL_PACK_ROW_BYTES_APPLE = 35349,
	GL_PATH_PROJECTION_NV = 5889,
	GL_STENCIL_BUFFER_BIT4_QCOM = 1048576,
	GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381,
	GL_MIN_GREEN_SGIS = 34216,
	GL_MAX_UNIFORM_LOCATIONS = 33390,
	GL_COMBINER2_NV = 34130,
	GL_PREVIOUS_TEXTURE_INPUT_NV = 34532,
	GL_FRAGMENT_LIGHT6_SGIX = 33810,
	GL_PROXY_TEXTURE_2D_STACK_MESAX = 34652,
	GL_LOCATION_COMPONENT = 37706,
	GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 34546,
	GL_VIEW_CLASS_BPTC_UNORM = 33490,
	GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826,
	GL_MAX_CLIP_DISTANCES = 3378,
	GL_RGBA_FLOAT32_APPLE = 34836,
	GL_ONE_MINUS_SRC1_COLOR = 35066,
	GL_CIRCULAR_TANGENT_ARC_TO_NV = 252,
	GL_DEPTH_COMPONENT32_ARB = 33191,
	GL_DYNAMIC_STORAGE_BIT = 256,
	GL_POST_CONVOLUTION_ALPHA_SCALE = 32799,
	GL_Y_EXT = 34774,
	GL_TANGENT_ARRAY_POINTER_EXT = 33858,
	GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 36443,
	GL_RENDERBUFFER_BINDING_OES = 36007,
	GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 33297,
	GL_LINE_STIPPLE_PATTERN = 2853,
	GL_POINT_DISTANCE_ATTENUATION_ARB = 33065,
	GL_R1UI_N3F_V3F_SUN = 34247,
	GL_DEPTH_BUFFER_BIT4_QCOM = 4096,
	GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 37593,
	GL_FLOAT_MAT4_ARB = 35676,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 34072,
	GL_SELECTED_TEXTURE_TRANSFORM_SGIS = 33730,
	GL_OP_NEGATE_EXT = 34691,
	GL_TRACK_MATRIX_NV = 34376,
	GL_DEPTH_BIAS = 3359,
	GL_VARIANT_ARRAY_TYPE_EXT = 34791,
	GL_ALPHA_SIGNED_SGIX = 34274,
	GL_COMBINER4_NV = 34132,
	GL_TEXTURE_MAX_LEVEL_SGIS = 33085,
	GL_MAP_READ_BIT_EXT = 1,
	GL_MATRIX12_NV = 34364,
	GL_CONSTANT_COLOR1_NV = 34091,
	GL_LOGIC_OP = 3057,
	GL_VARIABLE_D_NV = 34086,
	GL_TRANSFORM_FEEDBACK_BINDING = 36389,
	GL_PIXEL_CUBIC_WEIGHT_EXT = 33587,
	GL_MAX_SHININESS_NV = 34052,
	GL_MAP_ATTRIB_V_ORDER_NV = 34500,
	GL_CLIP_PLANE1_IMG = 12289,
	GL_COMBINER_SCALE_NV = 34120,
	GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 36202,
	GL_AND_INVERTED = 5380,
	GL_STENCIL_BUFFER_BIT0_QCOM = 65536,
	GL_MAX_TESS_GEN_LEVEL_EXT = 36478,
	GL_IUI_V2F_EXT = 33197,
	GL_CURRENT_VERTEX_ATTRIB = 34342,
	GL_FLOAT_MAT2x4_NV = 35686,
	GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371,
	GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 36874,
	GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 33347,
	GL_CONTEXT_LOST_KHR = 1287,
	GL_STENCIL_CLEAR_VALUE = 2961,
	GL_LINEAR_SHARPEN_COLOR_SGIS = 32943,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 34074,
	GL_FLOAT_VEC3_ARB = 35665,
	GL_PROXY_TEXTURE_1D_EXT = 32867,
	GL_SUBTRACT = 34023,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 34073,
	GL_COLOR_TABLE_BIAS = 32983,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073,
	GL_SPARE0_NV = 34094,
	GL_QUERY_RESULT_AVAILABLE_EXT = 34919,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072,
	GL_MAT_DIFFUSE_BIT_PGI = 4194304,
	GL_UNIFORM_BLOCK_NAME_LENGTH = 35393,
	GL_PARTIAL_SUCCESS_NV = 36910,
	GL_COMBINER6_NV = 34134,
	GL_ELEMENT_ARRAY_TYPE_ATI = 34665,
	GL_LIST_INDEX = 2867,
	GL_CONTEXT_FLAG_DEBUG_BIT = 2,
	GL_MODELVIEW5_ARB = 34597,
	GL_LUMINANCE12_ALPHA12_EXT = 32839,
	GL_POINT_SIZE_GRANULARITY = 2835,
	GL_STORAGE_PRIVATE_APPLE = 34237,
	GL_COMPLEX_UNSIGNED_INT_SGI = 33217,
	GL_INTERNALFORMAT_DEPTH_SIZE = 33397,
	GL_REFLECTION_MAP_EXT = 34066,
	GL_MAP2_TEXTURE_COORD_2_NURBS_SGIX = 33258,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 34924,
	GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 36495,
	GL_CUBIC_CURVE_TO_NV = 12,
	GL_SRGB8 = 35905,
	GL_UNSIGNED_INT_IMAGE_2D = 36963,
	GL_CONVOLUTION_FILTER_BIAS_EXT = 32789,
	GL_POST_CONVOLUTION_BLUE_BIAS = 32802,
	GL_FOG_BLEND_COLOR_SGIX = 33279,
	GL_REFLECTION_MAP_OES = 34066,
	GL_VERTEX_ATTRIB_ARRAY5_NV = 34389,
	GL_INT64_VEC3_NV = 36842,
	GL_CONSERVE_MEMORY_HINT_PGI = 107005,
	GL_TEXTURE_BLUE_TYPE_ARB = 35858,
	GL_TEXTURE_GEN_Q = 3171,
	GL_FRAGMENT_DEPTH = 33874,
	GL_MAP1_VERTEX_ATTRIB2_4_NV = 34402,
	GL_MAP1_VERTEX_ATTRIB3_4_NV = 34403,
	GL_UNIFORM_BARRIER_BIT = 4,
	GL_MAP1_VERTEX_ATTRIB4_4_NV = 34404,
	GL_WEIGHT_ARRAY_POINTER_ARB = 34476,
	GL_MAP1_VERTEX_ATTRIB6_4_NV = 34406,
	GL_CCW = 2305,
	GL_INCR_WRAP_OES = 34055,
	GL_DEPTH_COMPONENT24 = 33190,
	GL_DRAW_BUFFER5_NV = 34858,
	GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 35902,
	GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,
	GL_MIN_RED_SGIS = 34214,
	GL_CLIP_NEAR_HINT_PGI = 107040,
	GL_LINE_WIDTH = 2849,
	GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658,
	GL_COMBINE4_NV = 34051,
	GL_NOOP = 5381,
	GL_COLOR_COMPONENTS = 33411,
	GL_DRAW_FRAMEBUFFER_BINDING_NV = 36006,
	GL_MAP1_VERTEX_ATTRIB14_4_NV = 34414,
	GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 33800,
	GL_CLIP_PLANE2_IMG = 12290,
	GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657,
	GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 33592,
	GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 34805,
	GL_OUTPUT_TEXTURE_COORD18_EXT = 34735,
	GL_TEXTURE_WRAP_R = 32882,
	GL_MAP2_VERTEX_ATTRIB3_4_NV = 34419,
	GL_PIXEL_MAP_S_TO_S_SIZE = 3249,
	GL_LUMINANCE16F_ARB = 34846,
	GL_VIEW_CLASS_RGTC1_RED = 33488,
	GL_PROGRAM_KHR = 33506,
	GL_PROGRAM_SEPARABLE_EXT = 33368,
	GL_TEXTURE_BINDING_RECTANGLE = 34038,
	GL_CURRENT_MATRIX_STACK_DEPTH_NV = 34368,
	GL_STENCIL_BUFFER_BIT6_QCOM = 4194304,
	GL_LINES_ADJACENCY = 10,
	GL_MAT_SPECULAR_BIT_PGI = 67108864,
	GL_TEXTURE21 = 34005,
	GL_BUFFER_OBJECT_APPLE = 34227,
	GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336,
	GL_TEXTURE_LO_SIZE_NV = 34588,
	GL_RGBA_FLOAT_MODE_ARB = 34848,
	GL_OUTPUT_TEXTURE_COORD8_EXT = 34725,
	GL_IUI_N3F_V3F_EXT = 33200,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 36264,
	GL_TEXTURE31_ARB = 34015,
	GL_MAX_RENDERBUFFER_SIZE = 34024,
	GL_TEXTURE_GEN_STR_OES = 36192,
	GL_TEXTURE_CLIPMAP_FRAME_SGIX = 33138,
	GL_SAMPLER_2D_SHADOW_EXT = 35682,
	GL_POINT_SPRITE_ARB = 34913,
	GL_WEIGHT_ARRAY_STRIDE_ARB = 34474,
	GL_TRANSPOSE_TEXTURE_MATRIX = 34021,
	GL_FOG_COLOR = 2918,
	GL_COMPUTE_WORK_GROUP_SIZE = 33383,
	GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953,
	GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 33156,
	GL_3_BYTES = 5128,
	GL_SHADER_OBJECT_EXT = 35656,
	GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 37127,
	GL_MODELVIEW1_ARB = 34058,
	GL_RESCALE_NORMAL = 32826,
	GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019,
	GL_CON_25_ATI = 35162,
	GL_AUX_BUFFERS = 3072,
	GL_PREFER_DOUBLEBUFFER_HINT_PGI = 107000,
	GL_UNSIGNED_INT_8_8_8_8_REV = 33639,
	GL_SGX_BINARY_IMG = 35850,
	GL_DRAW_FRAMEBUFFER_BINDING = 36006,
	GL_TEXTURE30_ARB = 34014,
	GL_BLEND_EQUATION_EXT = 32777,
	GL_422_EXT = 32972,
	GL_TEXTURE0 = 33984,
	GL_SAMPLE_ALPHA_TO_ONE_EXT = 32927,
	GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 35378,
	GL_INTERNALFORMAT_GREEN_SIZE = 33394,
	GL_TEXTURE29_ARB = 34013,
	GL_RENDERER = 7937,
	GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046,
	GL_TEXTURE27_ARB = 34011,
	GL_TEXTURE26_ARB = 34010,
	GL_IMAGE_COMPATIBILITY_CLASS = 33448,
	GL_NEAREST_CLIPMAP_NEAREST_SGIX = 33869,
	GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 37069,
	GL_TEXTURE23_ARB = 34007,
	GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723,
	GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822,
	GL_MIRROR_CLAMP_ATI = 34626,
	GL_FOG_LAYERS_POINTS_SGIX = 33575,
	GL_COMBINER_AB_DOT_PRODUCT_NV = 34117,
	GL_STEREO = 3123,
	GL_COLOR_MATRIX_STACK_DEPTH = 32946,
	GL_VERTEX_ATTRIB_MAP1_APPLE = 35328,
	GL_DEBUG_TYPE_PUSH_GROUP = 33385,
	GL_FEEDBACK = 7169,
	GL_DRAW_FRAMEBUFFER = 36009,
	GL_4PASS_3_SGIS = 32935,
	GL_CURRENT_RASTER_POSITION_VALID = 2824,
	GL_PASS_THROUGH_NV = 34534,
	GL_ALPHA_MAX_CLAMP_INGR = 34151,
	GL_TEXTURE19_ARB = 34003,
	GL_RGBA_FLOAT16_APPLE = 34842,
	GL_SURFACE_STATE_NV = 34539,
	GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 36054,
	GL_INDEX_ARRAY_TYPE_EXT = 32901,
	GL_NEGATIVE_Z_EXT = 34779,
	GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972,
	GL_LINEAR_MIPMAP_LINEAR = 9987,
	GL_TEXTURE_UPDATE_BARRIER_BIT = 256,
	GL_DRAW_BUFFER14 = 34867,
	GL_TEXTURE14_ARB = 33998,
	GL_SURFACE_REGISTERED_NV = 34557,
	GL_UNSIGNED_INT8_VEC4_NV = 36847,
	GL_TEXTURE13_ARB = 33997,
	GL_TEXTURE12_ARB = 33996,
	GL_INT_VEC3 = 35668,
	GL_TEXTURE11_ARB = 33995,
	GL_SAMPLE_MASK_INVERT_SGIS = 32939,
	GL_MODELVIEW_STACK_DEPTH = 2979,
	GL_T2F_IUI_V2F_EXT = 33201,
	GL_COMPRESSED_SRGB_ALPHA_EXT = 35913,
	GL_FOG_SCALE_VALUE_SGIX = 33277,
	GL_DETAIL_TEXTURE_2D_SGIS = 32917,
	GL_TEXTURE8_ARB = 33992,
	GL_T2F_V3F = 10791,
	GL_PERCENTAGE_AMD = 35779,
	GL_MAX_PIXEL_MAP_TABLE = 3380,
	GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777,
	GL_INT_IMAGE_BUFFER_OES = 36956,
	GL_TEXTURE4_ARB = 33988,
	GL_TEXTURE2_ARB = 33986,
	GL_TEXTURE1_ARB = 33985,
	GL_ONE_MINUS_SRC_ALPHA = 771,
	GL_REG_27_ATI = 35132,
	GL_OPERAND2_RGB_EXT = 34194,
	GL_SPRITE_EYE_ALIGNED_SGIX = 33102,
	GL_MODELVIEW8_ARB = 34600,
	GL_COLOR_CLEAR_VALUE = 3106,
	GL_TRIANGLES_ADJACENCY_OES = 12,
	GL_COMPRESSED_ALPHA_ARB = 34025,
	GL_MODELVIEW12_ARB = 34604,
	GL_MAX_VERTEX_ATOMIC_COUNTERS = 37586,
	GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883,
	GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882,
	GL_TEXTURE_CUBE_MAP_EXT = 34067,
	GL_MODELVIEW19_ARB = 34611,
	GL_MAX_ACTIVE_LIGHTS_SGIX = 33797,
	GL_MODELVIEW24_ARB = 34616,
	GL_AMBIENT_AND_DIFFUSE = 5634,
	GL_CURRENT_PALETTE_MATRIX_OES = 34883,
	GL_RESTART_PATH_NV = 240,
	GL_FLOAT_MAT4x3_NV = 35690,
	GL_EVAL_VERTEX_ATTRIB12_NV = 34514,
	GL_MODELVIEW26_ARB = 34618,
	GL_MODELVIEW27_ARB = 34619,
	GL_NORMAL_ARRAY_BUFFER_BINDING = 34967,
	GL_VARIANT_DATATYPE_EXT = 34789,
	GL_CLOSE_PATH_NV = 0,
	GL_PRIMITIVES_GENERATED_EXT = 35975,
	GL_HSL_COLOR_NV = 37551,
	GL_STACK_OVERFLOW_KHR = 1283,
	GL_VERTEX_PROGRAM_ARB = 34336,
	GL_DYNAMIC_COPY_ARB = 35050,
	GL_4D_COLOR_TEXTURE = 1540,
	GL_RGBA_S3TC = 33698,
	GL_CURRENT_FOG_COORD = 33875,
	GL_QUARTER_BIT_ATI = 16,
	GL_R1UI_C4F_N3F_V3F_SUN = 34248,
	GL_FRAGMENT_DEPTH_EXT = 33874,
	GL_BALI_FRAGMENTS_GENERATED_INSTRUMENT_SGIX = 33770,
	GL_COLOR_TABLE_FORMAT_SGI = 32984,
	GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 33378,
	GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 35412,
	GL_RGBA8_EXT = 32856,
	GL_SAMPLES_PASSED = 35092,
	GL_MAX_VERTEX_ATTRIB_BINDINGS = 33498,
	GL_CONVOLUTION_1D = 32784,
	GL_HILO16_NV = 34552,
	GL_3D_COLOR = 1538,
	GL_PIXEL_MAP_G_TO_G_SIZE = 3255,
	GL_OPERAND0_ALPHA = 34200,
	GL_FOG_TYPE_SGIX = 33571,
	GL_SPARSE_STORAGE_BIT_ARB = 1024,
	GL_TEXTURE_VIEW_MIN_LEVEL_OES = 33499,
	GL_GET_TEXTURE_IMAGE_FORMAT = 33425,
	GL_RGB4_EXT = 32847,
	GL_CLIP_DISTANCE7_APPLE = 12295,
	GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 34807,
	GL_PERFMON_RESULT_AMD = 35782,
	GL_MATRIX_EXT = 34752,
	GL_LUMINANCE12_EXT = 32833,
	GL_CW = 2304,
	GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 34889,
	GL_DISCARD_ATI = 34659,
	GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 33638,
	GL_MAX_COLOR_TEXTURE_SAMPLES = 37134,
	GL_ARRAY_OBJECT_OFFSET_ATI = 34663,
	GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868,
	GL_VERTEX_STREAM0_ATI = 34668,
	GL_LIGHTING = 2896,
	GL_VERTEX_STREAM3_ATI = 34671,
	GL_PIXEL_TEX_GEN_MODE_SGIX = 33579,
	GL_RGBA2 = 32853,
	GL_VERTEX_STREAM5_ATI = 34673,
	GL_BUMP_ROT_MATRIX_SIZE_ATI = 34678,
	GL_CONVOLUTION_HEIGHT_EXT = 32793,
	GL_MODELVIEW0_MATRIX_EXT = 2982,
	GL_ADD = 260,
	GL_DOT_PRODUCT_TEXTURE_2D_NV = 34542,
	GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 33457,
	GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 3382,
	GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 37272,
	GL_STREAM_READ = 35041,
	GL_FRAGMENT_NORMAL_EXT = 33610,
	GL_OP_DOT3_EXT = 34692,
	GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 35763,
	GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 33523,
	GL_CONSTANT_COLOR = 32769,
	GL_GEOMETRY_SUBROUTINE = 37611,
	GL_POINT_SIZE_MAX_ARB = 33063,
	GL_TEXTURE_SHADOW = 33441,
	GL_OP_FLOOR_EXT = 34703,
	GL_COLOR_ATTACHMENT4_NV = 36068,
	GL_DEPTH_CLEAR_VALUE = 2931,
	GL_TESS_CONTROL_SHADER = 36488,
	GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 33522,
	GL_QUAD_ALPHA8_SGIS = 33055,
	GL_VIEW_CLASS_RGTC2_RG = 33489,
	GL_COLOR_INDEX8_EXT = 32997,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 37080,
	GL_PROGRAM_BINARY_FORMATS = 34815,
	GL_INTERNALFORMAT_ALPHA_TYPE = 33403,
	GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 32797,
	GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 36480,
	GL_MODELVIEW28_ARB = 34620,
	GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 36424,
	GL_OUTPUT_TEXTURE_COORD1_EXT = 34718,
	GL_OUTPUT_TEXTURE_COORD2_EXT = 34719,
	GL_COLOR_TABLE_RED_SIZE = 32986,
	GL_OUTPUT_TEXTURE_COORD3_EXT = 34720,
	GL_UNSIGNED_INT_2_10_10_10_REV = 33640,
	GL_INDEX_MATERIAL_PARAMETER_EXT = 33209,
	GL_IMAGE_CLASS_2_X_8 = 33472,
	GL_OUTPUT_TEXTURE_COORD7_EXT = 34724,
	GL_OBJECT_PLANE = 9473,
	GL_PIXEL_TRANSFORM_2D_EXT = 33584,
	GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 36965,
	GL_PROGRAM_RESIDENT_NV = 34375,
	GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 2,
	GL_FRAGMENT_COLOR_MATERIAL_SGIX = 33793,
	GL_TEXTURE_MIN_FILTER = 10241,
	GL_INTERLEAVED_ATTRIBS = 35980,
	GL_TEXTURE_MAX_CLAMP_R_SGIX = 33643,
	GL_OUTPUT_TEXTURE_COORD15_EXT = 34732,
	GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 3384,
	GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952,
	GL_ALL_SHADER_BITS = 4294967295,
	GL_DEPTH_COMPONENTS = 33412,
	GL_FRAGMENT_SHADER_BIT_EXT = 2,
	GL_TEXTURE_SHARED_SIZE_EXT = 35903,
	GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 36970,
	GL_OUTPUT_TEXTURE_COORD22_EXT = 34739,
	GL_OUTPUT_TEXTURE_COORD24_EXT = 34741,
	GL_CONVOLUTION_WIDTH = 32792,
	GL_TEXTURE_IMAGE_FORMAT = 33423,
	GL_VERTEX4_BIT_PGI = 8,
	GL_CONSTANT_ATTENUATION = 4615,
	GL_QUERY_BY_REGION_WAIT_NV = 36373,
	GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,
	GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 36257,
	GL_INTERNALFORMAT_GREEN_TYPE = 33401,
	GL_LUMINANCE32F_EXT = 34840,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 33351,
	GL_INTERNALFORMAT_SHARED_SIZE = 33399,
	GL_LOCAL_EXT = 34756,
	GL_HIGH_FLOAT = 36338,
	GL_MODELVIEW21_ARB = 34613,
	GL_STATIC_ATI = 34656,
	GL_CURRENT_TANGENT_EXT = 33851,
	GL_MATRIX6_NV = 34358,
	GL_PIXEL_BUFFER_BARRIER_BIT = 128,
	GL_COMBINER_SUM_OUTPUT_NV = 34124,
	GL_FLOAT_MAT3 = 35675,
	GL_COLOR_BUFFER_BIT4_QCOM = 16,
	GL_CLEAR_TEXTURE = 37733,
	GL_TEXTURE_RED_SIZE_EXT = 32860,
	GL_TEXTURE_FREE_MEMORY_ATI = 34812,
	GL_SAMPLE_BUFFERS_SGIS = 32936,
	GL_X_EXT = 34773,
	GL_VIEW_CLASS_8_BITS = 33483,
	GL_CLIENT_ATTRIB_STACK_DEPTH = 2993,
	GL_MAP2_TEXTURE_COORD_2 = 3508,
	GL_NEGATIVE_Y_EXT = 34778,
	GL_COUNTER_TYPE_AMD = 35776,
	GL_MAP1_TEXTURE_COORD_2 = 3476,
	GL_NEGATIVE_W_EXT = 34780,
	GL_FENCE_STATUS_NV = 34035,
	GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 36320,
	GL_COLOR_BUFFER_BIT3_QCOM = 8,
	GL_MODELVIEW4_ARB = 34596,
	GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 33458,
	GL_SAMPLER = 33510,
	GL_RG32UI = 33340,
	GL_MAX_FRAGMENT_LIGHTS_SGIX = 33796,
	GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192,
	GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842,
	GL_DEBUG_SOURCE_OTHER_ARB = 33355,
	GL_LOCAL_CONSTANT_DATATYPE_EXT = 34797,
	GL_NO_RESET_NOTIFICATION_ARB = 33377,
	GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 34070,
	GL_FRAMEBUFFER_OES = 36160,
	GL_MAX_COLOR_ATTACHMENTS = 36063,
	GL_IMAGE_CLASS_2_X_16 = 33469,
	GL_LUMINANCE16_ALPHA16 = 32840,
	GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 37155,
	GL_VERTEX_ATTRIB_ARRAY0_NV = 34384,
	GL_TEXTURE_COORD_ARRAY_TYPE = 32905,
	GL_FRAMEZOOM_SGIX = 33163,
	GL_HORIZONTAL_LINE_TO_NV = 6,
	GL_EDGE_FLAG_ARRAY = 32889,
	GL_OPERAND3_ALPHA_NV = 34203,
	GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951,
	GL_RGBA32F_ARB = 34836,
	GL_SAMPLE_MASK_VALUE_SGIS = 32938,
	GL_INTENSITY8UI_EXT = 36223,
	GL_QUERY_RESULT_AVAILABLE_ARB = 34919,
	GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 536870912,
	GL_FRAGMENT_MATERIAL_EXT = 33609,
	GL_MAP2_VERTEX_ATTRIB11_4_NV = 34427,
	GL_MAP2_TANGENT_EXT = 33861,
	GL_MAX_ATTRIB_STACK_DEPTH = 3381,
	GL_RGB_FLOAT32_APPLE = 34837,
	GL_TEXTURE_INTENSITY_TYPE = 35861,
	GL_MAP2_TEXTURE_COORD_3_NURBS_SGIX = 33259,
	GL_R11F_G11F_B10F_APPLE = 35898,
	GL_TRANSLATE_2D_NV = 37008,
	GL_OP_MOV_EXT = 34713,
	GL_FLOAT_MAT3x4_NV = 35688,
	GL_TEXTURE_BORDER_VALUES_NV = 34586,
	GL_IMAGE_MIN_FILTER_HP = 33117,
	GL_TEXTURE_DEFORMATION_BIT_SGIX = 1,
	GL_IGLOO_LMC_COLOR_SGIX = 33187,
	GL_COMPILE_STATUS = 35713,
	GL_MIN_LUMINANCE_SGIS = 34296,
	GL_DEPTH_BUFFER_BIT2_QCOM = 1024,
	GL_COLOR_ARRAY_EXT = 32886,
	GL_COMPRESSED_LUMINANCE = 34026,
	GL_RGB_FLOAT16_APPLE = 34843,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048,
	GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 67108864,
	GL_STENCIL_BUFFER_BIT2_QCOM = 262144,
	GL_REPLACE_MIDDLE_SUN = 2,
	GL_LUMINANCE_FLOAT16_APPLE = 34846,
	GL_DRAW_PIXELS_APPLE = 35338,
	GL_FONT_ASCENDER_BIT_NV = 2097152,
	GL_HISTOGRAM_ALPHA_SIZE_EXT = 32811,
	GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 33554432,
	GL_LUMINANCE_ALPHA16F_ARB = 34847,
	GL_DOUBLE_MAT2x4 = 36682,
	GL_DEPTH_COMPONENT32_OES = 33191,
	GL_POST_CONVOLUTION_RED_SCALE_EXT = 32796,
	GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990,
	GL_DRAW_BUFFER0_ARB = 34853,
	GL_DRAW_BUFFER0_EXT = 34853,
	GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 35077,
	GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 35187,
	GL_DRAW_BUFFER1_ARB = 34854,
	GL_ALL_COMPLETED_NV = 34034,
	GL_OR_REVERSE = 5387,
	GL_LOCAL_CONSTANT_VALUE_EXT = 34796,
	GL_DRAW_BUFFER2_ARB = 34855,
	GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 36638,
	GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 33313,
	GL_UNSIGNED_SHORT_8_8_APPLE = 34234,
	GL_SHADER_STORAGE_BARRIER_BIT = 8192,
	GL_DRAW_BUFFER2_EXT = 34855,
	GL_DRAW_BUFFER3_ARB = 34856,
	GL_MAX_VERTEX_ATTRIBS_ARB = 34921,
	GL_DEBUG_SOURCE_WINDOW_SYSTEM = 33351,
	GL_CLIENT_ALL_ATTRIB_BITS = 4294967295,
	GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 4,
	GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 35967,
	GL_ALPHA16_EXT = 32830,
	GL_DRAW_BUFFER6_ARB = 34859,
	GL_STENCIL_BACK_WRITEMASK = 36005,
	GL_IMAGE_BINDING_ACCESS_EXT = 36670,
	GL_RESAMPLE_AVERAGE_OML = 35208,
	GL_DRAW_BUFFER7_ARB = 34860,
	GL_DRAW_BUFFER7_EXT = 34860,
	GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090,
	GL_CON_6_ATI = 35143,
	GL_EYE_POINT_SGIS = 33268,
	GL_CUBE_MAP_ZP_SGIX = 33602,
	GL_FLOAT_RG16_NV = 34950,
	GL_DRAW_BUFFER12_EXT = 34865,
	GL_TEXTURE_SWIZZLE_A = 36421,
	GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 36051,
	GL_DRAW_BUFFER10 = 34863,
	GL_DRAW_BUFFER10_ARB = 34863,
	GL_CLAMP_FRAGMENT_COLOR = 35099,
	GL_COLOR3_BIT_PGI = 65536,
	GL_DRAW_BUFFER11_EXT = 34864,
	GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 34804,
	GL_DRAW_BUFFER12_ARB = 34865,
	GL_OR = 5383,
	GL_DRAW_BUFFER12_ATI = 34865,
	GL_LINEAR_DETAIL_COLOR_SGIS = 32921,
	GL_CON_4_ATI = 35141,
	GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 37080,
	GL_DRAW_BUFFER9 = 34862,
	GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 36464,
	GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716,
	GL_DRAW_BUFFER14_ATI = 34867,
	GL_ONE_MINUS_DST_ALPHA = 773,
	GL_RENDERBUFFER_GREEN_SIZE = 36177,
	GL_DUAL_ALPHA16_SGIS = 33043,
	GL_CLIP_DISTANCE1_APPLE = 12289,
	GL_BLEND_EQUATION_ALPHA_EXT = 34877,
	GL_RELATIVE_RECT_NV = 247,
	GL_LINEAR_CLIPMAP_LINEAR_SGIX = 33136,
	GL_MATRIX_INDEX_ARRAY_ARB = 34884,
	GL_TEXTURE3_SGIS = 33738,
	GL_TEXTURE_VIEW_MIN_LEVEL = 33499,
	GL_DEPTH_BOUNDS_EXT = 34961,
	GL_ACTIVE_SUBROUTINE_UNIFORMS = 36326,
	GL_TEXTURE_ALPHA_SIZE_EXT = 32863,
	GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 33632,
	GL_TEXTURE_COMPARE_MODE_EXT = 34892,
	GL_VARIANT_ARRAY_POINTER_EXT = 34793,
	GL_TRANSFORM_FEEDBACK_BUFFER = 35982,
	GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 36676,
	GL_CON_29_ATI = 35166,
	GL_DOT_PRODUCT_TEXTURE_1D_NV = 34908,
	GL_TEXTURE27 = 34011,
	GL_RESAMPLE_REPLICATE_OML = 35206,
	GL_DEBUG_TYPE_POP_GROUP = 33386,
	GL_DEPENDENT_AR_TEXTURE_2D_NV = 34537,
	GL_FOG_PATCHY_FACTOR_SGIX = 33646,
	GL_RESET_NOTIFICATION_STRATEGY = 33366,
	GL_LUMINANCE_ALPHA = 6410,
	GL_LUMINANCE16_ALPHA16_EXT = 32840,
	GL_SLUMINANCE8_ALPHA8_NV = 35909,
	GL_INVERSE_TRANSPOSE_NV = 34349,
	GL_COMMAND_BARRIER_BIT_EXT = 64,
	GL_OUTPUT_VERTEX_EXT = 34714,
	GL_MAX_EVAL_ORDER = 3376,
	GL_PIXEL_COUNT_NV = 34918,
	GL_CULL_VERTEX_EYE_POSITION_EXT = 33195,
	GL_COLOR_INDEX = 6400,
	GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 34924,
	GL_UNPACK_SKIP_IMAGES_EXT = 32877,
	GL_INDEX_ARRAY = 32887,
	GL_MATRIX11_ARB = 35019,
	GL_COMPRESSED_RGB8_ETC2 = 37492,
	GL_TANGENT_ARRAY_STRIDE_EXT = 33855,
	GL_MAX_TEXTURE_IMAGE_UNITS = 34930,
	GL_DEPTH_COMPONENT16_ARB = 33189,
	GL_MAX_DEPTH_TEXTURE_SAMPLES = 37135,
	GL_MAX_RECTANGLE_TEXTURE_SIZE = 34040,
	GL_DYNAMIC_DRAW_ARB = 35048,
	GL_FLOAT_RGBA_NV = 34947,
	GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 37131,
	GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 35899,
	GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968,
	GL_ALPHA32F_EXT = 34838,
	GL_RGBA4_DXT5_S3TC = 33701,
	GL_FRAGMENT_ALPHA_MODULATE_IMG = 35848,
	GL_PROGRAM_BINARY_LENGTH = 34625,
	GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 35885,
	GL_DATA_BUFFER_AMD = 37201,
	GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 34544,
	GL_PIXEL_MAP_I_TO_I_SIZE = 3248,
	GL_SAMPLE_ALPHA_TO_ONE = 32927,
	GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 33782,
	GL_INT_SAMPLER_CUBE_EXT = 36300,
	GL_MODELVIEW = 5888,
	GL_RG16UI = 33338,
	GL_MATRIX1_ARB = 35009,
	GL_COMPRESSED_SIGNED_RG11_EAC = 37491,
	GL_GENERATE_MIPMAP_HINT_SGIS = 33170,
	GL_INTERNALFORMAT_DEPTH_TYPE = 33404,
	GL_MATRIX5_ARB = 35013,
	GL_4PASS_2_EXT = 32934,
	GL_MATRIX6_ARB = 35014,
	GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953,
	GL_TEXTURE_COMPARE_OPERATOR_SGIX = 33179,
	GL_PROXY_TEXTURE_CUBE_MAP = 34075,
	GL_VIEW_CLASS_S3TC_DXT1_RGBA = 33485,
	GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955,
	GL_MATRIX20_ARB = 35028,
	GL_MATRIX23_ARB = 35031,
	GL_MATRIX24_ARB = 35032,
	GL_PROGRAM_PIPELINE_BINDING = 33370,
	GL_OFFSET_TEXTURE_SCALE_NV = 34530,
	GL_BUFFER_MAP_POINTER_OES = 35005,
	GL_DUAL_INTENSITY4_SGIS = 33048,
	GL_BLUE_SCALE = 3354,
	GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 32907,
	GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684,
	GL_PACK_SKIP_IMAGES = 32875,
	GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 33158,
	GL_COLOR_INDEX1_EXT = 32994,
	GL_DYNAMIC_READ_ARB = 35049,
	GL_SLICE_ACCUM_SUN = 34252,
	GL_COLOR_INDEX4_EXT = 32996,
	GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 7,
	GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079,
	GL_GREEN_NV = 6404,
	GL_BUMP_ENVMAP_ATI = 34683,
	GL_CLIP_DISTANCE4_APPLE = 12292,
	GL_SOFTLIGHT_KHR = 37532,
	GL_TEXTURE_INTERNAL_FORMAT = 4099,
	GL_MINMAX_FORMAT_EXT = 32815,
	GL_POINT_SIZE_MIN_EXT = 33062,
	GL_T2F_N3F_V3F = 10795,
	GL_POINT_SIZE_MIN_SGIS = 33062,
	GL_ALPHA = 6406,
	GL_SUBSAMPLE_DISTANCE_AMD = 34879,
	GL_IMAGE_CLASS_1_X_16 = 33470,
	GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 35080,
	GL_COLOR_BUFFER_BIT7_QCOM = 128,
	GL_MODELVIEW17_ARB = 34609,
	GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 33779,
	GL_TRACE_OPERATIONS_BIT_MESA = 1,
	GL_PROXY_HISTOGRAM_EXT = 32805,
	GL_REG_10_ATI = 35115,
	GL_FORCE_BLUE_TO_ONE_NV = 34912,
	GL_ALPHA_MAX_SGIX = 33569,
	GL_ALPHA_TEST_REF_QCOM = 3010,
	GL_REG_22_ATI = 35127,
	GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869,
	GL_LOSE_CONTEXT_ON_RESET_ARB = 33362,
	GL_COLOR_BUFFER_BIT0_QCOM = 1,
	GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048,
	GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 34766,
	GL_MATRIX19_ARB = 35027,
	GL_UNSIGNED_BYTE_3_3_2 = 32818,
	GL_FRAMEBUFFER_COMPLETE = 36053,
	GL_PIXEL_TILE_HEIGHT_SGIX = 33089,
	GL_PATH_PROJECTION_MATRIX_NV = 2983,
	GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 36646,
	GL_IMAGE_CLASS_4_X_8 = 33471,
	GL_CON_14_ATI = 35151,
	GL_CON_15_ATI = 35152,
	GL_LINE_WIDTH_GRANULARITY = 2851,
	GL_SCALE_BY_TWO_NV = 34110,
	GL_CON_18_ATI = 35155,
	GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 36264,
	GL_TEXTURE_TARGET_QCOM = 35802,
	GL_CON_23_ATI = 35160,
	GL_T2F_IUI_V3F_EXT = 33202,
	GL_SCALEBIAS_HINT_SGIX = 33570,
	GL_R16F = 33325,
	GL_CONVOLUTION_FORMAT_EXT = 32791,
	GL_INDEX_ARRAY_EXT = 32887,
	GL_TEXTURE_COORD_NV = 35961,
	GL_DUAL_LUMINANCE_ALPHA8_SGIS = 33053,
	GL_ADD_ATI = 35171,
	GL_RGBA32F = 34836,
	GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 37116,
	GL_INTENSITY_FLOAT32_ATI = 34839,
	GL_MAP2_TEXTURE_COORD_1_NURBS_SGIX = 33257,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 34069,
	GL_MULTISAMPLE_BIT = 536870912,
	GL_MAX_CONVOLUTION_WIDTH = 32794,
	GL_NORMAL_ARRAY_POINTER_EXT = 32911,
	GL_MULTISAMPLE_SGIS = 32925,
	GL_VIEW_CLASS_16_BITS = 33482,
	GL_PROXY_TEXTURE_3D_EXT = 32880,
	GL_DRAW_BUFFER8_ATI = 34861,
	GL_MAP1_TEXTURE_COORD_1_NURBS_SGIX = 33248,
	GL_RGB5 = 32848,
	GL_PROGRAM_STRING_NV = 34344,
	GL_QUERY_RESULT = 34918,
	GL_IMAGE_CLASS_2_X_32 = 33466,
	GL_PROXY_TEXTURE_CUBE_MAP_EXT = 34075,
	GL_COEFF = 2560,
	GL_IMAGE_CLASS_4_X_16 = 33468,
	GL_VIEW_CLASS_96_BITS = 33477,
	GL_COLOR_BUFFER_BIT2_QCOM = 4,
	GL_VIEW_CLASS_64_BITS = 33478,
	GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 34069,
	GL_TEXTURE0_ARB = 33984,
	GL_GEOMETRY_OUTPUT_TYPE = 35096,
	GL_TRIANGLE_STRIP = 5,
	GL_MAP2_BINORMAL_EXT = 33863,
	GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 33454,
	GL_CUBE_MAP_XN_SGIX = 33604,
	GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637,
	GL_TEXTURE1_SGIS = 33736,
	GL_MAX_COMPUTE_WORK_GROUP_COUNT = 37310,
	GL_FRAGMENT_LIGHT1_SGIX = 33805,
	GL_FRAGMENT_LIGHT2_SGIX = 33806,
	GL_LUMINANCE6_ALPHA2_EXT = 32836,
	GL_FRAGMENT_LIGHT4_SGIX = 33808
} GL_LUA_ENUMS;
]]
function gl.Initialize(get_proc_address)
	if type(get_proc_address) == "function" then
		gl.GetProcAddress = get_proc_address
	end
	do
		local func = gl.GetProcAddress("glTexImage3DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexImage3DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TexEnvf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantBooleanvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean *)', func)
			if ok then
				gl.GetVariantBooleanvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIuivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.SamplerParameterIuivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginConditionalRender")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BeginConditionalRender = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMapfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangeIndexedfNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.DepthRangeIndexedfNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexAttribArray")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DisableVertexAttribArray = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenQueriesARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenQueriesARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribBindingEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayVertexAttribBindingEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.PushName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfvSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PointParameterfvSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFixedvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetFixedvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVideoCaptureStreamParameterdvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.VideoCaptureStreamParameterdvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilClearTagEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint)', func)
			if ok then
				gl.StencilClearTagEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.Lightxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixFrustumEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MatrixFrustumEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTranslated")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Translated = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayIntegervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexArrayIntegervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexAttribArrayARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DisableVertexAttribArrayARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1iATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.VertexStream1iATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferStorage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizeiptr, const void *, GLbitfield)', func)
			if ok then
				gl.NamedBufferStorage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackVaryingsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLchar *const*, GL_LUA_ENUMS)', func)
			if ok then
				gl.TransformFeedbackVaryingsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapNamedBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint, GLintptr, GLsizeiptr, GLbitfield)', func)
			if ok then
				gl.MapNamedBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopMatrix")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopMatrix = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFixedv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetFixedv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramPipelineiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramPipelineiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfCounterInfoINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *)', func)
			if ok then
				gl.GetPerfCounterInfoINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Color4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstanced")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.DrawArraysInstanced = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.ClipPlanexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexBlendARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.VertexBlendARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFeedbackBufferxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.FeedbackBufferxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glQueryMatrixxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLbitfield (*)(GLfixed *, GLint *)', func)
			if ok then
				gl.QueryMatrixxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathStencilFuncNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLuint)', func)
			if ok then
				gl.PathStencilFuncNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetClipPlanexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetClipPlanexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourceName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetProgramResourceName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindMultiTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindMultiTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenSymbolsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.GenSymbolsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureLevelsAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GLsizei)', func)
			if ok then
				gl.CopyTextureLevelsAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteProgramsARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteProgramsARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientActiveTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ClientActiveTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ColorTableSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Vertex3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexCoordP1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferStorage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizeiptr, const void *, GLbitfield)', func)
			if ok then
				gl.BufferStorage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCheckFramebufferStatus")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CheckFramebufferStatus = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLhalfNV)', func)
			if ok then
				gl.VertexAttrib1hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2x3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.MultiTexCoord4hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.SecondaryColorP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.Fogfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveAttribARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)', func)
			if ok then
				gl.GetActiveAttribARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribDivisorANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribDivisorANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.End = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PointParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexBindingDivisor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexBindingDivisor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureFaceARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GL_LUA_ENUMS)', func)
			if ok then
				gl.FramebufferTextureFaceARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFeedbackBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.FeedbackBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Vertex2bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeImageHandleResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64, GL_LUA_ENUMS)', func)
			if ok then
				gl.MakeImageHandleResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble)', func)
			if ok then
				gl.VertexAttrib1dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TextureParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableClientStateIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableClientStateIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat *)', func)
			if ok then
				gl.GetUniformfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Vertex2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformSubroutineuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLuint *)', func)
			if ok then
				gl.GetUniformSubroutineuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendBarrierNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.BlendBarrierNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLogicOp")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.LogicOp = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderOp2EXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ShaderOp2EXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedFramebufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedFramebufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectPtrLabelKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const void *, GLsizei, const GLchar *)', func)
			if ok then
				gl.ObjectPtrLabelKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathParameteriNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PathParameteriNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4x2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage3DMultisampleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureImage3DMultisampleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoadfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixLoadfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.RasterPos3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.ConvolutionParameterxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3x4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindProgramPipelineEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindProgramPipelineEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstanced")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.DrawElementsInstanced = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble, GLdouble)', func)
			if ok then
				gl.Uniform2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectLabelKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetObjectLabelKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetProgramParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glValidateProgramARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB)', func)
			if ok then
				gl.ValidateProgramARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStartTilingQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint, GLbitfield)', func)
			if ok then
				gl.StartTilingQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayBindVertexBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLintptr, GLsizei)', func)
			if ok then
				gl.VertexArrayBindVertexBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformHandleui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64)', func)
			if ok then
				gl.UniformHandleui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedBufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearNamedBufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.ConvolutionParameterfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjecti64vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetQueryObjecti64vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr, GLbitfield)', func)
			if ok then
				gl.MapBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glArrayElementEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.ArrayElementEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.SecondaryColor3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.TextureStorage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexsv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Indexsv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Normal3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedTextureImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, void *)', func)
			if ok then
				gl.GetCompressedTextureImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.TexParameterx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathGlyphRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *, GLbitfield, GLuint, GLsizei, GL_LUA_ENUMS, GLuint, GLfloat)', func)
			if ok then
				gl.PathGlyphRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMapParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenProgramsARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenProgramsARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderBinary")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.ShaderBinary = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.NormalFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorCounterInfoAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetPerfMonitorCounterInfoAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyImageSubDataNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyImageSubDataNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTextureFaceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint, GL_LUA_ENUMS)', func)
			if ok then
				gl.NamedFramebufferTextureFaceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrustumxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.FrustumxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnPixelMapfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Color3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.RasterPos2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFramebuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenFramebuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsVertexAttribEnabledAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.IsVertexAttribEnabledAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameter4fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramEnvParameter4fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegerui64i_vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint64EXT *)', func)
			if ok then
				gl.GetIntegerui64i_vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRecti")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Recti = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerParameterfNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.CombinerParameterfNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLintptr, GLsizeiptr, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearNamedBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizeiptr, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.BufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1dATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble)', func)
			if ok then
				gl.VertexStream1dATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexShaderEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindVertexShaderEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Vertex3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameterI4uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, const GLuint *)', func)
			if ok then
				gl.NamedProgramLocalParameterI4uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.CombinerParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor4ubVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLubyte *, const GLfloat *)', func)
			if ok then
				gl.TexCoord2fColor4ubVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.DepthRangedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.IndexPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathMetricRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetPathMetricRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInstrumentsBufferSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLint *)', func)
			if ok then
				gl.InstrumentsBufferSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramLocalParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLuint *)', func)
			if ok then
				gl.GetNamedProgramLocalParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint)', func)
			if ok then
				gl.Uniform1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteRenderbuffersOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteRenderbuffersOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.RasterPos4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMemoryBarrierEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.MemoryBarrierEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TextureParameterf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.RasterPos2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.ClipPlanex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.Uniform1ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenVertexArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenVertexArrays = func
			gl.GenVertexArray = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapBufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.MapBufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.LightModelfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniformARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)', func)
			if ok then
				gl.GetActiveUniformARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleMaski")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLbitfield)', func)
			if ok then
				gl.SampleMaski = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.TexCoord2hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameterI4iNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramEnvParameterI4iNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteTransformFeedbacks")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteTransformFeedbacks = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseInstanceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLuint)', func)
			if ok then
				gl.DrawElementsInstancedBaseInstanceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentCoverageColorNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.FragmentCoverageColorNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionFilterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetConvolutionFilterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilOpSeparate")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.StencilOpSeparate = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPolygonStipple")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte *)', func)
			if ok then
				gl.GetPolygonStipple = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs4ubvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *)', func)
			if ok then
				gl.VertexAttribs4ubvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLint, GLint, const GLfloat *)', func)
			if ok then
				gl.Map1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAreTexturesResidentEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLsizei, const GLuint *, GLboolean *)', func)
			if ok then
				gl.AreTexturesResidentEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPatchParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PatchParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexEnvxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexEnvxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrimitiveRestartNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PrimitiveRestartNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenRenderbuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenRenderbuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixIndexPointerOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.MatrixIndexPointerOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInteger64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetInteger64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformi64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint64EXT *)', func)
			if ok then
				gl.GetUniformi64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTbufferMask3DFX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.TbufferMask3DFX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathStencilDepthOffsetNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.PathStencilDepthOffsetNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.FogCoordPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTexture3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstanceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLint, GLuint)', func)
			if ok then
				gl.DrawElementsInstancedBaseVertexBaseInstanceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateShaderProgramv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GLsizei, const GLchar *const*)', func)
			if ok then
				gl.CreateShaderProgramv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsVariantEnabledEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.IsVariantEnabledEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirectEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawArraysIndirectEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureLayerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTextureLayerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindProgramNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindProgramNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetImageHandleARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint, GLint, GLboolean, GLint, GL_LUA_ENUMS)', func)
			if ok then
				gl.GetImageHandleARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Color4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage3DMultisampleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureStorage3DMultisampleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDiscardFramebufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLenum *)', func)
			if ok then
				gl.DiscardFramebufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformHandleui64vARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64 *)', func)
			if ok then
				gl.ProgramUniformHandleui64vARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedRenderbufferParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedRenderbufferParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Color4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3usEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort, GLushort, GLushort)', func)
			if ok then
				gl.SecondaryColor3usEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetSamplerParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsProgramARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsProgramARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendColorxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.BlendColorxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribArrayObjectfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVertexAttribArrayObjectfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLhalfNV *)', func)
			if ok then
				gl.MultiTexCoord1hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCombinerOutputParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetCombinerOutputParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTextureParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint *)', func)
			if ok then
				gl.GetUniformuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramNamedParameter4dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramNamedParameter4dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndConditionalRenderNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndConditionalRenderNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteTexturesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteTexturesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLint, GLint, const GLdouble *)', func)
			if ok then
				gl.Map1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPointervKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetPointervKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientActiveTextureARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ClientActiveTextureARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedRenderbufferStorageMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.NamedRenderbufferStorageMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSeparableFilter2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, const void *)', func)
			if ok then
				gl.SeparableFilter2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthBoundsdNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.DepthBoundsdNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribIFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.VertexAttribIFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTransformFeedbackInstanced")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei)', func)
			if ok then
				gl.DrawTransformFeedbackInstanced = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetHistogram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGeni")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TexGeni = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DrawTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.EvalCoord2xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, void *)', func)
			if ok then
				gl.GetCompressedTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramNamedParameter4fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramNamedParameter4fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProvokingVertexEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ProvokingVertexEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTextureNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.DrawTextureNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glElementPointerAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ElementPointerAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetHistogramParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResolveDepthValuesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ResolveDepthValuesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.BindBufferRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFramebuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenFramebuffers = func
			gl.GenFramebuffer = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeformSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.DeformSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureLayerARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTextureLayerARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos2dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribPointervARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVertexAttribPointervARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.Vertex2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.RasterPos2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetConvolutionParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.DrawTexiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.ColorPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferParameteri64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetNamedBufferParameteri64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnSeparableFilter")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *, GLsizei, void *, void *)', func)
			if ok then
				gl.GetnSeparableFilter = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetRenderbufferParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetRenderbufferParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexBumpParameterivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexBumpParameterivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos2dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearColorxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.ClearColorxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord4fColor4fNormal3fVertex4fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs1svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLshort *)', func)
			if ok then
				gl.VertexAttribs1svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteRenderbuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteRenderbuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameterI4ivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLint *)', func)
			if ok then
				gl.ProgramEnvParameterI4ivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonOffset")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.PolygonOffset = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameters4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.NamedProgramLocalParameters4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3ubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.Color3ubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.MultiTexCoordP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrioritizeTexturesxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *, const GLfixed *)', func)
			if ok then
				gl.PrioritizeTexturesxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalPoint1")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.EvalPoint1 = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.FramebufferRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDoublei_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetDoublei_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribLdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVertexAttribLdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapNamedBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.UnmapNamedBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenTextures = func
			gl.GenTexture = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFloati_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetFloati_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBooleanIndexedvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLboolean *)', func)
			if ok then
				gl.GetBooleanIndexedvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirectCountARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLintptr, GLintptr, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawElementsIndirectCountARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureNormalEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.TextureNormalEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultisamplefvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetMultisamplefvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferDataARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizeiptrARB, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.BufferDataARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMult3x2fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixMult3x2fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverFillPathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.CoverFillPathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CreateShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelMapxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLfixed *)', func)
			if ok then
				gl.GetPixelMapxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEGLImageTargetRenderbufferStorageOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLeglImageOES)', func)
			if ok then
				gl.EGLImageTargetRenderbufferStorageOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenQueries")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenQueries = func
			gl.GenQuerie = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glArrayObjectATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLuint, GLuint)', func)
			if ok then
				gl.ArrayObjectATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.LightxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPauseTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PauseTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelTransformParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetPixelTransformParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindImageTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.BindImageTextures = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr, GLbitfield)', func)
			if ok then
				gl.MapBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultMatrixd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.MultMatrixd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParametersI4uivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramLocalParametersI4uivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.Fogi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenfOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TexGenfOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiColor4fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *, const GLsizei *, GLsizei)', func)
			if ok then
				gl.MultiDrawElementArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLint *)', func)
			if ok then
				gl.GetnUniformiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.LightModelxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayFogCoordOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayFogCoordOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.Materialfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMaskIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.ColorMaskIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginFragmentShaderATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.BeginFragmentShaderATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.MaterialxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelMapusv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLushort *)', func)
			if ok then
				gl.PixelMapusv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetImageHandleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint, GLint, GLboolean, GLint, GL_LUA_ENUMS)', func)
			if ok then
				gl.GetImageHandleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexPageCommitmentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexPageCommitmentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.IndexxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexEnvfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexEnvfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearStencil")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.ClearStencil = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3us")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort, GLushort, GLushort)', func)
			if ok then
				gl.SecondaryColor3us = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInsertComponentEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.InsertComponentEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenTransformFeedbacksNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenTransformFeedbacksNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.Uniform2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectLabel")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.ObjectLabel = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3svATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.NormalStream3svATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteQueriesARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteQueriesARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearTexSubImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearTexSubImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteNamedStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLchar *)', func)
			if ok then
				gl.DeleteNamedStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourceLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.GetProgramResourceLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Normal3bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenProgramPipelines")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenProgramPipelines = func
			gl.GenProgramPipeline = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Vertex4hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackVaryings")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLchar *const*, GL_LUA_ENUMS)', func)
			if ok then
				gl.TransformFeedbackVaryings = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCombinerInputParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetCombinerInputParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEGLImageTargetTexture2DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLeglImageOES)', func)
			if ok then
				gl.EGLImageTargetTexture2DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPolygonStipple")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLubyte *)', func)
			if ok then
				gl.GetnPolygonStipple = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.ProgramUniform4ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonStipple")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.PolygonStipple = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorIndexedvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.ScissorIndexedvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageControlKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const GLuint *, GLboolean)', func)
			if ok then
				gl.DebugMessageControlKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord1dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramBinaryOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.ProgramBinaryOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLubyte *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiColor4ubVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteQueries")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteQueries = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.RasterPos2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBooleani_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLboolean *)', func)
			if ok then
				gl.GetBooleani_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmaxParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMinmaxParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ub")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.Color4ub = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetOcclusionQueryivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetOcclusionQueryivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedStringivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLchar *, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedStringivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetImageTransformParameterivHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetImageTransformParameterivHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, const void *)', func)
			if ok then
				gl.VariantPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipControl")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.ClipControl = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLenum *)', func)
			if ok then
				gl.DrawBuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.TextureStorage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAccumxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.AccumxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint64EXT)', func)
			if ok then
				gl.ProgramUniform1i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexAttribP4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexAttribP1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointSizex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.PointSizex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtTexObjectStateOverrideiQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ExtTexObjectStateOverrideiQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Color3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TexParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameterivSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetColorTableParameterivSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathSubCoordsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.PathSubCoordsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLint *)', func)
			if ok then
				gl.GetnUniformivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.DrawElementsInstancedARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.SecondaryColor3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetOcclusionQueryuivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetOcclusionQueryuivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginTransformFeedbackEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BeginTransformFeedbackEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVideoCaptureStreamBufferNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLintptrARB)', func)
			if ok then
				gl.BindVideoCaptureStreamBufferNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorGroupStringAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetPerfMonitorGroupStringAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyImageSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyImageSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrustumfOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.FrustumfOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexPointervINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, const void **)', func)
			if ok then
				gl.VertexPointervINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSharpenTexFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLfloat *)', func)
			if ok then
				gl.SharpenTexFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribBinding")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribBinding = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFragDataLocationIndexed")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, const GLchar *)', func)
			if ok then
				gl.BindFragDataLocationIndexed = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapNamedBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.MapNamedBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedProgramivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverageOperationNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CoverageOperationNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteLists")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei)', func)
			if ok then
				gl.DeleteLists = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameter4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.ProgramLocalParameter4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.Indexi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribIFormatEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexArrayVertexAttribIFormatEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginConditionalRenderNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BeginConditionalRenderNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathTexGenivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetPathTexGenivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4fVertex4fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord4fVertex4fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.EvalCoord2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSeparableFilter2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, const void *)', func)
			if ok then
				gl.SeparableFilter2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadPaletteFromModelViewMatrixOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.LoadPaletteFromModelViewMatrixOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveProgramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ActiveProgramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramStringNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLubyte *)', func)
			if ok then
				gl.GetProgramStringNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.VertexAttrib4hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableClientStateIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableClientStateIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUseShaderProgramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.UseShaderProgramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragDataLocationEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetFragDataLocationEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageCallbackARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLDEBUGPROCARB, const void *)', func)
			if ok then
				gl.DebugMessageCallbackARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexAttribAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.DisableVertexAttribAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScaled")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Scaled = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResizeBuffersMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ResizeBuffersMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirectCountARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLintptr, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawArraysIndirectCountARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearAccumxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.ClearAccumxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PointParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPassThroughxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.PassThroughxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelMapx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const GLfixed *)', func)
			if ok then
				gl.PixelMapx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReferencePlaneSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.ReferencePlaneSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1ui64ARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT)', func)
			if ok then
				gl.VertexAttribL1ui64ARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nbv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttrib4Nbv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.TexCoord2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLfloat *)', func)
			if ok then
				gl.FogFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlane")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.ClipPlane = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedFramebufferParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedFramebufferParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Vertex4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTextureHandleResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint64)', func)
			if ok then
				gl.IsTextureHandleResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.RasterPos4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, const void *)', func)
			if ok then
				gl.NormalPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Color4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferPointervOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetBufferPointervOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexCoordP2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushVertexArrayRangeAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, void *)', func)
			if ok then
				gl.FlushVertexArrayRangeAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSelectBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.SelectBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3bvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.SecondaryColor3bvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.PointParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetHistogramParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexCoordP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnablediEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsEnablediEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementArrayATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.DrawElementArrayATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFencesAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenFencesAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI1uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexLevelParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexLevelParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentMaterialiSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.FragmentMaterialiSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferAddressRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint64EXT, GLsizeiptr)', func)
			if ok then
				gl.BufferAddressRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopGroupMarkerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopGroupMarkerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.Indexd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.PathParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGenivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexGenivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRects")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Rects = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x3fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2x3fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbacki64_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint64 *)', func)
			if ok then
				gl.GetTransformFeedbacki64_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexArrayiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegeri_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetIntegeri_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ActiveTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.RasterPos4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.Vertex2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.FogCoordfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVideoCaptureStreamParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.VideoCaptureStreamParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetProgramBinarySourceQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLchar *, GLint *)', func)
			if ok then
				gl.ExtGetProgramBinarySourceQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferPointervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetNamedBufferPointervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFunci")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFunci = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ProgramParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenNamesAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint *)', func)
			if ok then
				gl.GenNamesAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelZoomxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.PixelZoomxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Vertex3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinishTextureSUNX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.FinishTextureSUNX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendBarrierKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.BlendBarrierKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Vertex2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGendv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetTexGendv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsBaseVertexEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei, const GLint *)', func)
			if ok then
				gl.MultiDrawElementsBaseVertexEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferStorageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizeiptr, const void *, GLbitfield)', func)
			if ok then
				gl.NamedBufferStorageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLineWidthxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.LineWidthxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragDataIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetFragDataIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFunciOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFunciOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndPerfQueryINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EndPerfQueryINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameterI4uiNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramEnvParameterI4uiNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.FogCoordfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.DepthRangef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactorusSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort)', func)
			if ok then
				gl.GlobalAlphaFactorusSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3sEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Binormal3sEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPresentFrameKeyedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT, GLuint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLuint, GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.PresentFrameKeyedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoad3x2fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixLoad3x2fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushStaticDataIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.FlushStaticDataIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenSamplers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenSamplers = func
			gl.GenSampler = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.TexParameterxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLbyte, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.MultiTexCoord4bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTextureARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat)', func)
			if ok then
				gl.Uniform1fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMinmax")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLboolean)', func)
			if ok then
				gl.Minmax = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlagFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei)', func)
			if ok then
				gl.EdgeFlagFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.NamedFramebufferParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelMapfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPixelMapfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Color3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexLevelParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexLevelParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferDrawBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLenum *)', func)
			if ok then
				gl.NamedFramebufferDrawBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformHandleui64vARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64 *)', func)
			if ok then
				gl.UniformHandleui64vARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetTextureParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageInsertKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLsizei, const GLchar *)', func)
			if ok then
				gl.DebugMessageInsertKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawRangeElementsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteNamesAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLuint *)', func)
			if ok then
				gl.DeleteNamesAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorP4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.ColorP4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ClipPlanef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalPointervINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void **)', func)
			if ok then
				gl.NormalPointervINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsNamedStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLint, const GLchar *)', func)
			if ok then
				gl.IsNamedStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionFilter2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ConvolutionFilter2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAreProgramsResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLsizei, const GLuint *, GLboolean *)', func)
			if ok then
				gl.AreProgramsResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4x2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenBuffersARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenBuffersARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferBase")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.BindBufferBase = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetClipPlane")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetClipPlane = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage2DMultisampleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureImage2DMultisampleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3x4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPathParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetBufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFramebuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteFramebuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.NamedFramebufferTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2fColor3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClampColorARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.ClampColorARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactoruiSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.GlobalAlphaFactoruiSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathTexGenfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPathTexGenfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapNamedBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.MapNamedBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Vertex4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexsvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.DrawTexsvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoCaptureStreamivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVideoCaptureStreamivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinishFenceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.FinishFenceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.MultiTexCoord1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFramebufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindFramebufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.MapGrid2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompileShaderIncludeARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLchar *const*, const GLint *)', func)
			if ok then
				gl.CompileShaderIncludeARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMaterialxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetMaterialxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexCoordP1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramBinary")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLenum *, void *)', func)
			if ok then
				gl.GetProgramBinary = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstancedARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.DrawArraysInstancedARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const GLuint *)', func)
			if ok then
				gl.ClearBufferuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteSync")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync)', func)
			if ok then
				gl.DeleteSync = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nsv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib4Nsv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PointParameterfSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorPointervINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, const void **)', func)
			if ok then
				gl.ColorPointervINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Tangent3fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramLocalParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetNamedProgramLocalParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateVertexArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateVertexArrays = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathDashArrayNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.PathDashArrayNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniformsiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetActiveUniformsiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlitNamedFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlitNamedFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameterI4uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.NamedProgramLocalParameterI4uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushDebugGroupKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.PushDebugGroupKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glElementPointerATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ElementPointerATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.RasterPos3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInterpolatePathsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLfloat)', func)
			if ok then
				gl.InterpolatePathsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStopInstrumentsSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.StopInstrumentsSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *)', func)
			if ok then
				gl.Color3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndList")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndList = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Color3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetProgramStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoaddEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MatrixLoaddEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactordSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.GlobalAlphaFactordSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Normal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageInsert")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLsizei, const GLchar *)', func)
			if ok then
				gl.DebugMessageInsert = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideouivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetVideouivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Color4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLintptr, GLsizeiptr, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformBlockIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetUniformBlockIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat)', func)
			if ok then
				gl.Uniform1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPassThrough")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.PassThrough = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib3dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nub")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.VertexAttrib4Nub = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint64EXT *)', func)
			if ok then
				gl.VertexAttribL1i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.LightModelx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glQueryObjectParameteruiAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.QueryObjectParameteruiAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirectBindlessCountNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, GLsizei, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.MultiDrawElementsIndirectBindlessCountNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.Uniform1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.Uniform3ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.VertexFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparate")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparate = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultTransposeMatrixxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.MultTransposeMatrixxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3usv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLushort *)', func)
			if ok then
				gl.SecondaryColor3usv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDoubleIndexedvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetDoubleIndexedvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.SecondaryColor3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Vertex3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform2uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glQueryCounter")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.QueryCounter = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.SecondaryColor3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathParameterfNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PathParameterfNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTestFenceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.TestFenceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndQueryEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.EndQueryEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementArrayATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei)', func)
			if ok then
				gl.DrawRangeElementArrayATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferRenderbuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.NamedFramebufferRenderbuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTexture3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.MultiTexCoordP4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetHistogramParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragDataLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetFragDataLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramNamedParameter4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, const GLfloat *)', func)
			if ok then
				gl.ProgramNamedParameter4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlag")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLboolean)', func)
			if ok then
				gl.EdgeFlag = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameteriNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PointParameteriNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapBufferARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.UnmapBufferARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.SecondaryColor3uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadnPixelsKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.ReadnPixelsKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnTexImageARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnTexImageARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ubVertex2fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *, const GLfloat *)', func)
			if ok then
				gl.Color4ubVertex2fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramParameterdvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetProgramParameterdvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapControlPointsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *)', func)
			if ok then
				gl.MapControlPointsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMaski")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.ColorMaski = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.TexCoord1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramEnvParameterIivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetProgramEnvParameterIivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveShaderProgramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.ActiveShaderProgramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort)', func)
			if ok then
				gl.VertexAttrib1sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUMapSurfacesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLvdpauSurfaceNV *)', func)
			if ok then
				gl.VDPAUMapSurfacesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedCopyBufferSubDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.NamedCopyBufferSubDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSynciv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync, GL_LUA_ENUMS, GLsizei, GLsizei *, GLint *)', func)
			if ok then
				gl.GetSynciv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationIndexedAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationIndexedAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparatei")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparatei = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramNamedParameterdvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, GLdouble *)', func)
			if ok then
				gl.GetProgramNamedParameterdvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLuint *)', func)
			if ok then
				gl.CreateTextures = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexEnvxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexEnvxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilOpSeparateATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.StencilOpSeparateATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnabledIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsEnabledIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteTextures = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantIntegervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVariantIntegervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TextureRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameters4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramParameters4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompileShaderARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB)', func)
			if ok then
				gl.CompileShaderARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NbvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttrib4NbvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramInfoLog")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetProgramInfoLog = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos2fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3sEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.SecondaryColor3sEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorFragmentOp2ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ColorFragmentOp2ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRotatex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Rotatex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameter4dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramEnvParameter4dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadTransposeMatrixd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.LoadTransposeMatrixd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetConvolutionParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindProgramPipeline")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindProgramPipeline = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfQueryIdByNameINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLchar *, GLuint *)', func)
			if ok then
				gl.GetPerfQueryIdByNameINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameterfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.MultiTexParameterfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFinalCombinerInputParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetFinalCombinerInputParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSubroutineUniformLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.GetSubroutineUniformLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble, GLdouble)', func)
			if ok then
				gl.MapGrid1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramStageiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramStageiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushMappedBufferRangeAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.FlushMappedBufferRangeAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransformParameterfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PixelTransformParameterfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.TexCoord1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PointParameterfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathTexGenNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, const GLfloat *)', func)
			if ok then
				gl.PathTexGenNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttrib4bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushClientAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.PushClientAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableParameterfvSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ColorTableParameterfvSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferDrawBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.FramebufferDrawBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyBufferSubDataNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLintptr, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.CopyBufferSubDataNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexMask")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.IndexMask = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.ProgramStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.RasterPos4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4b")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Color4b = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenRenderbuffersOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenRenderbuffersOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiColor3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetAttribLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetAttribLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexImageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetMultiTexImageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetImageTransformParameterfvHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetImageTransformParameterfvHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveSubroutineName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetActiveSubroutineName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGeniOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TexGeniOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsProgramPipeline")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsProgramPipeline = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateINGR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateINGR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointSizexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.PointSizexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLocalConstantFloatvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetLocalConstantFloatvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glImageTransformParameterfHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.ImageTransformParameterfHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.MultiTexCoord1i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLocalConstantIntegervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetLocalConstantIntegervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.Indexf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFenceSyncAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLsync (*)(GL_LUA_ENUMS, GLbitfield)', func)
			if ok then
				gl.FenceSyncAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribPointerNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribPointerNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedFramebufferuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, const GLuint *)', func)
			if ok then
				gl.ClearNamedFramebufferuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginOcclusionQueryNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BeginOcclusionQueryNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferPageCommitmentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, GLboolean)', func)
			if ok then
				gl.NamedBufferPageCommitmentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexArrayAttribEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.EnableVertexArrayAttribEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayPointeri_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVertexArrayPointeri_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage2DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexStorage2DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.Materialiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepthdNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.ClearDepthdNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint)', func)
			if ok then
				gl.Uniform1uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniformName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetActiveUniformName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLint *)', func)
			if ok then
				gl.GetnUniformivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3usv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLushort *)', func)
			if ok then
				gl.Color3usv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexArrayAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.DisableVertexArrayAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathSpacingNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLuint, GLfloat, GLfloat, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPathSpacingNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleMaskEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampf, GLboolean)', func)
			if ok then
				gl.SampleMaskEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed)', func)
			if ok then
				gl.Map2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei)', func)
			if ok then
				gl.DrawElementArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapTexture2DINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint)', func)
			if ok then
				gl.UnmapTexture2DINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndFragmentShaderATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndFragmentShaderATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionFilter1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ConvolutionFilter1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetShaderInfoLog")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetShaderInfoLog = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAsyncMarkerSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.AsyncMarkerSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientActiveVertexStreamATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ClientActiveVertexStreamATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLintptr)', func)
			if ok then
				gl.BindBufferOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedBufferDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearNamedBufferDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexParameterIivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClear")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.Clear = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathCoordsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.PathCoordsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateIndexedAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateIndexedAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.SecondaryColor3iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetFenceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.SetFenceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glOrthox")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Orthox = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.SamplerParameterIivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGeniEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.MultiTexGeniEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glArrayElement")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.ArrayElement = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLint, GLsizei)', func)
			if ok then
				gl.DrawRangeElementArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixScalefEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MatrixScalefEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.BindBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIuivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexParameterIuivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Vertex3bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmaxParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMinmaxParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveTextureARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ActiveTextureARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1ui64vARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint64EXT *)', func)
			if ok then
				gl.VertexAttribL1ui64vARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glListBase")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ListBase = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDispatchComputeGroupSizeARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.DispatchComputeGroupSizeARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Normal3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramStringEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetNamedProgramStringEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramVertexLimitNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ProgramVertexLimitNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameter4fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.NamedProgramLocalParameter4fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureSamplerHandleARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint, GLuint)', func)
			if ok then
				gl.GetTextureSamplerHandleARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord2fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsQueryEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsQueryEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathCommandsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.PathCommandsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformHandleui64ARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64)', func)
			if ok then
				gl.UniformHandleui64ARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDebugMessageLog")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetDebugMessageLog = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexCoordP2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint)', func)
			if ok then
				gl.MapObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSharpenTexFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetSharpenTexFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixTranslatefEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MatrixTranslatefEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.TexCoord2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixPopEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.MatrixPopEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Binormal3fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ub")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.SecondaryColor3ub = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedMultiTexImageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, void *)', func)
			if ok then
				gl.GetCompressedMultiTexImageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3bEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Binormal3bEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepth")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.ClearDepth = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.Scissor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramBufferParametersIivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramBufferParametersIivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TextureParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MapParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.MultiTexCoordP1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetRenderbufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetRenderbufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalMesh1")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint)', func)
			if ok then
				gl.EvalMesh1 = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramInterfaceiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramInterfaceiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapNamedBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.UnmapNamedBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryBufferObjecti64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLintptr)', func)
			if ok then
				gl.GetQueryBufferObjecti64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMapiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetShaderSource")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetShaderSource = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrioritizeTexturesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *, const GLclampf *)', func)
			if ok then
				gl.PrioritizeTexturesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsSampler")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsSampler = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedRenderbufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedRenderbufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4x")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Color4x = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrameTerminatorGREMEDY")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.FrameTerminatorGREMEDY = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAttachShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.AttachShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTestObjectAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TestObjectAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.RasterPos2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorArrayv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.ScissorArrayv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilThenCoverStrokePathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.StencilThenCoverStrokePathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureLevelParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureLevelParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.ColorP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilStrokePathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GLint, GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.StencilStrokePathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorP4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.ColorP4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.ConvolutionParameterf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *, const GLsizei *, GLsizei)', func)
			if ok then
				gl.MultiDrawArrays = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDetachObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLhandleARB)', func)
			if ok then
				gl.DetachObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourceLocationIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.GetProgramResourceLocationIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameterI4ivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLint *)', func)
			if ok then
				gl.ProgramLocalParameterI4ivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.IndexFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.DrawArraysInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderOp3EXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ShaderOp3EXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparatei")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparatei = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCullFace")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CullFace = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.MultiTexCoord3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniformBlockiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetActiveUniformBlockiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixIndexPointerARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.MatrixIndexPointerARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsBaseVertex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawElementsBaseVertex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteProgramPipelines")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteProgramPipelines = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.MultiTexCoord1xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4ubvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttrib4ubvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexAttribFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble)', func)
			if ok then
				gl.VertexAttrib1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparate")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparate = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform4uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbackVaryingEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)', func)
			if ok then
				gl.GetTransformFeedbackVaryingEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetQueryObjectuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSpriteParameterfSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.SpriteParameterfSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightPathsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *, const GLfloat *)', func)
			if ok then
				gl.WeightPathsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.LightxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.LightModelxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Color3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransformParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PixelTransformParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsQuery")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsQuery = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferPageCommitmentEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, GLboolean)', func)
			if ok then
				gl.NamedBufferPageCommitmentEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectPtrLabel")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const void *, GLsizei, const GLchar *)', func)
			if ok then
				gl.ObjectPtrLabel = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenProgramPipelinesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenProgramPipelinesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDetailTexFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetDetailTexFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Color3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilFunc")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLuint)', func)
			if ok then
				gl.StencilFunc = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultTransposeMatrixfARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.MultTransposeMatrixfARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.PointParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFragmentShaderATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DeleteFragmentShaderATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexLevelParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMultiTexLevelParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.EvalCoord1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFogFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat *)', func)
			if ok then
				gl.GetFogFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.FogCoordfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPresentFrameDualFillNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT, GLuint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.PresentFrameDualFillNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapAttribParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMapAttribParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTranslatex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Translatex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderSource")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLchar *const*, const GLint *)', func)
			if ok then
				gl.ShaderSource = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribDivisorEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayVertexAttribDivisorEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFirstPerfQueryIdINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *)', func)
			if ok then
				gl.GetFirstPerfQueryIdINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glValidateProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ValidateProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateRenderbuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateRenderbuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.NamedFramebufferTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordhvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.FogCoordhvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultisamplefv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetMultisamplefv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4usv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttrib4usv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawMeshArraysSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.DrawMeshArraysSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetString")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'const GLubyte *(*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.GetString = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMinSampleShadingOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.MinSampleShadingOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ReplacementCodeuiSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Normal3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribParameteriAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.VertexAttribParameteriAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInternalformati64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLint64 *)', func)
			if ok then
				gl.GetInternalformati64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.Uniform2ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAttachObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLhandleARB)', func)
			if ok then
				gl.AttachObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMapParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint64EXT)', func)
			if ok then
				gl.VertexAttribL1i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.FogCoordd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexCoordP4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectui64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64 *)', func)
			if ok then
				gl.GetQueryObjectui64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.SamplerParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexCoordP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Vertex4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoCaptureStreamdvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVideoCaptureStreamdvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.TexCoord2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsBaseVertexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei, const GLint *)', func)
			if ok then
				gl.MultiDrawElementsBaseVertexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.UnmapBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Color4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFramebuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteFramebuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformHandleui64ARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64)', func)
			if ok then
				gl.ProgramUniformHandleui64ARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorGroupsAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint *, GLsizei, GLuint *)', func)
			if ok then
				gl.GetPerfMonitorGroupsAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage3DMultisampleCoverageNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexImage3DMultisampleCoverageNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginPerfMonitorAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BeginPerfMonitorAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadTransposeMatrixfARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.LoadTransposeMatrixfARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateMipmapEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.GenerateMipmapEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushGroupMarkerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLchar *)', func)
			if ok then
				gl.PushGroupMarkerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseVertexEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLint)', func)
			if ok then
				gl.DrawElementsInstancedBaseVertexEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayAttribIFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexArrayAttribIFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFragDataLocationEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, const GLchar *)', func)
			if ok then
				gl.BindFragDataLocationEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glApplyTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ApplyTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexCoordP1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTextureUnitParameterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BindTextureUnitParameterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.UnmapObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Color3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathColorGenivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetPathColorGenivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMultTransposedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MatrixMultTransposedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiModeDrawArraysIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint)', func)
			if ok then
				gl.MultiModeDrawArraysIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindParameterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BindParameterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinalCombinerInputNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.FinalCombinerInputNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribLi64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint64EXT *)', func)
			if ok then
				gl.GetVertexAttribLi64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glValidateProgramPipeline")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ValidateProgramPipeline = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.TexCoord1iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.LightModelf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayElementBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayElementBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1sATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort)', func)
			if ok then
				gl.VertexStream1sATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathMetricsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield, GLsizei, GL_LUA_ENUMS, const void *, GLuint, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetPathMetricsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2x3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.SecondaryColor3fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3x2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.TexCoord1xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.Uniform1i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleCoveragexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampx, GLboolean)', func)
			if ok then
				gl.SampleCoveragexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenOcclusionQueriesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenOcclusionQueriesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCoverageModulationTableNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLfloat *)', func)
			if ok then
				gl.GetCoverageModulationTableNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLhalfNV *)', func)
			if ok then
				gl.MultiTexCoord2hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint64EXT *)', func)
			if ok then
				gl.VertexAttribL3i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteBuffersARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteBuffersARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBitmap")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *)', func)
			if ok then
				gl.Bitmap = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.CopyPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverageModulationNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CoverageModulationNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathLengthNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLfloat (*)(GLuint, GLsizei, GLsizei)', func)
			if ok then
				gl.GetPathLengthNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ColorTableParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWriteMaskEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.WriteMaskEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4svMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos4svMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4sMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.WindowPos4sMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4ivMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos4ivMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4iMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.WindowPos4iMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4fvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos4fvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4fMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos4fMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.Disable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4dvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos4dvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos4dMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos4dMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedTextureImageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, void *)', func)
			if ok then
				gl.GetCompressedTextureImageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3svMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos3svMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFunciARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFunciARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos3svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramBufferParametersfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramBufferParametersfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PointParameterfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3sMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.WindowPos3sMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.WindowPos3sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProvokingVertex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ProvokingVertex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.WindowPos3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3ivMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos3ivMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteVertexShaderEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DeleteVertexShaderEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenfvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TexGenfvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPollInstrumentsSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLint *)', func)
			if ok then
				gl.PollInstrumentsSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetGraphicsResetStatusEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)()', func)
			if ok then
				gl.GetGraphicsResetStatusEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos3ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3x")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Normal3x = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3iMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.WindowPos3iMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirectAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawArraysIndirectAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.WindowPos3iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.WindowPos3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3fvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos3fvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PointParameterf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos3fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeNamedBufferResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.MakeNamedBufferResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3fMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos3fMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos3fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3dvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos3dvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos3dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexAttribArrayARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EnableVertexAttribArrayARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoorddv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.FogCoorddv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3dMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos3dMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos3dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos3dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2svMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos2svMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.WindowPos2svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const GLchar *, GLint, const GLchar *)', func)
			if ok then
				gl.NamedStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2sMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.WindowPos2sMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Vertex2hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform2iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLsizei)', func)
			if ok then
				gl.VertexAttribFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.WindowPos2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.RasterPos3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2ivMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos2ivMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.WindowPos2ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.TexCoord2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2iMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.WindowPos2iMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.WindowPos2iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapusvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLushort *)', func)
			if ok then
				gl.GetnPixelMapusvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.WindowPos2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointSize")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.PointSize = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2fvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos2fvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Vertex3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos2fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryObjectiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.WindowPos2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInteger64vAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetInteger64vAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2fMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos2fMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.IndexxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexEnviv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexEnviv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameter4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, const GLdouble *)', func)
			if ok then
				gl.NamedProgramLocalParameter4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateSamplers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateSamplers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiModeDrawElementsIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLenum *, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei, GLint)', func)
			if ok then
				gl.MultiModeDrawElementsIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.NamedFramebufferParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferParameterivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetBufferParameterivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientWaitSyncAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLsync, GLbitfield, GLuint64)', func)
			if ok then
				gl.ClientWaitSyncAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteVertexArraysOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteVertexArraysOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.Color4fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.CopyTexImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ConvolutionParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveVaryingNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.ActiveVaryingNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3b")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Normal3b = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightusvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLushort *)', func)
			if ok then
				gl.WeightusvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLuint *)', func)
			if ok then
				gl.WeightuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTranslatedShaderSourceANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetTranslatedShaderSourceANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeusvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLushort *)', func)
			if ok then
				gl.ReplacementCodeusvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightsvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLshort *)', func)
			if ok then
				gl.WeightsvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndTransformFeedbackEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndTransformFeedbackEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribLui64vARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetVertexAttribLui64vARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexAttribArray")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EnableVertexAttribArray = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLint *)', func)
			if ok then
				gl.WeightivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLfloat *)', func)
			if ok then
				gl.WeightfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4fVertex4fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord4fVertex4fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLdouble *)', func)
			if ok then
				gl.WeightdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetAttachedShaders")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLuint *)', func)
			if ok then
				gl.GetAttachedShaders = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.Color4ubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyConvolutionFilter2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyConvolutionFilter2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord3fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.RasterPos3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Binormal3iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.SecondaryColor3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightPointerOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.WeightPointerOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3sATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.NormalStream3sATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLightxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetLightxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.MultiTexCoordP2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightPointerARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.WeightPointerARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWaitSyncAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync, GLbitfield, GLuint64)', func)
			if ok then
				gl.WaitSyncAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsVertexArray")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsVertexArray = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportIndexedfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.ViewportIndexedfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportIndexedfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.ViewportIndexedfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportIndexedfNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ViewportIndexedfNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.TexCoord4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportArrayvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ViewportArrayvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4uivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttrib4uivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlagPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLsizei, const GLboolean *)', func)
			if ok then
				gl.EdgeFlagPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ColorTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteVertexArraysAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteVertexArraysAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MapParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableClientStateiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableClientStateiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetSamplerParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplePatternEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.SamplePatternEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVideoCaptureNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLuint, GLuint *, GLuint64EXT *)', func)
			if ok then
				gl.VideoCaptureNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangeIndexed")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.DepthRangeIndexed = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexWeighthvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.VertexWeighthvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexWeighthNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV)', func)
			if ok then
				gl.VertexWeighthNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Color3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexWeightfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.VertexWeightfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexWeightPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexWeightPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4svATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.VertexStream4svATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4sATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexStream4sATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4ivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.VertexStream4ivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4iATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexStream4iATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMult3x3fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixMult3x3fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4fvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.VertexStream4fvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4fATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexStream4fATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLdouble *)', func)
			if ok then
				gl.GetnUniformdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4dvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.VertexStream4dvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream4dATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexStream4dATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.MultiTexCoord1fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3svATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.VertexStream3svATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3sATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexStream3sATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3ivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.VertexStream3ivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3iATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexStream3iATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateShaderProgramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.CreateShaderProgramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.FogCoordPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapBufferARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.MapBufferARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TextureBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedFramebufferAttachmentParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedFramebufferAttachmentParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexBlendEnvfATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.VertexBlendEnvfATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3fvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.VertexStream3fvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3fATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexStream3fATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3dvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.VertexStream3dvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream3dATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexStream3dATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.FogCoordPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2svATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.VertexStream2svATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelStorex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.PixelStorex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.Materialf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2sATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort)', func)
			if ok then
				gl.VertexStream2sATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2ivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.VertexStream2ivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2iATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint)', func)
			if ok then
				gl.VertexStream2iATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindAttribLocationARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLuint, const GLcharARB *)', func)
			if ok then
				gl.BindAttribLocationARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2fvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.VertexStream2fvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2fATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexStream2fATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetClipPlanef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetClipPlanef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnablei")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.Enablei = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeletePerfMonitorsAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.DeletePerfMonitorsAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtIsProgramBinaryQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.ExtIsProgramBinaryQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2dvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.VertexStream2dvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream2dATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexStream2dATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1svATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.VertexStream1svATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1ivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.VertexStream1ivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsOcclusionQueryNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsOcclusionQueryNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.Uniform4ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.SecondaryColorPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1fvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.VertexStream1fvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Color4xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrontFace")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.FrontFace = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1fATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.VertexStream1fATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.TexEnvx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapVertexAttrib1fAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)', func)
			if ok then
				gl.MapVertexAttrib1fAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, GLsizei, const void *)', func)
			if ok then
				gl.VertexPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameters4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramEnvParameters4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearColor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ClearColor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.PointParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Binormal3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs3svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLshort *)', func)
			if ok then
				gl.VertexAttribs3svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetHistogramParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameterI4uivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLuint *)', func)
			if ok then
				gl.ProgramLocalParameterI4uivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoi64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint64EXT *)', func)
			if ok then
				gl.GetVideoi64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.VertexP2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGend")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLdouble)', func)
			if ok then
				gl.TexGend = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexP2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexBlendEnviATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.VertexBlendEnviATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindImageTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GLboolean, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BindImageTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderMode")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.RenderMode = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs4svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLshort *)', func)
			if ok then
				gl.VertexAttribs4svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttribs4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.VertexAttribs4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearAccum")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ClearAccum = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorSubTableEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ColorSubTableEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs4dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.VertexAttribs4dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.VertexP4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttribs3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs3fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.VertexAttribs3fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyColorTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyColorTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs3dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.VertexAttribs3dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs2svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLshort *)', func)
			if ok then
				gl.VertexAttribs2svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs2hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttribs2hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.DrawTexxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDriverControlsQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint *, GLsizei, GLuint *)', func)
			if ok then
				gl.GetDriverControlsQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs2fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.VertexAttribs2fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei)', func)
			if ok then
				gl.DrawArraysEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs2dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.VertexAttribs2dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform2fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs1fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.VertexAttribs1fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs1dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.VertexAttribs1dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribPointerARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribPointerARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginQueryIndexed")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.BeginQueryIndexed = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Tangent3dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMultfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixMultfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnConvolutionFilter")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnConvolutionFilter = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, const GLuint *)', func)
			if ok then
				gl.VertexAttribP4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, const GLuint *)', func)
			if ok then
				gl.VertexAttribP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTessellationFactorAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.TessellationFactorAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexAttribP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferSubDataARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptrARB, GLsizeiptrARB, void *)', func)
			if ok then
				gl.GetBufferSubDataARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, const GLuint *)', func)
			if ok then
				gl.VertexAttribP2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexAttribP2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribP1uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean, const GLuint *)', func)
			if ok then
				gl.VertexAttribP1uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribLPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribLPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribLPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribLPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribLFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.VertexAttribLFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribLFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexAttribLFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathMemoryGlyphIndexArrayNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLuint, GL_LUA_ENUMS, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat)', func)
			if ok then
				gl.PathMemoryGlyphIndexArrayNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint64EXT *)', func)
			if ok then
				gl.VertexAttribL4ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.VertexAttribL4ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint64EXT *)', func)
			if ok then
				gl.VertexAttribL4i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.DepthRangex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLintptr, GLsizei)', func)
			if ok then
				gl.BindVertexBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiColor3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.VertexAttribL4i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfQueryInfoINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *)', func)
			if ok then
				gl.GetPerfQueryInfoINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyImageSubDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyImageSubDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL4dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI1uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint64EXT *)', func)
			if ok then
				gl.VertexAttribL3ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.VertexAttribL3ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverageModulationTableNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLfloat *)', func)
			if ok then
				gl.CoverageModulationTableNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.Vertex2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.VertexAttribL3i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirectEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawElementsIndirectEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTexGenSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.PixelTexGenSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL3dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribPointerv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVertexAttribPointerv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLightfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetLightfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint64EXT *)', func)
			if ok then
				gl.VertexAttribL2ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.VertexAttribL2ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint64EXT *)', func)
			if ok then
				gl.VertexAttribL2i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.VertexAttribL2i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL2dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL2dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttribL2dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffersARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLenum *)', func)
			if ok then
				gl.DrawBuffersARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint64EXT *)', func)
			if ok then
				gl.VertexAttribL1ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferSubDataARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptrARB, GLsizeiptrARB, const void *)', func)
			if ok then
				gl.BufferSubDataARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL1dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLuint *)', func)
			if ok then
				gl.GetnPixelMapuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadMatrixd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.LoadMatrixd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage2DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage2DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribDivisorEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribDivisorEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenAsyncMarkersSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLsizei)', func)
			if ok then
				gl.GenAsyncMarkersSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble)', func)
			if ok then
				gl.VertexAttribL1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribIPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribIPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribIPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexAttribIPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathCoverDepthFuncNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.PathCoverDepthFuncNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribIFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexAttribIFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferSubDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, void *)', func)
			if ok then
				gl.GetNamedBufferSubDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadnPixelsARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.ReadnPixelsARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4usvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttribI4usvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4usv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttribI4usv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUpdateObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.UpdateObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI4uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageControlARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const GLuint *, GLboolean)', func)
			if ok then
				gl.DebugMessageControlARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.RectxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCombinerOutputParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetCombinerOutputParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI4uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramNamedParameter4dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, const GLdouble *)', func)
			if ok then
				gl.ProgramNamedParameter4dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4ubvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttribI4ubvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4ubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttribI4ubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4svEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttribI4svEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleCoverage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLboolean)', func)
			if ok then
				gl.SampleCoverage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttribI4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI4ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLockArraysEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei)', func)
			if ok then
				gl.LockArraysEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI4iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.MultiTexCoord1xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4bvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttribI4bvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI4bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttribI4bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI3uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMultTranspose3x3fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixMultTranspose3x3fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectParameterivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetObjectParameterivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI3uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.SamplerParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMask")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.ColorMask = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramNamedParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLubyte *, GLfloat *)', func)
			if ok then
				gl.GetProgramNamedParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI3ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexFilterFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexFilterFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI3iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI3iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI2uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttribI2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI2uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.RasterPos4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribI2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactorfSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.GlobalAlphaFactorfSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI2ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCallLists")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.CallLists = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI2iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint)', func)
			if ok then
				gl.VertexAttribI2iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord3iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI1iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint)', func)
			if ok then
				gl.VertexAttribI1iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint)', func)
			if ok then
				gl.VertexAttribI1i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegerui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetIntegerui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glOrthoxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.OrthoxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableDriverControlQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EnableDriverControlQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixOrthoEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MatrixOrthoEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribDivisorNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribDivisorNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble)', func)
			if ok then
				gl.VertexAttribL1dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribDivisorARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribDivisorARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DeleteProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribDivisor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribDivisor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.Uniform3ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferSampleLocationsfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.FramebufferSampleLocationsfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4usvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttrib4usvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMinmax")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnMinmax = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUseProgramStagesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLbitfield, GLuint)', func)
			if ok then
				gl.UseProgramStagesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportArrayv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ViewportArrayv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.ColorFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultMatrixxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.MultMatrixxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffersNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLenum *)', func)
			if ok then
				gl.DrawBuffersNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttrib4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4ubvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttrib4ubvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateProgramObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLhandleARB (*)()', func)
			if ok then
				gl.CreateProgramObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4ubNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.VertexAttrib4ubNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib4svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.EvalCoord1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableiNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableiNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib4svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTexture1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.NamedFramebufferTexture1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveStencilFaceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ActiveStencilFaceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.MultiTexCoord1iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib4sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGeniv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexGeniv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultTransposeMatrixdARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.MultTransposeMatrixdARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttrib4ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferPointervARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetBufferPointervARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei)', func)
			if ok then
				gl.MultiDrawElementsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord2ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttrib4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage3DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage3DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTexture")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindTexture = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelMapuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetPixelMapuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.TexCoord2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Tangent3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib4fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLint, GLfloat *)', func)
			if ok then
				gl.GetUniformfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib4dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib4dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyConvolutionFilter2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyConvolutionFilter2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribPointervNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVertexAttribPointervNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib4dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParametersI4uivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramEnvParametersI4uivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateTexSubImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.InvalidateTexSubImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib4dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4bvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VertexAttrib4bvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NusvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttrib4NusvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetFragmentShaderConstantATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.SetFragmentShaderConstantATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nusv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VertexAttrib4Nusv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttrib4NuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedBufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateBufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.InvalidateBufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VertexAttrib4Nuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLineWidthx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.LineWidthx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.TexCoord1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Nubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttrib4Nubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetHistogramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalPoint2")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.EvalPoint2 = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetColorTableParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniformBlockName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetActiveUniformBlockName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NsvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib4NsvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUSurfaceAccessNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLvdpauSurfaceNV, GL_LUA_ENUMS)', func)
			if ok then
				gl.VDPAUSurfaceAccessNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnCompressedTexImageARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, void *)', func)
			if ok then
				gl.GetnCompressedTexImageARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureMaterialEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.TextureMaterialEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttrib4NivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverageMaskNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLboolean)', func)
			if ok then
				gl.CoverageMaskNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4Niv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttrib4Niv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementsBaseVertex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawRangeElementsBaseVertex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlitFramebufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlitFramebufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib3svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib3svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3sNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib3sNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMinSampleShading")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.MinSampleShading = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDispatchCompute")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.DispatchCompute = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Tangent3iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib3sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib2sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttrib3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetColorTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.PushAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.TexEnvxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadProgramNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLubyte *)', func)
			if ok then
				gl.LoadProgramNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.VertexAttrib3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeTextureHandleResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeTextureHandleResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib3fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexBufferARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapVertexAttrib2dAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)', func)
			if ok then
				gl.MapVertexAttrib2dAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsFramebufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsFramebufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib3fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMemoryBarrier")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.MemoryBarrier = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform1dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib3fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib3dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTexGenParameterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BindTexGenParameterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib3dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyColorSubTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyColorSubTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib3dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNewList")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.NewList = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib2svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetColorTableParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureView")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.TextureView = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageControl")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const GLuint *, GLboolean)', func)
			if ok then
				gl.DebugMessageControl = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib2svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage4DSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage4DSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCombinerStageParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetCombinerStageParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2sNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib2sNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.TexCoord2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture2DMultisampleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLsizei)', func)
			if ok then
				gl.FramebufferTexture2DMultisampleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttrib2hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetQueryObjectuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.VertexAttrib2hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib2fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib2fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexArrayEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.EnableVertexArrayEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib2fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib2fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib2dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadInstrumentsSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.ReadInstrumentsSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib2dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib2dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameters4dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramParameters4dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib2dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureSamplerHandleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint, GLuint)', func)
			if ok then
				gl.GetTextureSamplerHandleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Vertex3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble, GLdouble)', func)
			if ok then
				gl.VertexAttrib2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1svNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib1svNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilThenCoverStrokePathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GLint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.StencilThenCoverStrokePathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint)', func)
			if ok then
				gl.ProgramUniform1ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFunc")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.AlphaFunc = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindAttribLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, const GLchar *)', func)
			if ok then
				gl.BindAttribLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginQueryEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BeginQueryEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib1svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferParameterui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetNamedBufferParameterui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCurrentPaletteMatrixARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.CurrentPaletteMatrixARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VertexAttrib1sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmaxParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMinmaxParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttrib1hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib1fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib1fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VertexAttrib1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat)', func)
			if ok then
				gl.VertexAttrib1fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat)', func)
			if ok then
				gl.VertexAttrib1fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbacki_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetTransformFeedbacki_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetTexParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.TexCoord4hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayVertexOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexLevelParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexLevelParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRotatef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Rotatef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *)', func)
			if ok then
				gl.VertexArrayVertexBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *)', func)
			if ok then
				gl.GetActiveAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLintptr, GLsizei)', func)
			if ok then
				gl.VertexArrayVertexBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformBufferSizeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, GLint)', func)
			if ok then
				gl.GetUniformBufferSizeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayVertexAttribOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteAsyncMarkersSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei)', func)
			if ok then
				gl.DeleteAsyncMarkersSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribLOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayVertexAttribLOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribLFormatEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexArrayVertexAttribLFormatEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribIOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayVertexAttribIOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexAttribFormatEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexArrayVertexAttribFormatEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSubroutineIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.GetSubroutineIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.TexCoord3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFuncQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLclampf)', func)
			if ok then
				gl.AlphaFuncQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const void *)', func)
			if ok then
				gl.VertexArrayRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.RasterPos4xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayRangeAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, void *)', func)
			if ok then
				gl.VertexArrayRangeAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayParameteriAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.VertexArrayParameteriAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayNormalOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayNormalOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Color3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenRenderbuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenRenderbuffers = func
			gl.GenRenderbuffer = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayEdgeFlagOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayEdgeFlagOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayColorOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayColorOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameter4dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLdouble *)', func)
			if ok then
				gl.ProgramParameter4dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexGenfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMultiTexGenfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathCommandsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLubyte *)', func)
			if ok then
				gl.GetPathCommandsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.RasterPos2i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectsv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *, const GLshort *)', func)
			if ok then
				gl.Rectsv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayAttribLFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexArrayAttribLFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayAttribFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLuint)', func)
			if ok then
				gl.VertexArrayAttribFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseInstance")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLuint)', func)
			if ok then
				gl.DrawElementsInstancedBaseInstance = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayAttribBinding")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayAttribBinding = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Vertex4xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Vertex4xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Vertex4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Vertex4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoad3x3fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixLoad3x3fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Vertex4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetVertexAttribIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformLocationARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLhandleARB, const GLcharARB *)', func)
			if ok then
				gl.GetUniformLocationARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexParameterxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFramebuffersOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteFramebuffersOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageInsertAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.DebugMessageInsertAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLhalfNV *)', func)
			if ok then
				gl.MultiTexCoord4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameterI4iNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramLocalParameterI4iNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat)', func)
			if ok then
				gl.ProgramUniform1fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Vertex4bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixRotatedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MatrixRotatedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ubvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.SecondaryColor3ubvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFramebufferParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFramebufferParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsImageHandleResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint64)', func)
			if ok then
				gl.IsImageHandleResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Vertex3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.Vertex3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Vertex3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactoriSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.GlobalAlphaFactoriSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonOffsetClampEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.PolygonOffsetClampEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonMode")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.PolygonMode = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Vertex3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateNamedFramebufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.InvalidateNamedFramebufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Vertex3bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.Color3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Vertex2xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.Vertex2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsRenderbufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsRenderbufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerStageParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.CombinerStageParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.TexCoord4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glOrtho")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Ortho = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLightxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetLightxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Vertex2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultMatrixf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.MultMatrixf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantusvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLushort *)', func)
			if ok then
				gl.VariantusvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLuint *)', func)
			if ok then
				gl.VariantuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantubvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VariantubvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantsvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLshort *)', func)
			if ok then
				gl.VariantsvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameter4fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramLocalParameter4fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VariantivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform1uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopDebugGroupKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopDebugGroupKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixTranslatedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MatrixTranslatedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFunc")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFunc = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLfloat *)', func)
			if ok then
				gl.VariantfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizeiptr, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.NamedBufferDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantdvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VariantdvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantbvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLbyte *)', func)
			if ok then
				gl.VariantbvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVariantArrayObjectATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLuint, GLuint)', func)
			if ok then
				gl.VariantArrayObjectATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtractComponentEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ExtractComponentEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferPageCommitmentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr, GLboolean)', func)
			if ok then
				gl.BufferPageCommitmentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMultiTexParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBuffersBase")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.BindBuffersBase = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glValidateProgramPipelineEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.ValidateProgramPipelineEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.SamplerParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Color3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUUnregisterSurfaceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLvdpauSurfaceNV)', func)
			if ok then
				gl.VDPAUUnregisterSurfaceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3usvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLushort *)', func)
			if ok then
				gl.SecondaryColor3usvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAURegisterVideoSurfaceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLvdpauSurfaceNV (*)(const void *, GL_LUA_ENUMS, GLsizei, const GLuint *)', func)
			if ok then
				gl.VDPAURegisterVideoSurfaceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAURegisterOutputSurfaceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLvdpauSurfaceNV (*)(const void *, GL_LUA_ENUMS, GLsizei, const GLuint *)', func)
			if ok then
				gl.VDPAURegisterOutputSurfaceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGendv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.TexGendv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmaxParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMinmaxParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TextureParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexMaterialEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.IndexMaterialEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.TexCoordPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeletePathsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei)', func)
			if ok then
				gl.DeletePathsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLocalConstantBooleanvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean *)', func)
			if ok then
				gl.GetLocalConstantBooleanvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUGetSurfaceivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLvdpauSurfaceNV, GL_LUA_ENUMS, GLsizei, GLsizei *, GLint *)', func)
			if ok then
				gl.VDPAUGetSurfaceivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUFiniNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.VDPAUFiniNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUseProgramStages")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLbitfield, GLuint)', func)
			if ok then
				gl.UseProgramStages = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUseProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.UseProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyColorSubTableEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyColorSubTableEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnmapBufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.UnmapBufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUnlockArraysEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.UnlockArraysEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.Uniformui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64EXT)', func)
			if ok then
				gl.Uniformui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformSubroutinesuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLuint *)', func)
			if ok then
				gl.UniformSubroutinesuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x3fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4x3fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4x3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix4x3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x2fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4x2fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4x2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4x2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix4x2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransformParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.PixelTransformParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableClientState")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.EnableClientState = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyNamedBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.CopyNamedBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVariantClientStateEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EnableVariantClientStateEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyConvolutionFilter1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyConvolutionFilter1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNextPerfQueryIdINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint *)', func)
			if ok then
				gl.GetNextPerfQueryIdINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte)', func)
			if ok then
				gl.TexCoord1bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTranslatexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.TranslatexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3x4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedFramebufferAttachmentParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3x4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix3x4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushVertexArrayRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.FlushVertexArrayRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x2fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3x2fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3x2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix3x2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixScaledEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MatrixScaledEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.SecondaryColor3ubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix3fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.NamedFramebufferRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2x4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix2x4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2x3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix2x3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateTransformFeedbacks")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateTransformFeedbacks = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetTexturesQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetTexturesQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoadTransposefEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixLoadTransposefEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMultTransposefEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixMultTransposefEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformHandleui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64 *)', func)
			if ok then
				gl.UniformHandleui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TextureBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform2fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform4uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform4uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.Uniform4ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsNameAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsNameAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnConvolutionFilterARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnConvolutionFilterARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint)', func)
			if ok then
				gl.CopyTextureImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage2DMultisampleCoverageNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexImage2DMultisampleCoverageNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform4ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMaterialfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMaterialfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform4iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *)', func)
			if ok then
				gl.SecondaryColor3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableClientState")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.DisableClientState = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.Uniform4i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.Uniform4i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyMultiTexImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint)', func)
			if ok then
				gl.CopyMultiTexImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClampColor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.ClampColor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform4fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.Uniform4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Uniform4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform1iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform3uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform3uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *)', func)
			if ok then
				gl.Color4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPointerIndexedvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, void **)', func)
			if ok then
				gl.GetPointerIndexedvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform3ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCheckFramebufferStatusEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CheckFramebufferStatusEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2x4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.UniformMatrix2x4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.SecondaryColorP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform3iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsFramebufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsFramebufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryObjectivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.Uniform3i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetColorTableEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.Uniform3i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Color3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr, void *)', func)
			if ok then
				gl.GetBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndQuery")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.EndQuery = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform3fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathSubCommandsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.PathSubCommandsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage2DMultisampleCoverageNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureImage2DMultisampleCoverageNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadBufferIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ReadBufferIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFramebufferAttachmentParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFramebufferAttachmentParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform3fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInvariantFloatvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetInvariantFloatvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorIndexedv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.ScissorIndexedv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetArrayObjectfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetArrayObjectfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble)', func)
			if ok then
				gl.Uniform1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformfvKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnUniformfvKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform2uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.Uniform2ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSeparableFilter")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *, void *, void *)', func)
			if ok then
				gl.GetSeparableFilter = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform2ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform2iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenVertexShadersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint)', func)
			if ok then
				gl.GenVertexShadersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort)', func)
			if ok then
				gl.WindowPos2sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.Uniform2i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.Uniform2i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribs1hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLhalfNV *)', func)
			if ok then
				gl.VertexAttribs1hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInfoLogARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *)', func)
			if ok then
				gl.GetInfoLogARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirect")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawArraysIndirect = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Color4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform2fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewport")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.Viewport = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInteger64i_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint64 *)', func)
			if ok then
				gl.GetInteger64i_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint64EXT)', func)
			if ok then
				gl.Uniform1ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform1ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetTexLevelParameterivQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.ExtGetTexLevelParameterivQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.Uniform1iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.Uniform1iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BeginTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateProgramPipelines")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateProgramPipelines = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint)', func)
			if ok then
				gl.Uniform1i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsPointInFillPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint, GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.IsPointInFillPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushClientAttribDefaultEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.PushClientAttribDefaultEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAccum")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.Accum = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.SecondaryColorPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenVertexArraysAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenVertexArraysAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformHandleui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64 *)', func)
			if ok then
				gl.ProgramUniformHandleui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Uniform3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.InvalidateBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTranslatef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Translatef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayPointervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVertexArrayPointervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackVaryingsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLint *, GL_LUA_ENUMS)', func)
			if ok then
				gl.TransformFeedbackVaryingsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetUniformLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackStreamAttribsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLint *, GLsizei, const GLint *, GL_LUA_ENUMS)', func)
			if ok then
				gl.TransformFeedbackStreamAttribsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TransformFeedbackBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3dATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.NormalStream3dATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackAttribsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLint *, GL_LUA_ENUMS)', func)
			if ok then
				gl.TransformFeedbackAttribsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTrackMatrixNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.TrackMatrixNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribArrayObjectATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLboolean, GLsizei, GLuint, GLuint)', func)
			if ok then
				gl.VertexAttribArrayObjectATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPatchParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PatchParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2x4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrustumf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Frustumf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathGlyphIndexArrayNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLuint, GL_LUA_ENUMS, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat)', func)
			if ok then
				gl.PathGlyphIndexArrayNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIglooInterfaceSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.IglooInterfaceSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorageSparseAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield)', func)
			if ok then
				gl.TextureStorageSparseAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage3DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureStorage3DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.TextureStorage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.TextureStorage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerParameteriNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.CombinerParameteriNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInternalformatSampleivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLint *)', func)
			if ok then
				gl.GetInternalformatSampleivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ubEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.SecondaryColor3ubEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage2DMultisampleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureStorage2DMultisampleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage2DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureStorage2DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.TextureStorage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TexEnvi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginConditionalRenderNVX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BeginConditionalRenderNVX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.Normal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureStorage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.TextureStorage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTransformFeedbackStream")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.DrawTransformFeedbackStream = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TextureParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TextureParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirectBindlessNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.MultiDrawArraysIndirectBindlessNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TransformPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TextureParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord2fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TextureParameterfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TextureParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeImageHandleNonResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeImageHandleNonResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform3iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexturePageCommitmentEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexturePageCommitmentEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord2fColor4fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage3DMultisampleCoverageNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TextureImage3DMultisampleCoverageNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateShaderObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLhandleARB (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CreateShaderObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.SamplerParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TextureImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffersIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLenum *, const GLint *)', func)
			if ok then
				gl.DrawBuffersIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TextureBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsBufferARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsBufferARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint)', func)
			if ok then
				gl.UniformBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TextureBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResolveMultisampleFramebufferAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ResolveMultisampleFramebufferAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Normal3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.EvalCoord1fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadIdentity")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.LoadIdentity = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBarrierNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.TextureBarrierNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureBarrier")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.TextureBarrier = func
			end

			if not gl.TextureBarrier then
				gl.TextureBarrier = gl.TextureBarrierNV
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage4DSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage4DSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyPixels")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS)', func)
			if ok then
				gl.CopyPixels = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ubVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Color4ubVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.Uniform2uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorageSparseAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield)', func)
			if ok then
				gl.TexStorageSparseAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerOutputNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.CombinerOutputNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage3DMultisampleOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexStorage3DMultisampleOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage3DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexStorage3DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.TexStorage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.TexStorage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.TexStorage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.TexStorage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLabelObjectEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.LabelObjectEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.TexStorage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResetMinmaxEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ResetMinmaxEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsBufferResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.IsBufferResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVariantClientStateEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DisableVariantClientStateEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform1fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramLocalParameterIivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetProgramLocalParameterIivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenTexturesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenTexturesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.TexParameterxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TexParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHistogramParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetHistogramParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, GLsizei, const void *)', func)
			if ok then
				gl.ColorPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadIdentityDeformationMapSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.LoadIdentityDeformationMapSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TexParameterf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetMapdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib4fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushMappedBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.FlushMappedBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixPushEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.MatrixPushEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage2DMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei, GLboolean)', func)
			if ok then
				gl.TexImage2DMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirectBindlessNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.MultiDrawElementsIndirectBindlessNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.TexGenxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Indexfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetBuffersQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetBuffersQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexGenivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsProgramPipelineEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsProgramPipelineEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TexGenfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform4uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantFloatvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVariantFloatvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUIsSurfaceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLvdpauSurfaceNV)', func)
			if ok then
				gl.VDPAUIsSurfaceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTexGenParameterivSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.PixelTexGenParameterivSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferRenderbuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.FramebufferRenderbuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glOrthofOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.OrthofOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLinkProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.LinkProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedFramebufferiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, const GLint *)', func)
			if ok then
				gl.ClearNamedFramebufferiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformBlockBinding")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.UniformBlockBinding = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.TexEnvxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexStream1dvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.VertexStream1dvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.Normal3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TexEnvfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordPointervINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, const void **)', func)
			if ok then
				gl.TexCoordPointervINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage2DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage2DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapNamedBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint, GLintptr, GLsizeiptr, GLbitfield)', func)
			if ok then
				gl.MapNamedBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExecuteProgramNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.ExecuteProgramNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.TexCoordPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform4fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexCoordP4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *, const GLint *)', func)
			if ok then
				gl.Rectiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorFragmentOp1ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ColorFragmentOp1ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP2ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexCoordP2ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.NormalPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)()', func)
			if ok then
				gl.CreateProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMaskiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.ColorMaskiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.TexCoordFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.TexCoord4xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.TexCoord4xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTextureLayerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.NamedFramebufferTextureLayerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.SecondaryColor3dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexBufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.FogCoordf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.Vertex2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.TexCoord4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glViewportIndexedf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ViewportIndexedf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeBufferResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.MakeBufferResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFinalCombinerInputParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFinalCombinerInputParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.TexCoord4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetPathParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.TexCoord4hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib1dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.TexCoord4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFragmentOp1ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.AlphaFragmentOp1ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFloati_v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetFloati_v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.TexCoord4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.TexCoord4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.TexCoord4bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.TexCoord4bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.TexCoord3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.TexCoord3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.TexCoord3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PointParameterfARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x2dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4x2dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3b")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Color3b = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateQueries")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLuint *)', func)
			if ok then
				gl.CreateQueries = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPollAsyncSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint *)', func)
			if ok then
				gl.PollAsyncSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.TexCoord3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.TexCoord3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayTexCoordOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayTexCoordOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTessellationModeAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.TessellationModeAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelDataRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.PixelDataRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.TexCoord3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.TexCoord3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGenfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexGenfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndConditionalRenderNVX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndConditionalRenderNVX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPauseTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PauseTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsBaseVertexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawElementsBaseVertexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.TexCoord3bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeformationMap3dSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)', func)
			if ok then
				gl.DeformationMap3dSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.TexCoord3bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint)', func)
			if ok then
				gl.SecondaryColor3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.TexCoord2xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetSamplerParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramBinary")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.ProgramBinary = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.TexCoord2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.TexCoord2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint *)', func)
			if ok then
				gl.GetUniformiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.TexCoord2hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord2fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint)', func)
			if ok then
				gl.InvalidateTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantArrayObjectfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVariantArrayObjectfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetColorTableParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureLightEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.TextureLightEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateFramebuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.CreateFramebuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.MaterialxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.TexCoord2fColor3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlitFramebufferANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlitFramebufferANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.TexCoord2bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte)', func)
			if ok then
				gl.TexCoord2bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateTextureMipmapEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.GenerateTextureMipmapEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.TexCoord1xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterSamplesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean)', func)
			if ok then
				gl.RasterSamplesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.TexCoord1sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort)', func)
			if ok then
				gl.TexCoord1s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFloati_vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetFloati_vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.TexCoord1i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.TexCoord1hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilFuncSeparate")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLuint)', func)
			if ok then
				gl.StencilFuncSeparate = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelZoom")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.PixelZoom = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.ProgramUniform1ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.TexCoord1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *)', func)
			if ok then
				gl.SecondaryColor3uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glHistogram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLboolean)', func)
			if ok then
				gl.Histogram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord1sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBumpParameterivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexBumpParameterivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBumpParameterfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TexBumpParameterfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble)', func)
			if ok then
				gl.MultiTexCoord1dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferRangeOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TexBufferRangeOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TexBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.TexBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTestFenceAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.TestFenceAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.TexCoord3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.Lightiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.FogxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetProgramsQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetProgramsQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3svEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Tangent3svEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteOcclusionQueriesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteOcclusionQueriesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Tangent3ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Tangent3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3bvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Tangent3bvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3bEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.Tangent3bEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameter4dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.NamedProgramLocalParameter4dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsProgramNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsProgramNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSyncTextureINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.SyncTextureINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.SamplerParameterf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.CopyTextureImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStringMarkerGREMEDY")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const void *)', func)
			if ok then
				gl.StringMarkerGREMEDY = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetTextureImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4usv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLushort *)', func)
			if ok then
				gl.Color4usv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.PointParameterxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glImageTransformParameteriHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ImageTransformParameteriHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameter4fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramParameter4fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilStrokePathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint)', func)
			if ok then
				gl.StencilStrokePathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilOpValueAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.StencilOpValueAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilOp")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.StencilOp = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilMaskSeparate")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.StencilMaskSeparate = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformIndices")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLchar *const*, GLuint *)', func)
			if ok then
				gl.GetUniformIndices = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeTextureHandleResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeTextureHandleResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilMask")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.StencilMask = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightEnviSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.LightEnviSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetClipPlanex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetClipPlanex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.ProgramUniform3i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantArrayObjectivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVariantArrayObjectivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilFillPathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.StencilFillPathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStartInstrumentsSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.StartInstrumentsSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverFillPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.CoverFillPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableIndexedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableIndexedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSpriteParameterivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.SpriteParameterivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSpriteParameteriSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.SpriteParameteriSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSpriteParameterfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.SpriteParameterfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanefIMG")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ClipPlanefIMG = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderStorageBlockBinding")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ShaderStorageBlockBinding = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glOrthof")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Orthof = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderOp1EXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.ShaderOp1EXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShadeModel")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ShadeModel = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetMultisamplefvAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.SetMultisamplefvAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort)', func)
			if ok then
				gl.MultiTexCoord1s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorIndexed")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.ScissorIndexed = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexfvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.DrawTexfvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetInvariantEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.SetInvariantEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ColorTableEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetFenceAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.SetFenceAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateMipmap")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.GenerateMipmap = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapAttribParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMapAttribParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPNTrianglesfATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PNTrianglesfATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.SecondaryColorPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordhNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV)', func)
			if ok then
				gl.FogCoordhNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetClipPlanefOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetClipPlanefOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectui64vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64 *)', func)
			if ok then
				gl.GetQueryObjectui64vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbackVarying")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)', func)
			if ok then
				gl.GetTransformFeedbackVarying = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangent3sEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Tangent3sEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUUnmapSurfacesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLvdpauSurfaceNV *)', func)
			if ok then
				gl.VDPAUUnmapSurfacesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.TexCoord1bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilFuncSeparateATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLuint)', func)
			if ok then
				gl.StencilFuncSeparateATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTextureParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3svEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.SecondaryColor3svEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterIivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexParameterIivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.SecondaryColor3ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPatchParameteriOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PatchParameteriOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.SecondaryColor3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.SecondaryColor3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementsBaseVertexEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawRangeElementsBaseVertexEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.SecondaryColor3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.SecondaryColor3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientWaitSync")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLsync, GLbitfield, GLuint64)', func)
			if ok then
				gl.ClientWaitSync = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.SecondaryColor3bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnCompressedTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, void *)', func)
			if ok then
				gl.GetnCompressedTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3bEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.SecondaryColor3bEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3b")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.SecondaryColor3b = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorIndexedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.ScissorIndexedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCombinerInputParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetCombinerInputParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScissorArrayvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.ScissorArrayvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScalexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.ScalexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScalex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Scalex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glScalef")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Scalef = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.SamplerParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIuivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetSamplerParameterIuivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.SamplerParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeformationMap3fSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)', func)
			if ok then
				gl.DeformationMap3fSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferSubDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, const void *)', func)
			if ok then
				gl.NamedBufferSubDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DeleteShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFragmentShadersATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint)', func)
			if ok then
				gl.GenFragmentShadersATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleMaskIndexedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLbitfield)', func)
			if ok then
				gl.SampleMaskIndexedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleMapATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.SampleMapATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleCoveragex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampx, GLboolean)', func)
			if ok then
				gl.SampleCoveragex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.ProgramUniform2ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlush")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.Flush = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleCoverageARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLboolean)', func)
			if ok then
				gl.SampleCoverageARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushDebugGroup")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.PushDebugGroup = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFramebufferParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFramebufferParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.DrawBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRotatexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.RotatexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInvariantIntegervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetInvariantIntegervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRotated")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Rotated = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResumeTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ResumeTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResumeTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ResumeTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIuivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetTexParameterIuivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformHandleui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64)', func)
			if ok then
				gl.ProgramUniformHandleui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResetHistogramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ResetHistogramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResetHistogram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ResetHistogram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndConditionalRender")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndConditionalRender = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPNTrianglesiATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PNTrianglesiATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenVertexArraysOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenVertexArraysOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.ProgramUniform2ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightubvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLubyte *)', func)
			if ok then
				gl.WeightubvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeusSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort)', func)
			if ok then
				gl.ReplacementCodeusSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Indexdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuivSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *)', func)
			if ok then
				gl.ReplacementCodeuivSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.FragmentLightivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Normal3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ReplacementCodeuiColor4ubVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiColor4fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeubvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.ReplacementCodeubvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Rectf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeubSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte)', func)
			if ok then
				gl.ReplacementCodeubSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.EvalCoord1xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinishAsyncSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint *)', func)
			if ok then
				gl.FinishAsyncSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Color4fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryBufferObjectui64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLintptr)', func)
			if ok then
				gl.GetQueryBufferObjectui64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleIMG")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleIMG = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleCoverageNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleCoverageNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLightxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetLightxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteQueriesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteQueriesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexEnvfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.MultiTexEnvfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReleaseShaderCompiler")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.ReleaseShaderCompiler = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLinkProgramARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB)', func)
			if ok then
				gl.LinkProgramARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.TexCoordP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.Rectfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *, const GLdouble *)', func)
			if ok then
				gl.Rectdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Rectd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramBufferParametersIuivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramBufferParametersIuivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendColorEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.BlendColorEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.ProgramUniformui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadnPixels")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.ReadnPixels = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectParameterivAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetObjectParameterivAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.RasterPos3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenPathsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLsizei)', func)
			if ok then
				gl.GenPathsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadPixels")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.ReadPixels = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.RasterPos3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCheckFramebufferStatusOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.CheckFramebufferStatusOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransferxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.PixelTransferxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixIndexubvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLubyte *)', func)
			if ok then
				gl.MatrixIndexubvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectBufferfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetObjectBufferfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushPixelDataRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.FlushPixelDataRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.TexCoord3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsList")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsList = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexGendvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetMultiTexGendvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3x4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexEnvfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMultiTexEnvfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexGenivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMultiTexGenivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1sNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort)', func)
			if ok then
				gl.VertexAttrib1sNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMaterial")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.ColorMaterial = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3x2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVDPAUInitNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const void *, const void *)', func)
			if ok then
				gl.VDPAUInitNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetListParameterfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetListParameterfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2x4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisample")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisample = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLuint *)', func)
			if ok then
				gl.GetnUniformuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSubpixelPrecisionBiasNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.SubpixelPrecisionBiasNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectParameterfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetObjectParameterfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint64EXT)', func)
			if ok then
				gl.VertexAttribL1ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColorFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.SecondaryColorFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnUniformfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactorsSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort)', func)
			if ok then
				gl.GlobalAlphaFactorsSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glShaderSourceARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *)', func)
			if ok then
				gl.ShaderSourceARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.ProgramUniform4i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform4dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ConvolutionParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationiARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationiARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncIndexedAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncIndexedAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform3ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragmentMaterialfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetFragmentMaterialfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4x3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFloatIndexedvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetFloatIndexedvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB)', func)
			if ok then
				gl.DeleteObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageCallbackAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLDEBUGPROCAMD, void *)', func)
			if ok then
				gl.DebugMessageCallbackAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectLabelEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetObjectLabelEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFenceivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFenceivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginQuery")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BeginQuery = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnabled")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.IsEnabled = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArraySecondaryColorOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArraySecondaryColorOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform2uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameterI4uiNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramLocalParameterI4uiNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetConvolutionParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexStorage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.TexStorage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform2ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoadTranspose3x3fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MatrixLoadTranspose3x3fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetTexSubImageQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.ExtGetTexSubImageQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedTexImageARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, void *)', func)
			if ok then
				gl.GetCompressedTexImageARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPushMatrix")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PushMatrix = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlagPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const void *)', func)
			if ok then
				gl.EdgeFlagPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathStringNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.PathStringNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectLabelKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLchar *)', func)
			if ok then
				gl.ObjectLabelKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Color4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform2dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.MultiTexCoord2hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCheckNamedFramebufferStatus")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.CheckNamedFramebufferStatus = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthMask")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLboolean)', func)
			if ok then
				gl.DepthMask = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinish")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.Finish = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid1xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfixed, GLfixed)', func)
			if ok then
				gl.MapGrid1xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedBufferSubDataEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizeiptr, GLsizeiptr, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearNamedBufferSubDataEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3fNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.VertexAttrib3fNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glImageTransformParameterivHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ImageTransformParameterivHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMinSampleShadingARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.MinSampleShadingARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFloatv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetFloatv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindProgramARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindProgramARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.Uniform3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrameZoomSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.FrameZoomSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ProgramParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDetachShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.DetachShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord2s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateTextureMipmap")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.GenerateTextureMipmap = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompileShader")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.CompileShader = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.MultiTexCoord4xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalMapsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.EvalMapsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelMapusv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLushort *)', func)
			if ok then
				gl.GetPixelMapusv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayIndexOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayIndexOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.RasterPos4sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glHistogramEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLboolean)', func)
			if ok then
				gl.HistogramEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3bvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Binormal3bvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferDrawBuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLenum *)', func)
			if ok then
				gl.FramebufferDrawBuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapControlPointsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLsizei, GLsizei, GLboolean, void *)', func)
			if ok then
				gl.GetMapControlPointsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightModeliSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.FragmentLightModeliSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat)', func)
			if ok then
				gl.VertexAttrib1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetMultiTexParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferSampleLocationsfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.NamedFramebufferSampleLocationsfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferPointerv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetBufferPointerv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetError")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)()', func)
			if ok then
				gl.GetError = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenLists")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLsizei)', func)
			if ok then
				gl.GenLists = func
			gl.GenList = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFramebuffersOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenFramebuffersOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstancedBaseInstanceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei, GLuint)', func)
			if ok then
				gl.DrawArraysInstancedBaseInstanceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendParameteriNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.BlendParameteriNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteRenderbuffersEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteRenderbuffersEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureLayer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTextureLayer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble *)', func)
			if ok then
				gl.GetUniformdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexSubImage1DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexSubImage1DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ConvolutionParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.DrawTexxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransferf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PixelTransferf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadTransposeMatrixxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.LoadTransposeMatrixxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble)', func)
			if ok then
				gl.ProgramUniform1dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMapxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetMapxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeNamedBufferNonResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.MakeNamedBufferNonResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureFaceEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GL_LUA_ENUMS)', func)
			if ok then
				gl.FramebufferTextureFaceEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramEnvParameterIuivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint *)', func)
			if ok then
				gl.GetProgramEnvParameterIuivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferOffsetNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLintptr)', func)
			if ok then
				gl.BindBufferOffsetNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelTransformParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPixelTransformParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultTransposeMatrixf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.MultTransposeMatrixf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.BindBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightModelfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.FragmentLightModelfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightModelfSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.FragmentLightModelfSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.Fogxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glListParameterfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ListParameterfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetNamedBufferParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetConvolutionParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayMultiTexCoordOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLintptr)', func)
			if ok then
				gl.VertexArrayMultiTexCoordOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverStrokePathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.CoverStrokePathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoorddEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble)', func)
			if ok then
				gl.FogCoorddEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepthx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.ClearDepthx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsImageHandleResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint64)', func)
			if ok then
				gl.IsImageHandleResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenQueriesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenQueriesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetSamplerParameterIivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureRangeAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.TextureRangeAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetRenderbuffersQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetRenderbuffersQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseVertexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLint)', func)
			if ok then
				gl.DrawElementsInstancedBaseVertexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElementsBaseVertexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawRangeElementsBaseVertexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndQueryIndexed")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EndQueryIndexed = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransferi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PixelTransferi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Normal3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureHandleARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint)', func)
			if ok then
				gl.GetTextureHandleARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.Fogiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrustum")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Frustum = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.FramebufferTexture3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElements")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawElements = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectUnpurgeableAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.ObjectUnpurgeableAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopDebugGroup")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopDebugGroup = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedRenderbufferStorageMultisampleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.NamedRenderbufferStorageMultisampleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetHandleARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLhandleARB (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.GetHandleARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramStringEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.NamedProgramStringEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParametersI4ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.NamedProgramLocalParametersI4ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBooleanv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean *)', func)
			if ok then
				gl.GetBooleanv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegerIndexedvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetIntegerIndexedvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndTilingQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.EndTilingQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Binormal3dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetFramebuffersQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetFramebuffersQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageInsertARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLsizei, const GLchar *)', func)
			if ok then
				gl.DebugMessageInsertARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureImageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetTextureImageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetLightiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetLightiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveSubroutineUniformiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetActiveSubroutineUniformiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteTransformFeedbacksNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteTransformFeedbacksNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFencesAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteFencesAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Color4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParametersI4uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.NamedProgramLocalParametersI4uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTexGenParameteriSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PixelTexGenParameteriSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMaterialiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMaterialiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorMaskiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.ColorMaskiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexsOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.DrawTexsOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrimitiveBoundingBoxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.PrimitiveBoundingBoxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPointervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetPointervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMultdEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MatrixMultdEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoCaptureivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVideoCaptureivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightiSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.FragmentLightiSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.DrawTexivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsBaseVertexEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLint)', func)
			if ok then
				gl.DrawElementsBaseVertexEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glHint")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.Hint = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinishObjectAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.FinishObjectAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadBufferNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ReadBufferNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrioritizeTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *, const GLfloat *)', func)
			if ok then
				gl.PrioritizeTextures = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateSyncFromCLeventARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLsync (*)(struct _cl_context *, struct _cl_event *, GLbitfield)', func)
			if ok then
				gl.CreateSyncFromCLeventARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelTexGenParameterfvSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPixelTexGenParameterfvSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoordPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, GLsizei, const void *)', func)
			if ok then
				gl.TexCoordPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameter4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.ProgramEnvParameter4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.EvalCoord2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexEnvfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexEnvfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const GLint *)', func)
			if ok then
				gl.ClearBufferiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureColorMaskSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLboolean, GLboolean, GLboolean, GLboolean)', func)
			if ok then
				gl.TextureColorMaskSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLenum *)', func)
			if ok then
				gl.DrawBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexArray")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindVertexArray = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableDriverControlQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DisableDriverControlQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMultiTexParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.EvalCoord1xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrimitiveRestartIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.PrimitiveRestartIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture2DMultisampleIMG")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLsizei)', func)
			if ok then
				gl.FramebufferTexture2DMultisampleIMG = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrimitiveRestartIndexNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.PrimitiveRestartIndexNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTrackMatrixivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTrackMatrixivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDebugMessageLogKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetDebugMessageLogKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Vertex4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFragmentShaderATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindFragmentShaderATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord4fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexArrayAttribEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.DisableVertexArrayAttribEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4us")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort, GLushort, GLushort, GLushort)', func)
			if ok then
				gl.Color4us = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr, const void *)', func)
			if ok then
				gl.BufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDoublei_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetDoublei_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.Uniform3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord4d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTransformFeedbackStreamInstanced")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei)', func)
			if ok then
				gl.DrawTransformFeedbackStreamInstanced = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLbyte *)', func)
			if ok then
				gl.MultiTexCoord4bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.RasterPos3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseVertex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLint)', func)
			if ok then
				gl.DrawElementsInstancedBaseVertex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.MultiTexCoord3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.MultiTexCoord3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenPerfMonitorsAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenPerfMonitorsAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferParameteri")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.FramebufferParameteri = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelMapfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLfloat *)', func)
			if ok then
				gl.PixelMapfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBitmapxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *)', func)
			if ok then
				gl.BitmapxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord3ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord3iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsIndirect")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawElementsIndirect = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord3i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepthfOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampf)', func)
			if ok then
				gl.ClearDepthfOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord3fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoorddvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.FogCoorddvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glImageTransformParameterfvHP")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ImageTransformParameterfvHP = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangexOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.DepthRangexOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.ProgramUniform4ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateIndexedAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateIndexedAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.ConvolutionParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjecti64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetQueryObjecti64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint)', func)
			if ok then
				gl.CopyTexImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Color3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord3dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord3dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3bATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.NormalStream3bATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.LoadName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTextures")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.BindTextures = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegeri_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetIntegeri_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3ub")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.Color3ub = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonOffsetx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.PolygonOffsetx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.MultiTexParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetAttribLocationARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLhandleARB, const GLcharARB *)', func)
			if ok then
				gl.GetAttribLocationARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightfSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.FragmentLightfSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexAttribAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.EnableVertexAttribAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.EvalCoord2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBegin")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.Begin = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.SecondaryColor3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPixelTexGenParameterivSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetPixelTexGenParameterivSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLbyte *)', func)
			if ok then
				gl.MultiTexCoord2bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableClientStateiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DisableClientStateiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLbyte, GLbyte)', func)
			if ok then
				gl.MultiTexCoord2bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisableVertexArrayEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.DisableVertexArrayEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ReadBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.Materialx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPolygonStippleARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLubyte *)', func)
			if ok then
				gl.GetnPolygonStippleARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ubVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *, const GLfloat *)', func)
			if ok then
				gl.Color4ubVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord1fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanefOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ClipPlanefOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLbyte *)', func)
			if ok then
				gl.MultiTexCoord1bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDriverControlStringQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetDriverControlStringQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerInputNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.CombinerInputNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodePointerSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void **)', func)
			if ok then
				gl.ReplacementCodePointerSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetColorTableSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElements")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei)', func)
			if ok then
				gl.MultiDrawElements = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplePatternSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.SamplePatternSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.BeginTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfQueryDataINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLvoid *, GLuint *)', func)
			if ok then
				gl.GetPerfQueryDataINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCheckNamedFramebufferStatusEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.CheckNamedFramebufferStatusEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferReadBufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.FramebufferReadBufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.FragmentLightfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFramebufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindFramebufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMaterialxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.GetMaterialxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferParameteri64v")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetBufferParameteri64v = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndVertexShaderEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndVertexShaderEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.Binormal3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateMipmapOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.GenerateMipmapOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCallList")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.CallList = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnTexImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnTexImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixMode")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.MatrixMode = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLdouble *)', func)
			if ok then
				gl.GetnMapdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexLevelParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMultiTexLevelParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoadIdentityEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.MatrixLoadIdentityEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInterleavedArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.InterleavedArrays = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCullParameterdvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.CullParameterdvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage1DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage1DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVariantPointervEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetVariantPointervEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Normal3hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearColorIiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ClearColorIiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentColorMaterialSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.FragmentColorMaterialSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndPerfMonitorAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EndPerfMonitorAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PointParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateSubFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.InvalidateSubFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribLui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetVertexAttribLui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3svEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Binormal3svEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendEquationSeparateiARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendEquationSeparateiARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectPtrLabel")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const void *, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetObjectPtrLabel = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexWeightfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.VertexWeightfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform1fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap1xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed, GLint, GLint, GLfixed)', func)
			if ok then
				gl.Map1xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4x")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.MultiTexCoord4x = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord2sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnSeparableFilterARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *, GLsizei, void *, void *)', func)
			if ok then
				gl.GetnSeparableFilterARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedRenderbufferStorageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.NamedRenderbufferStorageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSelectPerfMonitorCountersAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLboolean, GLuint, GLint, GLuint *)', func)
			if ok then
				gl.SelectPerfMonitorCountersAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUseProgramObjectARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB)', func)
			if ok then
				gl.UseProgramObjectARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeBufferNonResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.MakeBufferNonResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadMatrixxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.LoadMatrixxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glListParameteriSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ListParameteriSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, void *)', func)
			if ok then
				gl.GetNamedBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramLocalParameterIuivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint *)', func)
			if ok then
				gl.GetProgramLocalParameterIuivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteSamplers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteSamplers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NubvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttrib4NubvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3us")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLushort, GLushort, GLushort)', func)
			if ok then
				gl.Color3us = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawRangeElements")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLsizei, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawRangeElements = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferDrawBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.NamedFramebufferDrawBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort)', func)
			if ok then
				gl.VertexAttrib1s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferBaseNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.BindBufferBaseNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathColorGenfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetPathColorGenfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Color4hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModelxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.LightModelxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLdouble)', func)
			if ok then
				gl.VertexAttrib1dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentMaterialfSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.FragmentMaterialfSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopClientAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopClientAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultTransposeMatrixd")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.MultTransposeMatrixd = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableiNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.EnableiNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathCoordsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat *)', func)
			if ok then
				gl.GetPathCoordsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsTextureHandleResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint64)', func)
			if ok then
				gl.IsTextureHandleResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenBuffers = func
			gl.GenBuffer = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetShaderPrecisionFormat")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *, GLint *)', func)
			if ok then
				gl.GetShaderPrecisionFormat = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCullParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.CullParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleMaskSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampf, GLboolean)', func)
			if ok then
				gl.SampleMaskSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedRenderbufferStorage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.NamedRenderbufferStorage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.Uniform4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveAtomicCounterBufferiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetActiveAtomicCounterBufferiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBuffersRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *)', func)
			if ok then
				gl.BindBuffersRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4x3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribL1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttribL1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBufferParameteriAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.BufferParameteriAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib1dvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLdouble *)', func)
			if ok then
				gl.VertexAttrib1dvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glObjectPurgeableAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.ObjectPurgeableAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFragmentOp2ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.AlphaFragmentOp2ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsFenceNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsFenceNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture2DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture2DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryBufferObjectiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLintptr)', func)
			if ok then
				gl.GetQueryBufferObjectiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepthf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.ClearDepthf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFinishFenceAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.FinishFenceAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameter4fvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.ProgramParameter4fvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindBufferARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginPerfQueryINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BeginPerfQueryINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateiOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateiOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormalPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.BinormalPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexRenderbufferNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.TexRenderbufferNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPointerv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetPointerv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetBufferParameterui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetBufferParameterui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangefOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampf, GLclampf)', func)
			if ok then
				gl.DepthRangefOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsSyncAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLsync)', func)
			if ok then
				gl.IsSyncAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.SecondaryColor3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClientAttribDefaultEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.ClientAttribDefaultEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveUniform")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *)', func)
			if ok then
				gl.GetActiveUniform = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ConvolutionParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindRenderbuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindRenderbuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVideoCaptureStreamTextureNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindVideoCaptureStreamTextureNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramLocalParameterdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetProgramLocalParameterdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorSubTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ColorSubTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDetailTexFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLfloat *)', func)
			if ok then
				gl.DetailTexFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexFilterFuncSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const GLfloat *)', func)
			if ok then
				gl.TexFilterFuncSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendColor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.BlendColor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyMultiTexSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyMultiTexSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLshort *)', func)
			if ok then
				gl.Normal3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.CopyTexImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushMappedBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.FlushMappedBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPassTexCoordATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.PassTexCoordATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexFuncEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLclampf)', func)
			if ok then
				gl.IndexFuncEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginVertexShaderEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.BeginVertexShaderEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragmentMaterialivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFragmentMaterialivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDebugMessageLogAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetDebugMessageLogAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glListParameterfSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.ListParameterfSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndTransformFeedback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndTransformFeedback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyColorTableSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyColorTableSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstancedBaseInstance")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei, GLuint)', func)
			if ok then
				gl.DrawArraysInstancedBaseInstance = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPathDashArrayNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLfloat *)', func)
			if ok then
				gl.GetPathDashArrayNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformuivKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLuint *)', func)
			if ok then
				gl.GetnUniformuivKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyMultiTexSubImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyMultiTexSubImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnColorTableARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnColorTableARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramEnvParameterdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetProgramEnvParameterdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetIntegerv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetIntegerv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnUniformfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetConvolutionParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei)', func)
			if ok then
				gl.DrawArrays = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableParameterivSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ColorTableParameterivSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.FogxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragmentLightfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetFragmentLightfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.DepthRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferRenderbufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.FramebufferRenderbufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClipPlanexIMG")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.ClipPlanexIMG = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameter4dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramLocalParameter4dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapusv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLushort *)', func)
			if ok then
				gl.GetnPixelMapusv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFramebufferAttachmentParameterivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFramebufferAttachmentParameterivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4ubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLubyte *)', func)
			if ok then
				gl.VertexAttrib4ubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.DrawElementsInstancedANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveVaryingNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)', func)
			if ok then
				gl.GetActiveVaryingNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSwizzleEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.SwizzleEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTextureLayer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.NamedFramebufferTextureLayer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.RasterPos2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorageMultisampleANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorageMultisampleANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInstrumentsSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)()', func)
			if ok then
				gl.GetInstrumentsSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.VertexP4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetRenderbufferParameterivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetRenderbufferParameterivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGendEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLdouble)', func)
			if ok then
				gl.MultiTexGendEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const GLfloat *)', func)
			if ok then
				gl.ClearBufferfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.WindowPos2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInvariantBooleanvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLboolean *)', func)
			if ok then
				gl.GetInvariantBooleanvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexRenderbufferEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexRenderbufferEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameteriARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ProgramParameteriARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayBindingDivisor")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayBindingDivisor = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteProgramsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteProgramsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilThenCoverFillPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.StencilThenCoverFillPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei)', func)
			if ok then
				gl.DrawElementsInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexSubImage3DOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.TexSubImage3DOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTexture1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTexture1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribdvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVertexAttribdvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribLdvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVertexAttribLdvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetShaderiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetShaderiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPointeri_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, void **)', func)
			if ok then
				gl.GetPointeri_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramLocalParameterdvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLdouble *)', func)
			if ok then
				gl.GetNamedProgramLocalParameterdvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord3dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureLevelParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTextureLevelParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBinormal3ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Binormal3ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.VertexPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVaryingLocationNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLint (*)(GLuint, const GLchar *)', func)
			if ok then
				gl.GetVaryingLocationNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilFillPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.StencilFillPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindLightParameterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BindLightParameterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixRotatefEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MatrixRotatefEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexParameterxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.TexParameterxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ConvolutionParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLintptr (*)(GLuint, GLint)', func)
			if ok then
				gl.GetUniformOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterPointervAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetTexParameterPointervAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPatchParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PatchParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.MapBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetGraphicsResetStatusKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)()', func)
			if ok then
				gl.GetGraphicsResetStatusKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeletePerfQueryINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.DeletePerfQueryINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramPipelineInfoLog")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetProgramPipelineInfoLog = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramPipelineInfoLogEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetProgramPipelineInfoLogEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2dMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble)', func)
			if ok then
				gl.WindowPos2dMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourcefvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *)', func)
			if ok then
				gl.GetProgramResourcefvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPopAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.PopAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexEnviEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.MultiTexEnviEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVertexAttribdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.NamedRenderbufferStorageMultisampleCoverageEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureLevelParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTextureLevelParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindFragDataLocation")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, const GLchar *)', func)
			if ok then
				gl.BindFragDataLocation = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetColorTableParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetCompressedTextureSubImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *)', func)
			if ok then
				gl.GetCompressedTextureSubImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthFunc")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.DepthFunc = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramEnvParameterfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetProgramEnvParameterfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFuncx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.AlphaFuncx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureHandleNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint64 (*)(GLuint)', func)
			if ok then
				gl.GetTextureHandleNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLineStipple")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLushort)', func)
			if ok then
				gl.LineStipple = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedBufferPointerv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.GetNamedBufferPointerv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGenfvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexGenfvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetGraphicsResetStatus")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)()', func)
			if ok then
				gl.GetGraphicsResetStatus = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.ColorPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryObjectivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Color4bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryObjectuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetQueryObjectuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourceIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GL_LUA_ENUMS, const GLchar *)', func)
			if ok then
				gl.GetProgramResourceIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmax")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetMinmax = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetSamplerParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.PointParameterxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetSamplerParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4sNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.VertexAttrib4sNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.RasterPos4i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSamplerParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.SamplerParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat)', func)
			if ok then
				gl.ProgramUniform1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferfi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLfloat, GLint)', func)
			if ok then
				gl.ClearBufferfi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSeparableFilterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *, void *, void *)', func)
			if ok then
				gl.GetSeparableFilterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramUniform3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetStringi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'const GLubyte *(*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.GetStringi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4NubARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte)', func)
			if ok then
				gl.VertexAttrib4NubARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexBumpParameterfvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexBumpParameterfvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetTextureParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelMapuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLuint *)', func)
			if ok then
				gl.PixelMapuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearIndex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.ClearIndex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTextureSubImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyTextureSubImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGenivOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexGenivOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnableVertexArrayAttrib")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.EnableVertexArrayAttrib = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTexParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadMatrixx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.LoadMatrixx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindImageTextureEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint, GLboolean, GLint, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.BindImageTextureEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.TexGenxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearColorx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.ClearColorx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVertexAttribfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsQueryARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsQueryARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedFramebufferfi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLfloat, GLint)', func)
			if ok then
				gl.ClearNamedFramebufferfi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGenf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.TexGenf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFramebufferAttachmentParameteriv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFramebufferAttachmentParameteriv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble)', func)
			if ok then
				gl.MultiTexCoord1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetFragmentLightivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetFragmentLightivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbackVaryingNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLint *)', func)
			if ok then
				gl.GetTransformFeedbackVaryingNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsNamedBufferResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsNamedBufferResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTransformFeedbackiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetTransformFeedbackiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexArrayVertexBindingDivisorEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.VertexArrayVertexBindingDivisorEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSamplerParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetSamplerParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInsertEventMarkerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLchar *)', func)
			if ok then
				gl.InsertEventMarkerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushMappedNamedBufferRange")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.FlushMappedNamedBufferRange = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLdouble *)', func)
			if ok then
				gl.GetnUniformdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint *)', func)
			if ok then
				gl.GetUniformuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor4ubVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2fColor4ubVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexPointer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.IndexPointer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsAsyncMarkerSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsAsyncMarkerSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayIndexed64iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint64 *)', func)
			if ok then
				gl.GetVertexArrayIndexed64iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayIndexediv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexArrayIndexediv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexArrayIntegeri_vEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexArrayIntegeri_vEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.TextureParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDispatchComputeIndirect")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLintptr)', func)
			if ok then
				gl.DispatchComputeIndirect = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorTableParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.ColorTableParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribArrayObjectivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribArrayObjectivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetVertexAttribIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenProgramsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenProgramsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndQueryARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.EndQueryARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindRenderbufferOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BindRenderbufferOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2x3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogCoordFormatNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei)', func)
			if ok then
				gl.FogCoordFormatNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexs")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort)', func)
			if ok then
				gl.Indexs = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFuncxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.AlphaFuncxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoCaptureStreamfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVideoCaptureStreamfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.VertexP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateNamedFramebufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLenum *)', func)
			if ok then
				gl.InvalidateNamedFramebufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameterI4iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.NamedProgramLocalParameterI4iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginVideoCaptureNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BeginVideoCaptureNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform1i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint64EXT)', func)
			if ok then
				gl.Uniform1i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetSyncivAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync, GL_LUA_ENUMS, GLsizei, GLsizei *, GLint *)', func)
			if ok then
				gl.GetSyncivAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapdvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLdouble *)', func)
			if ok then
				gl.GetnMapdvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnMapfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3fATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.NormalStream3fATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramResourceiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *)', func)
			if ok then
				gl.GetProgramResourceiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.RasterPos4xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.Fogf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLuint *)', func)
			if ok then
				gl.GetnPixelMapuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexBuffers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *)', func)
			if ok then
				gl.BindVertexBuffers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryIndexediv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetQueryIndexediv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMinmaxARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnMinmaxARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetConvolutionFilter")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetConvolutionFilter = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLint, GLint *)', func)
			if ok then
				gl.GetUniformivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.Color4s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangeArrayv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.DepthRangeArrayv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetGraphicsResetStatusARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)()', func)
			if ok then
				gl.GetGraphicsResetStatusARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnUniformfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformivKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLint *)', func)
			if ok then
				gl.GetnUniformivKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnUniformuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLuint *)', func)
			if ok then
				gl.GetnUniformuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixLoadTransposedEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MatrixLoadTransposedEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactorbSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte)', func)
			if ok then
				gl.GlobalAlphaFactorbSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGlobalAlphaFactorubSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte)', func)
			if ok then
				gl.GlobalAlphaFactorubSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glHintPGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.HintPGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVertexAttribfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthBoundsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLclampd, GLclampd)', func)
			if ok then
				gl.DepthBoundsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearNamedFramebufferfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, const GLfloat *)', func)
			if ok then
				gl.ClearNamedFramebufferfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.Lightfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindVertexArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentLightModelivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.FragmentLightModelivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLsizei, const void *)', func)
			if ok then
				gl.IndexPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyMultiTexSubImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyMultiTexSubImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorCountersAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint *, GLint *, GLsizei, GLuint *)', func)
			if ok then
				gl.GetPerfMonitorCountersAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMinmaxEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, void *)', func)
			if ok then
				gl.GetMinmaxEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageEnableAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, const GLuint *, GLboolean)', func)
			if ok then
				gl.DebugMessageEnableAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexub")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte)', func)
			if ok then
				gl.Indexub = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexubv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLubyte *)', func)
			if ok then
				gl.Indexubv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform4uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnColorTable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnColorTable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT)', func)
			if ok then
				gl.ProgramUniform1ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGenxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetTexGenxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorCounterStringAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetPerfMonitorCounterStringAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInvalidateFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLenum *)', func)
			if ok then
				gl.InvalidateFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectLabel")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetObjectLabel = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.Vertex3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetVertexAttribfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnabledi")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsEnabledi = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnablediOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsEnablediOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsEnablediNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.IsEnablediNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFunciEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFunciEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glInitNames")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.InitNames = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindBufferBaseEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint)', func)
			if ok then
				gl.BindBufferBaseEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTransformFeedbackBufferBase")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.TransformFeedbackBufferBase = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsBaseVertex")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLsizei *, GL_LUA_ENUMS, const void *const*, GLsizei, const GLint *)', func)
			if ok then
				gl.MultiDrawElementsBaseVertex = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedProgramLocalParameterIivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLint *)', func)
			if ok then
				gl.GetNamedProgramLocalParameterIivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsPointInStrokePathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint, GLfloat, GLfloat)', func)
			if ok then
				gl.IsPointInStrokePathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapTexture2DINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void *(*)(GLuint, GLint, GLbitfield, GLint *, GLenum *)', func)
			if ok then
				gl.MapTexture2DINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameter4dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLdouble *)', func)
			if ok then
				gl.ProgramEnvParameter4dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexGeniv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexGeniv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindTextureUnit")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.BindTextureUnit = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawRangeElementArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei)', func)
			if ok then
				gl.MultiDrawRangeElementArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.NormalP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexSubImage3D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyTexSubImage3D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsRenderbuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsRenderbuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLintptr, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.CopyBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReadnPixelsEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.ReadnPixelsEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalP3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.NormalP3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.RasterPos2xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModeli")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.LightModeli = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTexGenParameterfSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PixelTexGenParameterfSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyImageSubDataOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLuint, GL_LUA_ENUMS, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei)', func)
			if ok then
				gl.CopyImageSubDataOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndOcclusionQueryNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.EndOcclusionQueryNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Color3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsVertexArrayOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsVertexArrayOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindVertexArrayOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.BindVertexArrayOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlitFramebuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlitFramebuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreatePerfQueryINTEL")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint *)', func)
			if ok then
				gl.CreatePerfQueryINTEL = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord4sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTangentPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.TangentPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCombinerParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.CombinerParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLineWidth")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat)', func)
			if ok then
				gl.LineWidth = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferReadBuffer")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.NamedFramebufferReadBuffer = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEndVideoCaptureNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.EndVideoCaptureNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectPtrLabelKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const void *, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetObjectPtrLabelKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRectxvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *, const GLfixed *)', func)
			if ok then
				gl.RectxvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glResetMinmax")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.ResetMinmax = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordPointerEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.MultiTexCoordPointerEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDebugMessageLogARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetDebugMessageLogARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteProgramPipelinesEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteProgramPipelinesEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetDoublev")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetDoublev = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2fARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord2fARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadMatrixf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.LoadMatrixf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlitFramebufferNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlitFramebufferNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Normal3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeImageHandleNonResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeImageHandleNonResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeImageHandleResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64, GL_LUA_ENUMS)', func)
			if ok then
				gl.MakeImageHandleResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeTextureHandleNonResidentARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeTextureHandleNonResidentARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnPixelMapfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnPixelMapfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.Uniform2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDepthRangeArrayfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.DepthRangeArrayfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathGlyphIndexRangeNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLenum (*)(GL_LUA_ENUMS, const void *, GLbitfield, GLuint, GLfloat, GLuint)', func)
			if ok then
				gl.PathGlyphIndexRangeNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDisablei")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.Disablei = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnHistogramARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnHistogramARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetShaderSourceARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *)', func)
			if ok then
				gl.GetShaderSourceARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindMaterialParameterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BindMaterialParameterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetUniformui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT *)', func)
			if ok then
				gl.GetUniformui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexEnvivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexEnvivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEnable")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.Enable = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.VertexPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMaterialxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.Materialxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapVertexAttrib2fAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)', func)
			if ok then
				gl.MapVertexAttrib2fAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.RasterPos2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearBufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ClearBufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorP3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.ColorP3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysInstancedANGLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLsizei, GLsizei)', func)
			if ok then
				gl.DrawArraysInstancedANGLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3uiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform3uiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixIndexuivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLuint *)', func)
			if ok then
				gl.MatrixIndexuivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMatrixIndexusvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLushort *)', func)
			if ok then
				gl.MatrixIndexusvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenTransformFeedbacks")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenTransformFeedbacks = func
			gl.GenTransformFeedback = function() local id = ffi.new('GLint[1]') func(1, id) return id[0] end
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSetLocalConstantEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.SetLocalConstantEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMaterialxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed *)', func)
			if ok then
				gl.GetMaterialxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *)', func)
			if ok then
				gl.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniformMatrix2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.UniformMatrix2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV, GLhalfNV)', func)
			if ok then
				gl.Vertex2hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexEnvivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetMultiTexEnvivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramLocalParameterfvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLfloat *)', func)
			if ok then
				gl.GetProgramLocalParameterfvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMemoryBarrierByRegion")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbitfield)', func)
			if ok then
				gl.MemoryBarrierByRegion = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.ProgramUniform1i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x4dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2x4dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMinmaxEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLboolean)', func)
			if ok then
				gl.MinmaxEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLbyte, GLbyte)', func)
			if ok then
				gl.Vertex2bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsFenceAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsFenceAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVertexAttribivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetShadersQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint *, GLint, GLint *)', func)
			if ok then
				gl.ExtGetShadersQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMakeTextureHandleNonResidentNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint64)', func)
			if ok then
				gl.MakeTextureHandleNonResidentNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionFilter1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ConvolutionFilter1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *, const GLsizei *, GLsizei)', func)
			if ok then
				gl.MultiDrawArraysEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glUniform2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.Uniform2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathFogGenNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS)', func)
			if ok then
				gl.PathFogGenNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushMappedNamedBufferRangeEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr)', func)
			if ok then
				gl.FlushMappedNamedBufferRangeEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirect")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawElementsIndirect = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnviv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TexEnviv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetListParameterivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetListParameterivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenFencesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLuint *)', func)
			if ok then
				gl.GenFencesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPrimitiveBoundingBoxEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.PrimitiveBoundingBoxEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentMaterialfvSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.FragmentMaterialfvSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord1iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetColorTableParameterfvSGI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetColorTableParameterfvSGI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawPixels")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawPixels = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLbyte)', func)
			if ok then
				gl.MultiTexCoord1bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.RasterPos2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.MultiTexCoord4xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord1ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort)', func)
			if ok then
				gl.MultiTexCoord1sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord1svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4ubVertex2fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat)', func)
			if ok then
				gl.Color4ubVertex2fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelStoref")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.PixelStoref = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFenceSync")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLsync (*)(GL_LUA_ENUMS, GLbitfield)', func)
			if ok then
				gl.FenceSync = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord2dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x2dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix3x2dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord2dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.TextureParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureViewOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.TextureViewOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord2iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttrib4iv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttrib4iv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord2sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTexfOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.DrawTexfOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLint *)', func)
			if ok then
				gl.GetnMapivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed, GLfixed)', func)
			if ok then
				gl.MultiTexCoord2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3bOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLbyte, GLbyte, GLbyte)', func)
			if ok then
				gl.MultiTexCoord3bOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFrustumx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Frustumx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMateriali")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.Materiali = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawArraysIndirect")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.DrawArraysIndirect = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.MultiTexCoord3f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlagv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLboolean *)', func)
			if ok then
				gl.EdgeFlagv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWeightbvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLbyte *)', func)
			if ok then
				gl.WeightbvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawTransformFeedbackNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.DrawTransformFeedbackNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLhalfNV *)', func)
			if ok then
				gl.MultiTexCoord3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord1dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.EvalCoord1dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCreateShaderProgramvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GL_LUA_ENUMS, GLsizei, const GLchar **)', func)
			if ok then
				gl.CreateShaderProgramvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertexAttribI1ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, const GLint *)', func)
			if ok then
				gl.VertexAttribI1ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glQueryCounterEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.QueryCounterEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.RasterPos3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramSubroutineParametersuivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramSubroutineParametersuivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLighti")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.Lighti = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteVertexArrays")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteVertexArrays = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord3svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramPathFragmentInputGenNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLint, const GLfloat *)', func)
			if ok then
				gl.ProgramPathFragmentInputGenNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.EvalCoord2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBeginQueryARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.BeginQueryARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramPipelineivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetProgramPipelineivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetArrayObjectivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetArrayObjectivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageCallbackKHR")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLDEBUGPROCKHR, const void *)', func)
			if ok then
				gl.DebugMessageCallbackKHR = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord4dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.RasterPos4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4fvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.MultiTexCoord4fvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetObjectBufferivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetObjectBufferivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4iARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.MultiTexCoord4iARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4ivARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexCoord4ivARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.Lightf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint *)', func)
			if ok then
				gl.GetVideoivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord4fColor4fNormal3fVertex4fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord4svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.TexCoord2fColor4fNormal3fVertex3fSUN = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor4xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.Color4xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadTransposeMatrixf")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.LoadTransposeMatrixf = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRenderbufferStorage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei)', func)
			if ok then
				gl.RenderbufferStorage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCoverStrokePathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS)', func)
			if ok then
				gl.CoverStrokePathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyMultiTexImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.CopyMultiTexImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGendvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexGendvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexGenfEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat)', func)
			if ok then
				gl.MultiTexGenfEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord3d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.TexCoord3d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexImage3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexImage3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLuint *)', func)
			if ok then
				gl.MultiTexParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.Normal3xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAreTexturesResident")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLsizei, const GLuint *, GLboolean *)', func)
			if ok then
				gl.AreTexturesResident = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexParameterivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.MultiTexParameterivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1i")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform1i = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParameterI4uivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLuint *)', func)
			if ok then
				gl.ProgramEnvParameterI4uivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.Lightx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBlendFuncSeparateiARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.BlendFuncSeparateiARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVideoCaptureStreamParameterivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.VideoCaptureStreamParameterivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizeiptr, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.NamedBufferData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearDepthxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed)', func)
			if ok then
				gl.ClearDepthxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFragmentMaterialivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.FragmentMaterialivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3iATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint)', func)
			if ok then
				gl.NormalStream3iATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Vertex4bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedMultiTexImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedMultiTexImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColorFragmentOp3ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ColorFragmentOp3ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalCoord2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.EvalCoord2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glAlphaFragmentOp3ATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.AlphaFragmentOp3ATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3s")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLshort, GLshort, GLshort)', func)
			if ok then
				gl.RasterPos3s = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTexture2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.NamedFramebufferTexture2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameter4dvARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, const GLdouble *)', func)
			if ok then
				gl.ProgramLocalParameter4dvARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCurrentPaletteMatrixOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.CurrentPaletteMatrixOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureSubImage")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetTextureSubImage = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTagSampleBufferSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.TagSampleBufferSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameter4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, const GLfloat *)', func)
			if ok then
				gl.NamedProgramLocalParameter4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedProgramLocalParameterI4ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, const GLint *)', func)
			if ok then
				gl.NamedProgramLocalParameterI4ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTexImage3DARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTexImage3DARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGenerateMultiTexMipmapEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS)', func)
			if ok then
				gl.GenerateMultiTexMipmapEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glImportSyncEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLsync (*)(GL_LUA_ENUMS, GLintptr, GLbitfield)', func)
			if ok then
				gl.ImportSyncEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap2f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)', func)
			if ok then
				gl.Map2f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3sv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord3sv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetMultiTexParameterIuivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetMultiTexParameterIuivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindSampler")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.BindSampler = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble)', func)
			if ok then
				gl.MapGrid2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWindowPos2dvMESA")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.WindowPos2dvMESA = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramBinaryOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, GLsizei *, GLenum *, void *)', func)
			if ok then
				gl.GetProgramBinaryOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glWaitSync")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync, GLbitfield, GLuint64)', func)
			if ok then
				gl.WaitSync = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetPerfMonitorCounterDataAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLsizei, GLuint *, GLint *)', func)
			if ok then
				gl.GetPerfMonitorCounterDataAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFlushRasterSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)()', func)
			if ok then
				gl.FlushRasterSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCompressedTextureSubImage1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.CompressedTextureSubImage1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVertexAttribdv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLdouble *)', func)
			if ok then
				gl.GetVertexAttribdv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, const void **, GLint)', func)
			if ok then
				gl.NormalPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawArraysIndirectBindlessCountNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const void *, GLsizei, GLsizei, GLsizei, GLint)', func)
			if ok then
				gl.MultiDrawArraysIndirectBindlessCountNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3bvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLbyte *)', func)
			if ok then
				gl.NormalStream3bvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3dvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.NormalStream3dvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3fvATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.NormalStream3fvATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormalStream3ivATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.NormalStream3ivATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2svARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLshort *)', func)
			if ok then
				gl.MultiTexCoord2svARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3bv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLbyte *)', func)
			if ok then
				gl.Color3bv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetInternalformativ")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLint *)', func)
			if ok then
				gl.GetInternalformativ = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord1hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLhalfNV)', func)
			if ok then
				gl.MultiTexCoord1hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glListParameterivSGIX")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.ListParameterivSGIX = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLoadTransposeMatrixdARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLdouble *)', func)
			if ok then
				gl.LoadTransposeMatrixdARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexImage2DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLsizei, GLint, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.MultiTexImage2DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEdgeFlagPointerListIBM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLboolean **, GLint)', func)
			if ok then
				gl.EdgeFlagPointerListIBM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathColorGenNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PathColorGenNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLint *)', func)
			if ok then
				gl.GetnMapiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble)', func)
			if ok then
				gl.ProgramUniform1d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathGlyphsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const void *, GLbitfield, GLsizei, GL_LUA_ENUMS, const void *, GL_LUA_ENUMS, GLuint, GLfloat)', func)
			if ok then
				gl.PathGlyphsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glClearColorIuiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ClearColorIuiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsVertexArrayAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint)', func)
			if ok then
				gl.IsVertexArrayAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPathParameterfvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PathParameterfvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3sARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLshort, GLshort, GLshort)', func)
			if ok then
				gl.MultiTexCoord3sARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoordP4ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint)', func)
			if ok then
				gl.MultiTexCoordP4ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawBuffersATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLenum *)', func)
			if ok then
				gl.DrawBuffersATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelStorei")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.PixelStorei = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointAlongPathNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *)', func)
			if ok then
				gl.PointAlongPathNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTexGenParameterfvSGIS")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PixelTexGenParameterfvSGIS = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid1f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.MapGrid1f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIndexiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLint *)', func)
			if ok then
				gl.Indexiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteSyncAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsync)', func)
			if ok then
				gl.DeleteSyncAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform4dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexParameterIuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint *)', func)
			if ok then
				gl.GetTexParameterIuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPixelTransformParameterfvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.PixelTransformParameterfvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFogx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.Fogx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord4dARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.MultiTexCoord4dARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.MultiTexCoord2xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glStencilThenCoverFillPathInstancedNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, GL_LUA_ENUMS, const void *, GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfloat *)', func)
			if ok then
				gl.StencilThenCoverFillPathInstancedNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Vertex4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointSizePointerOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, const void *)', func)
			if ok then
				gl.PointSizePointerOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Vertex3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonOffsetEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat)', func)
			if ok then
				gl.PolygonOffsetEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord3bvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLbyte *)', func)
			if ok then
				gl.MultiTexCoord3bvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetNamedStringARB")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, const GLchar *, GLsizei, GLint *, GLchar *)', func)
			if ok then
				gl.GetNamedStringARB = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyTexImage1D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GL_LUA_ENUMS, GLint, GLint, GLsizei, GLint)', func)
			if ok then
				gl.CopyTexImage1D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex4f")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfloat, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.Vertex4f = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glEvalMesh2")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.EvalMesh2 = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetProgramSubroutineParameteruivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLuint *)', func)
			if ok then
				gl.GetProgramSubroutineParameteruivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNormal3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Normal3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDeleteFencesNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.DeleteFencesNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glVertex2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfloat *)', func)
			if ok then
				gl.Vertex2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionFilter2D")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLsizei, GL_LUA_ENUMS, GL_LUA_ENUMS, const void *)', func)
			if ok then
				gl.ConvolutionFilter2D = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramEnvParametersI4ivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramEnvParametersI4ivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedFramebufferTexture3DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint, GLint)', func)
			if ok then
				gl.NamedFramebufferTexture3DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLsizei, GL_LUA_ENUMS, const void *, GLsizei, GLint, GLuint)', func)
			if ok then
				gl.DrawElementsInstancedBaseVertexBaseInstance = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParameters4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLfloat *)', func)
			if ok then
				gl.ProgramLocalParameters4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramLocalParametersI4ivNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramLocalParametersI4ivNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnMapfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, GLfloat *)', func)
			if ok then
				gl.GetnMapfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapVertexAttrib1dAPPLE")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)', func)
			if ok then
				gl.MapVertexAttrib1dAPPLE = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glCopyConvolutionFilter1DEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint, GLint, GLsizei)', func)
			if ok then
				gl.CopyConvolutionFilter1DEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glBindSamplers")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLsizei, const GLuint *)', func)
			if ok then
				gl.BindSamplers = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glColor3hvNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLhalfNV *)', func)
			if ok then
				gl.Color3hvNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFreeObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint)', func)
			if ok then
				gl.FreeObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMap2d")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)', func)
			if ok then
				gl.Map2d = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPointParameterx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLfixed)', func)
			if ok then
				gl.PointParameterx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTexGenfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTexGenfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMapGrid2xOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint, GLfixed, GLfixed, GLfixed, GLfixed)', func)
			if ok then
				gl.MapGrid2xOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform1iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform1ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexCoord1hNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLhalfNV)', func)
			if ok then
				gl.TexCoord1hNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint)', func)
			if ok then
				gl.ProgramUniform1uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform1uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform1uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glFramebufferTextureOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLuint, GLint)', func)
			if ok then
				gl.FramebufferTextureOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLdouble *)', func)
			if ok then
				gl.ProgramUniform2dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform2fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTexEnvxv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const GLfixed *)', func)
			if ok then
				gl.TexEnvxv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glDebugMessageCallback")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLDEBUGPROC, const void *)', func)
			if ok then
				gl.DebugMessageCallback = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.ProgramUniform2i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.ProgramUniform2i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform2iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glConvolutionParameteriEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, GLint)', func)
			if ok then
				gl.ConvolutionParameteriEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRequestResidentProgramsNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLsizei, const GLuint *)', func)
			if ok then
				gl.RequestResidentProgramsNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSampleCoverageOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLboolean)', func)
			if ok then
				gl.SampleCoverageOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glExtGetBufferPointervQCOM")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, void **)', func)
			if ok then
				gl.ExtGetBufferPointervQCOM = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform2uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform2uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3dEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramUniform3dEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3fEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLfloat, GLfloat, GLfloat)', func)
			if ok then
				gl.ProgramUniform3fEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glLightModeliv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.LightModeliv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glSecondaryColor3ui")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GLuint)', func)
			if ok then
				gl.SecondaryColor3ui = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3i64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint64EXT *)', func)
			if ok then
				gl.ProgramUniform3i64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureParameterIiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, const GLint *)', func)
			if ok then
				gl.TextureParameterIiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetnHistogram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLboolean, GL_LUA_ENUMS, GL_LUA_ENUMS, GLsizei, void *)', func)
			if ok then
				gl.GetnHistogram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3ui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT)', func)
			if ok then
				gl.ProgramUniform3ui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3ui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint64EXT *)', func)
			if ok then
				gl.ProgramUniform3ui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3uiEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.ProgramUniform3uiEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform3uivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLuint *)', func)
			if ok then
				gl.ProgramUniform3uivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glPolygonOffsetxOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLfixed, GLfixed)', func)
			if ok then
				gl.PolygonOffsetxOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultMatrixx")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.MultMatrixx = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4i64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT)', func)
			if ok then
				gl.ProgramUniform4i64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNewObjectBufferATI")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLuint (*)(GLsizei, const void *, GL_LUA_ENUMS)', func)
			if ok then
				gl.NewObjectBufferATI = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4iEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLint, GLint, GLint, GLint)', func)
			if ok then
				gl.ProgramUniform4iEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniform4ivEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, const GLint *)', func)
			if ok then
				gl.ProgramUniform4ivEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix2dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glActiveShaderProgram")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint)', func)
			if ok then
				gl.ActiveShaderProgram = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2x3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramParameter4dNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)', func)
			if ok then
				gl.ProgramParameter4dNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix2x4fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix2x4fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glTextureViewEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GL_LUA_ENUMS, GLuint, GLuint, GLuint, GLuint)', func)
			if ok then
				gl.TextureViewEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiDrawElementsIndirectAMD")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, GL_LUA_ENUMS, const void *, GLsizei, GLsizei)', func)
			if ok then
				gl.MultiDrawElementsIndirectAMD = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetQueryBufferObjectuiv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLuint, GL_LUA_ENUMS, GLintptr)', func)
			if ok then
				gl.GetQueryBufferObjectuiv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glMultiTexCoord2dv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GL_LUA_ENUMS, const GLdouble *)', func)
			if ok then
				gl.MultiTexCoord2dv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x2fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3x2fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x2fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3x2fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetTextureLevelParameterfv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GL_LUA_ENUMS, GLfloat *)', func)
			if ok then
				gl.GetTextureLevelParameterfv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix3x4fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix3x4fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetVideoui64vNV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint64EXT *)', func)
			if ok then
				gl.GetVideoui64vNV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glNamedBufferSubData")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLintptr, GLsizeiptr, const void *)', func)
			if ok then
				gl.NamedBufferSubData = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x2fvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4x2fvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x3dvEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *)', func)
			if ok then
				gl.ProgramUniformMatrix4x3dvEXT = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformMatrix4x3fv")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)', func)
			if ok then
				gl.ProgramUniformMatrix4x3fv = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glProgramUniformui64NV")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GLint, GLuint64EXT)', func)
			if ok then
				gl.ProgramUniformui64NV = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glIsSync")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'GLboolean (*)(GLsync)', func)
			if ok then
				gl.IsSync = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glGetActiveSubroutineUniformName")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLuint, GL_LUA_ENUMS, GLuint, GLsizei, GLsizei *, GLchar *)', func)
			if ok then
				gl.GetActiveSubroutineUniformName = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("glRasterPos3xvOES")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(const GLfixed *)', func)
			if ok then
				gl.RasterPos3xvOES = func
			end
		end
	end
	do
		local func = gl.GetProcAddress("wglSwapIntervalEXT")
		if func ~= nil then
			local ok, func = pcall(ffi.cast, 'void (*)(GLint)', func)
			if ok then
				gl.SwapIntervalEXT = func
			end
		end
	end
	do -- VertexArray
		do
			local META = {}
			META.__index = META
			function META:ElementBuffer(buffer)
				return gl.VertexArrayElementBuffer(self.id, buffer)
			end
			function META:DisableAttrib(index)
				return gl.DisableVertexArrayAttrib(self.id, index)
			end
			function META:AttribFormat(attribindex, size, type, normalized, relativeoffset)
				return gl.VertexArrayAttribFormat(self.id, attribindex, size, type, normalized, relativeoffset)
			end
			function META:AttribLFormat(attribindex, size, type, relativeoffset)
				return gl.VertexArrayAttribLFormat(self.id, attribindex, size, type, relativeoffset)
			end
			function META:GetIndexediv(index, pname, param)
				return gl.GetVertexArrayIndexediv(self.id, index, pname, param)
			end
			function META:AttribIFormat(attribindex, size, type, relativeoffset)
				return gl.VertexArrayAttribIFormat(self.id, attribindex, size, type, relativeoffset)
			end
			function META:AttribBinding(attribindex, bindingindex)
				return gl.VertexArrayAttribBinding(self.id, attribindex, bindingindex)
			end
			function META:VertexBuffers(first, count, buffers, offsets, strides)
				return gl.VertexArrayVertexBuffers(self.id, first, count, buffers, offsets, strides)
			end
			function META:BindingDivisor(bindingindex, divisor)
				return gl.VertexArrayBindingDivisor(self.id, bindingindex, divisor)
			end
			function META:EnableAttrib(index)
				return gl.EnableVertexArrayAttrib(self.id, index)
			end
			function META:Getiv(pname, param)
				return gl.GetVertexArrayiv(self.id, pname, param)
			end
			function META:GetIndexed64iv(index, pname, param)
				return gl.GetVertexArrayIndexed64iv(self.id, index, pname, param)
			end
			function META:VertexBuffer(bindingindex, buffer, offset, stride)
				return gl.VertexArrayVertexBuffer(self.id, bindingindex, buffer, offset, stride)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteVertexArrays(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateVertexArray()
				local temp = ffi.new("GLuint[1]")
				gl.CreateVertexArrays(1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindVertexArray(self.id)
					end
					last = self
				end
			end
			function META:ElementBuffer(buffer)
				bind(self) return gl.VertexElementBuffer(buffer)
			end
			function META:DisableAttrib(index)
				bind(self) return gl.DisableVertexAttrib(index)
			end
			function META:AttribFormat(attribindex, size, type, normalized, relativeoffset)
				bind(self) return gl.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset)
			end
			function META:AttribLFormat(attribindex, size, type, relativeoffset)
				bind(self) return gl.VertexAttribLFormat(attribindex, size, type, relativeoffset)
			end
			function META:GetIndexediv(index, pname, param)
				bind(self) return gl.GetVertexIndexediv(index, pname, param)
			end
			function META:AttribIFormat(attribindex, size, type, relativeoffset)
				bind(self) return gl.VertexAttribIFormat(attribindex, size, type, relativeoffset)
			end
			function META:AttribBinding(attribindex, bindingindex)
				bind(self) return gl.VertexAttribBinding(attribindex, bindingindex)
			end
			function META:VertexBuffers(first, count, buffers, offsets, strides)
				bind(self) return gl.VertexVertexBuffers(first, count, buffers, offsets, strides)
			end
			function META:BindingDivisor(bindingindex, divisor)
				bind(self) return gl.VertexBindingDivisor(bindingindex, divisor)
			end
			function META:EnableAttrib(index)
				bind(self) return gl.EnableVertexAttribArray(index)
			end
			function META:Getiv(pname, param)
				bind(self) return gl.GetVertexiv(pname, param)
			end
			function META:GetIndexed64iv(index, pname, param)
				bind(self) return gl.GetVertexIndexed64iv(index, pname, param)
			end
			function META:VertexBuffer(bindingindex, buffer, offset, stride)
				bind(self) return gl.BindVertexBuffer(bindingindex, buffer, offset, stride)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteVertexArrays(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateVertexArrayNODSA()
				local self = setmetatable({}, META)
				self.id = gl.GenVertexArray()
				return self
			end
		end

		if not gl.CreateVertexArrays then
			gl.CreateVertexArray = gl.CreateVertexArrayNODSA
		end
	end
	do -- Framebuffer
		do
			local META = {}
			META.__index = META
			function META:Bind(target)
				return gl.BindFramebuffer(target, self.id)
			end
			function META:ReadBuffer(src)
				return gl.NamedFramebufferReadBuffer(self.id, src)
			end
			function META:DrawBuffers(n, bufs)
				return gl.NamedFramebufferDrawBuffers(self.id, n, bufs)
			end
			function META:GetAttachmentParameteriv(attachment, pname, params)
				return gl.GetNamedFramebufferAttachmentParameteriv(self.id, attachment, pname, params)
			end
			function META:Clearfi(buffer, depth, stencil)
				return gl.ClearNamedFramebufferfi(self.id, buffer, depth, stencil)
			end
			function META:Clearuiv(buffer, drawbuffer, value)
				return gl.ClearNamedFramebufferuiv(self.id, buffer, drawbuffer, value)
			end
			function META:Texture3D(attachment, textarget, texture, level, zoffset)
				return gl.NamedFramebufferTexture3DEXT(self.id, attachment, textarget, texture, level, zoffset)
			end
			function META:CheckStatus(target)
				return gl.CheckNamedFramebufferStatus(self.id, target)
			end
			function META:Blit(drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
				return gl.BlitNamedFramebuffer(self.id, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
			end
			function META:Clearfv(buffer, drawbuffer, value)
				return gl.ClearNamedFramebufferfv(self.id, buffer, drawbuffer, value)
			end
			function META:CheckStatusEXT(target)
				return gl.CheckNamedFramebufferStatusEXT(self.id, target)
			end
			function META:RenderbufferEXT(attachment, renderbuffertarget, renderbuffer)
				return gl.NamedFramebufferRenderbufferEXT(self.id, attachment, renderbuffertarget, renderbuffer)
			end
			function META:TextureLayer(attachment, texture, level, layer)
				return gl.NamedFramebufferTextureLayer(self.id, attachment, texture, level, layer)
			end
			function META:SetParameteri(pname, param)
				return gl.NamedFramebufferParameteri(self.id, pname, param)
			end
			function META:Texture2D(attachment, textarget, texture, level)
				return gl.NamedFramebufferTexture2D(self.id, attachment, textarget, texture, level)
			end
			function META:DrawBuffersEXT(n, bufs)
				return gl.FramebufferDrawBuffersEXT(self.id, n, bufs)
			end
			function META:Texture(attachment, texture, level)
				return gl.NamedFramebufferTexture(self.id, attachment, texture, level)
			end
			function META:GetParameterivEXT(pname, params)
				return gl.GetFramebufferParameterivEXT(self.id, pname, params)
			end
			function META:ParameteriEXT(pname, param)
				return gl.NamedFramebufferParameteriEXT(self.id, pname, param)
			end
			function META:GetAttachmentParameterivEXT(attachment, pname, params)
				return gl.GetNamedFramebufferAttachmentParameterivEXT(self.id, attachment, pname, params)
			end
			function META:ReadBufferEXT(mode)
				return gl.FramebufferReadBufferEXT(self.id, mode)
			end
			function META:TextureFace(attachment, texture, level, face)
				return gl.NamedFramebufferTextureFaceEXT(self.id, attachment, texture, level, face)
			end
			function META:TextureLayerEXT(attachment, texture, level, layer)
				return gl.NamedFramebufferTextureLayerEXT(self.id, attachment, texture, level, layer)
			end
			function META:Renderbuffer(attachment, renderbuffer)
				return gl.NamedFramebufferRenderbuffer(self.id, attachment, "GL_RENDERBUFFER", renderbuffer)
			end
			function META:CreateFramebuffers(framebuffers)
				return gl.CreateFramebuffers(self.id, framebuffers)
			end
			function META:Cleariv(buffer, drawbuffer, value)
				return gl.ClearNamedFramebufferiv(self.id, buffer, drawbuffer, value)
			end
			function META:InvalidateData(numAttachments, attachments)
				return gl.InvalidateNamedFramebufferData(self.id, numAttachments, attachments)
			end
			function META:Texture1D(attachment, textarget, texture, level)
				return gl.NamedFramebufferTexture1DEXT(self.id, attachment, textarget, texture, level)
			end
			function META:InvalidateSubData(numAttachments, attachments, x, y, width, height)
				return gl.InvalidateNamedFramebufferSubData(self.id, numAttachments, attachments, x, y, width, height)
			end
			function META:DrawBuffer(buf)
				return gl.NamedFramebufferDrawBuffer(self.id, buf)
			end
			function META:GetParameteriv(pname, param)
				return gl.GetNamedFramebufferParameteriv(self.id, pname, param)
			end
			function META:TextureEXT(attachment, texture, level)
				return gl.NamedFramebufferTextureEXT(self.id, attachment, texture, level)
			end
			function META:DrawBufferEXT(mode)
				return gl.FramebufferDrawBufferEXT(self.id, mode)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteFramebuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateFramebuffer(id)
				if id then
					local self = ffi.new(ctype)
					self.id = id
					return self
				else
					local temp = ffi.new("GLuint[1]")
					gl.CreateFramebuffers(1, temp)
					local self = ffi.new(ctype)
					self.id = temp[0]
					return self
				end
			end
		end

		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				local last_target
				function bind(self, target)
					if self.id ~= last or target ~= last_target then
						gl.BindFramebuffer(target, self.id)
					end
					last = self.id
					last_target = target
				end
				local func = gl.BindFramebuffer
				function gl.BindFramebuffer(target, id)
					if id ~= last or target ~= last_target then
						func(target, id)
					end
					last = id
					last_target = target
				end
			end
			function META:Bind(target)
				gl.BindFramebuffer(target, self.id)
			end
			function META:DrawBuffers(n, bufs)
				bind(self, "GL_FRAMEBUFFER") gl.DrawBuffers(n, bufs)
			end
			function META:DrawBuffer(mode)
				bind(self, "GL_FRAMEBUFFER") gl.DrawBuffer(mode)
			end
			function META:ReadBuffer(mode)
				bind(self, "GL_FRAMEBUFFER") gl.ReadBuffer(mode)
			end
			function META:GetAttachmentParameteriv(target, attachment, pname, params)
				bind(self, target) return gl.GetFramebufferAttachmentParameteriv(target, attachment, pname, params)
			end
			function META:Texture3D(target, attachment, textarget, texture, level, zoffset)
				bind(self, target) return gl.FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset)
			end
			function META:CheckStatus(target)
				bind(self, target) return gl.CheckFramebufferStatus(target)
			end
			function META:Blit(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
				bind(self, "GL_FRAMEBUFFER") return gl.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter)
			end
			function META:CheckStatusEXT(target)
				bind(self, target) return gl.CheckFramebufferStatusEXT(target)
			end
			function META:RenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer)
				bind(self, target) return gl.FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer)
			end
			function META:TextureLayer(attachment, texture, level, layer)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferTextureLayer("GL_FRAMEBUFFER", attachment, texture, level, layer)
			end
			function META:SetParameteri(target, pname, param)
				bind(self, target) return gl.FramebufferParameteri(target, pname, param)
			end
			function META:Texture2D(attachment, textarget, texture, level)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferTexture2DEXT("GL_FRAMEBUFFER", attachment, textarget, texture, level)
			end
			function META:DrawBuffersEXT(n, bufs)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferDrawBuffersEXT(self.id, n, bufs)
			end
			function META:Texture(attachment, texture, level)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferTexture("GL_FRAMEBUFFER", attachment, texture, level)
			end
			function META:GetParameterivEXT(pname, params)
				bind(self, "GL_FRAMEBUFFER") return gl.GetFramebufferParameterivEXT(self.id, pname, params)
			end
			function META:GetAttachmentParameterivEXT(target, attachment, pname, params)
				bind(self, target) return gl.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, params)
			end
			function META:ReadBufferEXT(mode)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferReadBufferEXT(self.id, mode)
			end
			function META:TextureFace(target, attachment, texture, level, face)
				bind(self, target) return gl.FramebufferTextureFaceEXT(target, attachment, texture, level, face)
			end
			function META:TextureLayerEXT(target, attachment, texture, level, layer)
				bind(self, target) return gl.FramebufferTextureLayerEXT(target, attachment, texture, level, layer)
			end
			function META:Renderbuffer(attachment, renderbuffer)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferRenderbuffer("GL_FRAMEBUFFER", attachment, "GL_RENDERBUFFER", renderbuffer)
			end
			function META:Texture1D(target, attachment, textarget, texture, level)
				bind(self, target) return gl.FramebufferTexture1DEXT(target, attachment, textarget, texture, level)
			end
			function META:GetParameteriv(target, pname, params)
				bind(self, target) return gl.GetFramebufferParameteriv(target, pname, params)
			end
			function META:TextureEXT(target, attachment, texture, level)
				bind(self, target) return gl.FramebufferTextureEXT(target, attachment, texture, level)
			end
			function META:DrawBufferEXT(mode)
				bind(self, "GL_FRAMEBUFFER") return gl.FramebufferDrawBufferEXT(self.id, mode)
			end
			function META:Cleariv(buffer, drawbuffer, value)
				bind(self, "GL_FRAMEBUFFER") gl.ClearBufferiv(buffer, drawbuffer, value)
			end
			function META:Clearuiv(buffer, drawbuffer, value)
				bind(self, "GL_FRAMEBUFFER") gl.ClearBufferuiv(buffer, drawbuffer, value)
			end
			function META:Clearfv(buffer, drawbuffer, value)
				bind(self, "GL_FRAMEBUFFER") gl.ClearBufferfv(buffer, drawbuffer, value)
			end
			function META:Clearfi(buffer, drawbuffer, depth, stencil)
				bind(self, "GL_FRAMEBUFFER") gl.ClearBufferfi(buffer, drawbuffer, depth, stencil)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteFramebuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateFramebufferNODSA(id)
				local self = setmetatable({}, META)
				self.id = id or gl.GenFramebuffer()
				return self
			end
		end

		if not gl.CreateFramebuffers then
			gl.CreateFramebuffer = gl.CreateFramebufferNODSA
		end
	end
	do -- Buffer
		do
			local META = {}
			META.__index = META
			function META:CreateBuffers(buffers)
				return gl.CreateBuffers(self.id, buffers)
			end
			function META:ClearData(internalformat, format, type, data)
				return gl.ClearNamedBufferData(self.id, internalformat, format, type, data)
			end
			function META:Data(size, data, usage)
				return gl.NamedBufferData(self.id, size, data, usage)
			end
			function META:Map(access)
				return gl.MapNamedBuffer(self.id, access)
			end
			function META:GetPointerv(pname, params)
				return gl.GetNamedBufferPointerv(self.id, pname, params)
			end
			function META:SetSubData(offset, size, data)
				return gl.NamedBufferSubData(self.id, offset, size, data)
			end
			function META:MapRange(offset, length, access)
				return gl.MapNamedBufferRange(self.id, offset, length, access)
			end
			function META:GetParameteri64v(pname, params)
				return gl.GetNamedBufferParameteri64v(self.id, pname, params)
			end
			function META:FlushMappedRange(offset, length)
				return gl.FlushMappedNamedBufferRange(self.id, offset, length)
			end
			function META:GetSubData(offset, size, data)
				return gl.GetNamedBufferSubData(self.id, offset, size, data)
			end
			function META:Storage(size, data, flags)
				return gl.NamedBufferStorage(self.id, size, data, flags)
			end
			function META:CopySubData(writeBuffer, readOffset, writeOffset, size)
				return gl.CopyNamedBufferSubData(self.id, writeBuffer, readOffset, writeOffset, size)
			end
			function META:GetParameteriv(pname, params)
				return gl.GetNamedBufferParameteriv(self.id, pname, params)
			end
			function META:ClearSubData(internalformat, offset, size, format, type, data)
				return gl.ClearNamedBufferSubData(self.id, internalformat, offset, size, format, type, data)
			end
			function META:Unmap()
				return gl.UnmapNamedBuffer(self.id)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteBuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateBuffer()
				local temp = ffi.new("GLuint[1]")
				gl.CreateBuffers(1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindBuffer(self.target, self.id)
					end
					last = self
				end
			end
			function META:Bind()
				bind(self)
			end
			function META:ClearData(internalformat, format, type, data)
				bind(self) return gl.ClearBufferData(self.target, internalformat, format, type, data)
			end
			function META:Data(size, data, usage)
				bind(self) return gl.BufferData(self.target, size, data, usage)
			end
			function META:Map(access)
				bind(self) return gl.MapBuffer(self.target, access)
			end
			function META:GetPointerv(pname, params)
				bind(self) return gl.GetBufferPointerv(self.target, pname, params)
			end
			function META:SetSubData(offset, size, data)
				bind(self) return gl.BufferSubData(self.target, offset, size, data)
			end
			function META:MapRange(length, access)
				bind(self) return gl.self.self.MapBufferRange(target, offset, length, access)
			end
			function META:GetParameteri64v(pname, params)
				bind(self) return gl.GetBufferParameteri64v(self.target, pname, params)
			end
			function META:FlushMappedRange(offset, length)
				bind(self) return gl.FlushMappedBufferRange(self.target, offset, length)
			end
			function META:GetSubData(offset, size, data)
				bind(self) return gl.GetBufferSubData(self.target, offset, size, data)
			end
			function META:Storage(size, data, flags)
				bind(self) return gl.self.BufferStorage(target, size, data, flags)
			end
			function META:CopySubData(readTarget, writeTarget, readOffset, writeOffset, size)
				bind(self) return gl.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size)
			end
			function META:GetParameteriv(pname, params)
				bind(self) return gl.GetBufferParameteriv(self.target, pname, params)
			end
			function META:ClearSubData(internalformat, offset, size, format, type, data)
				bind(self) return gl.ClearBufferSubData(self.target, internalformat, offset, size, format, type, data)
			end
			function META:Unmap()
				bind(self) return gl.UnmapBuffer(self.target)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteBuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateBufferNODSA(target)
				local self = setmetatable({}, META)
				self.id = gl.GenBuffer()
				self.target = target -- non dsa specific
				return self
			end
		end
		if not gl.CreateBuffers then
			gl.CreateBuffer = gl.CreateBufferNODSA
		end
	end
	do -- ProgramPipeline
		do
			local META = {}
			META.__index = META
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteProgramPipelines(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateProgramPipeline()
				local temp = ffi.new("GLuint[1]")
				gl.CreateProgramPipelines(1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindProgramPipeline(self.id)
					end
					last = self
				end
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteProgramPipelines(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateProgramPipelineNODSA()
				local self = setmetatable({}, META)
				self.id = gl.GenProgramPipeline()
				return self
			end
		end

		if not gl.CreateProgramPipelines then
			gl.CreateProgramPipeline = gl.CreateProgramPipelineNODSA
		end
	end
	do -- Program
		local META = {}
		META.__index = META
		function META:AttachShader(shader) return gl.AttachShader(self.id, shader) end
		function META:DetachShader(shader) return gl.AttachShader(self.id, shader) end
		function META:Link() return gl.LinkProgram(self.id) end
		function META:Use() return gl.UseProgram(self.id) end
		function META:GetInfoLog(...) return gl.GetProgramInfoLog(self.id, ...) end
		function META:Parameteri(pname, value) return gl.ProgramParameteri(self.id, pname, value) end
		function META:UniformBlockBinding(blockindex, blockbinding) return gl.UniformBlockBinding(self.id, blockindex, blockbinding) end
		function META:ShaderStorageBlockBinding(blockindex, blockbinding) return gl.ShaderStorageBlockBinding(self.id, blockindex, blockbinding) end

		function META:Getiv(pname, params) return gl.GetProgramiv(self.id, pname, params) end
		function META:GetUniformLocation(name) return gl.GetUniformLocation(self.id, name) end
		function META:GetUniformBlockIndex(name) return gl.GetUniformBlockIndex(self.id, name) end

		function META:BindAttribLocation(index, name) return gl.BindAttribLocation(self.id, index, name) end

		function META:UniformHandleui64(location, value) return gl.ProgramUniformHandleui64ARB(self.id, location, value) end

		for i = 1, 4 do
		for _, t in ipairs({"i", "f", "d"}) do
		for _, v in ipairs({"", "v"}) do
			local func = gl["ProgramUniform" .. i .. t .. v]
			local friendly = "Uniform" .. i .. t .. v
			if v == "v" then
				META[friendly] = function(self, location, count, value) return func(self.id, location, count, value) end
			else
				if i == 1 then
					META[friendly] = function(self, location, a) return func(self.id, location, a) end
				elseif i == 2 then
					META[friendly] = function(self, location, a,b) return func(self.id, location, a,b) end
				elseif i == 3 then
					META[friendly] = function(self, location, a,b,c) return func(self.id, location, a,b,c) end
				elseif i == 4 then
					META[friendly] = function(self, location, a,b,c,d) return func(self.id, location, a,b,c,d) end
				end
			end
		end
		end
		end

		for i = 1, 4 do
			local func = gl["ProgramUniform" .. i .. "uiv"]
			META["Uniform" .. i .. "uiv"] = function(self, location, count, value) return func(self.id, location, count, value) end
		end

		function META:Uniform1ui(location, a) return gl.ProgramUniform1ui(self.id, location, a) end
		function META:Uniform2ui(location, a,b) return gl.ProgramUniform2ui(self.id, location, a,b) end
		function META:Uniform3ui(location, a,b,c) return gl.ProgramUniform3ui(self.id, location, a,b,c) end
		function META:Uniform4ui(location, a,b,c,d) return gl.ProgramUniform4ui(self.id, location, a,b,c,d) end

		for i = 2, 4 do
		for _, t in ipairs({"f", "d"}) do
		for _, v in ipairs({"", "v"}) do
			local func = gl["ProgramUniformMatrix" .. i .. t .. v]
			META["UniformMatrix" .. i .. t .. v] = function(self, location, count, transpose, value) return func(self.id, location, count, transpose, value) end
		end
		end
		end

		for _, i in ipairs({"2x3", "3x2", "2x4", "4x2", "3x4", "4x3"}) do
		for _, t in ipairs({"f", "d"}) do
		for _, v in ipairs({"", "v"}) do
			local func = gl["ProgramUniformMatrix" .. i .. t .. v]
			META["UniformMatrix" .. i .. t .. v] = function(self, location, count, transpose, value) return func(self.id, location, count, transpose, value) end
		end
		end
		end

		function META:Delete()
			gl.DeleteProgram(self.id)
		end
		function gl.CreateProgram2()
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			local self = ffi.new(ctype)
			self.id = gl.CreateProgram()
			return self
		end
	end
	do -- Shader
		local META = {}
		META.__index = META
		function META:Source(count, string, length) return gl.ShaderSource(self.id, count, string, length) end
		function META:Compile() return gl.CompileShader(self.id) end
		function META:Getiv(pname, params) return gl.GetShaderiv(self.id, pname, params) end
		function META:GetInfoLog(...) return gl.GetShaderInfoLog(self.id, ...) end

		function META:Delete()
			gl.DeleteShader(self.id)
		end
		function gl.CreateShader2(type)
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			local self = ffi.new(ctype)
			self.id = gl.CreateShader(type)
			return self
		end
	end
	do -- Sampler
		do
			local META = {}
			META.__index = META
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteSamplers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateSampler()
				local temp = ffi.new("GLuint[1]")
				gl.CreateSamplers(1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindSampler(self.id)
					end
					last = self
				end
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteSamplers(1, ffi.new('GLuint[1]', self.id))
			end

			function gl.CreateSamplerNODSA()
				local self = setmetatable({}, META)
				self.id = gl.GenSampler()
				return self
			end
		end
		if not gl.CreateSamplers then
			gl.CreateSampler = gl.CreateSamplerNODSA
		end
	end
	do -- Renderbuffer
		do
			local META = {}
			META.__index = META
			function META:GetParameterivEXT(pname, params)
				return gl.GetNamedRenderbufferParameterivEXT(self.id, pname, params)
			end
			function META:StorageMultisample(target, samples, internalformat, width, height)
				return gl.NamedRenderbufferStorageMultisample(self.id, samples, internalformat, width, height)
			end
			function META:StorageEXT(internalformat, width, height)
				return gl.NamedRenderbufferStorageEXT(self.id, internalformat, width, height)
			end
			function META:Storage(internalformat, width, height)
				return gl.NamedRenderbufferStorage(self.id, internalformat, width, height)
			end
			function META:StorageMultisampleEXT(samples, internalformat, width, height)
				return gl.NamedRenderbufferStorageMultisampleEXT(self.id, samples, internalformat, width, height)
			end
			function META:StorageMultisampleCoverage(coverageSamples, colorSamples, internalformat, width, height)
				return gl.NamedRenderbufferStorageMultisampleCoverageEXT(self.id, coverageSamples, colorSamples, internalformat, width, height)
			end
			function META:GetParameteriv(pname, params)
				return gl.GetNamedRenderbufferParameteriv(self.id, pname, params)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteRenderbuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateRenderbuffer()
				local temp = ffi.new("GLuint[1]")
				gl.CreateRenderbuffers(1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META
			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindRenderbuffer("GL_RENDERBUFFER", self.id)
					end
					last = self
				end
			end
			function META:GetParameterivEXT(target, pname, params)
				bind(self) return gl.GetRenderbufferParameterivEXT(target, pname, params)
			end
			function META:StorageMultisample(target, samples, internalformat, width, height)
				bind(self) return gl.RenderbufferStorageMultisample(target, samples, internalformat, width, height)
			end
			function META:StorageEXT(target, internalformat, width, height)
				bind(self) return gl.RenderbufferStorageEXT(target, internalformat, width, height)
			end
			function META:Storage(internalformat, width, height)
				bind(self) return gl.RenderbufferStorage("GL_RENDERBUFFER", internalformat, width, height)
			end
			function META:StorageMultisampleEXT(target, samples, internalformat, width, height)
				bind(self) return gl.RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height)
			end
			function META:CreateRenderbuffers(n, renderbuffers)
				bind(self) return gl.CreateRenderbuffers(n, self.ids)
			end
			function META:GetParameteriv(target, pname, params)
				bind(self) return gl.GetRenderbufferParameteriv(target, pname, params)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteRenderbuffers(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateRenderbufferNODSA()
				local self = setmetatable({}, META)
				self.id = gl.GenRenderbuffer()
				return self
			end
		end
		if not gl.CreateRenderbuffers then
			gl.CreateRenderbuffer = gl.CreateRenderbufferNODSA
		end
	end
	do -- Texture
		do
			local META = {}
			META.__index = META

			function META:Bind(location)
				return gl.BindTextureUnit(location, self.id)
			end
			function META:SubImage1DEXT(target, level, xoffset, width, format, type, pixels)
				return gl.TextureSubImage1DEXT(self.id, target, level, xoffset, width, format, type, pixels)
			end
			function META:GetImageEXT(target, level, format, type, pixels)
				return gl.GetTextureImageEXT(self.id, target, level, format, type, pixels)
			end
			function META:Storage2DMultisampleEXT(target, samples, internalformat, width, height, fixedsamplelocations)
				return gl.TextureStorage2DMultisampleEXT(self.id, target, samples, internalformat, width, height, fixedsamplelocations)
			end
			function META:CopySubImage1D(level, xoffset, x, y, width)
				return gl.CopyTextureSubImage1D(self.id, level, xoffset, x, y, width)
			end
			function META:GetImage(level, format, type, bufSize, pixels)
				return gl.GetTextureImage(self.id, level, format, type, bufSize, pixels)
			end
			function META:CopyImage2D(target, level, internalformat, x, y, width, height, border)
				return gl.CopyTextureImage2DEXT(self.id, target, level, internalformat, x, y, width, height, border)
			end
			function META:Storage1D(levels, internalformat, width)
				return gl.TextureStorage1D(self.id, levels, internalformat, width)
			end
			function META:GetParameterIivEXT(target, pname, params)
				return gl.GetTextureParameterIivEXT(self.id, target, pname, params)
			end
			function META:BufferRange(internalformat, buffer, offset, size)
				return gl.TextureBufferRange(self.id, internalformat, buffer, offset, size)
			end
			function META:GetCompressedImage(level, bufSize, pixels)
				return gl.GetCompressedTextureImage(self.id, level, bufSize, pixels)
			end
			function META:GetParameterIiv(pname, params)
				return gl.GetTextureParameterIiv(self.id, pname, params)
			end
			function META:IsEXT()
				return gl.IsTextureEXT(self.id)
			end
			function META:Image1D(target, level, internalformat, width, border, format, type, pixels)
				return gl.TextureImage1DEXT(self.id, target, level, internalformat, width, border, format, type, pixels)
			end
			function META:SetParameterIiv(target, pname, params)
				return gl.TextureParameterIivEXT(self.id, target, pname, params)
			end
			function META:GetLevelParameterivEXT(target, level, pname, params)
				return gl.GetTextureLevelParameterivEXT(self.id, target, level, pname, params)
			end
			function META:GetParameterivEXT(target, pname, params)
				return gl.GetTextureParameterivEXT(self.id, target, pname, params)
			end
			function META:GetLevelParameterfv(level, pname, params)
				return gl.GetTextureLevelParameterfv(self.id, level, pname, params)
			end
			function META:BufferRangeEXT(target, internalformat, buffer, offset, size)
				return gl.TextureBufferRangeEXT(self.id, target, internalformat, buffer, offset, size)
			end
			function META:Image2D(target, level, internalformat, width, height, border, format, type, pixels)
				return gl.TextureImage2DEXT(self.id, target, level, internalformat, width, height, border, format, type, pixels)
			end
			function META:CopySubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height)
				return gl.CopyTextureSubImage3DEXT(self.id, target, level, xoffset, yoffset, zoffset, x, y, width, height)
			end
			function META:CompressedSubImage2D(level, xoffset, yoffset, width, height, format, imageSize, data)
				return gl.CompressedTextureSubImage2D(self.id, level, xoffset, yoffset, width, height, format, imageSize, data)
			end
			function META:GetParameterIuiv(pname, params)
				return gl.GetTextureParameterIuiv(self.id, pname, params)
			end
			function META:Image3D(target, level, internalformat, width, height, depth, border, format, type, pixels)
				return gl.TextureImage3DEXT(self.id, target, level, internalformat, width, height, depth, border, format, type, pixels)
			end
			function META:CompressedImage2D(target, level, internalformat, width, height, border, imageSize, bits)
				return gl.CompressedTextureImage2DEXT(self.id, target, level, internalformat, width, height, border, imageSize, bits)
			end
			function META:GetParameterIuivEXT(target, pname, params)
				return gl.GetTextureParameterIuivEXT(self.id, target, pname, params)
			end
			function META:CompressedSubImage3D(level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
				return gl.CompressedTextureSubImage3D(self.id, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
			end
			function META:Buffer(internalformat, buffer)
				return gl.TextureBuffer(self.id, internalformat, buffer)
			end
			function META:ParameteriEXT(target, pname, param)
				return gl.TextureParameteriEXT(self.id, target, pname, param)
			end
			function META:Is()
				return gl.IsTexture(self.id)
			end
			function META:SubImage3D(level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
				return gl.TextureSubImage3D(self.id, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
			end
			function META:CompressedSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, imageSize, bits)
				return gl.CompressedTextureSubImage2DEXT(self.id, target, level, xoffset, yoffset, width, height, format, imageSize, bits)
			end
			function META:CompressedImage3D(target, level, internalformat, width, height, depth, border, imageSize, bits)
				return gl.CompressedTextureImage3DEXT(self.id, target, level, internalformat, width, height, depth, border, imageSize, bits)
			end
			function META:Renderbuffer(target, renderbuffer)
				return gl.TextureRenderbufferEXT(self.id, target, renderbuffer)
			end
			function META:CompressedSubImage1DEXT(target, level, xoffset, width, format, imageSize, bits)
				return gl.CompressedTextureSubImage1DEXT(self.id, target, level, xoffset, width, format, imageSize, bits)
			end
			function META:Storage3DMultisample(samples, internalformat, width, height, depth, fixedsamplelocations)
				return gl.TextureStorage3DMultisample(self.id, samples, internalformat, width, height, depth, fixedsamplelocations)
			end
			function META:SetParameterf(pname, param)
				return gl.TextureParameterf(self.id, pname, param)
			end
			function META:BindUnit(texture)
				return gl.BindTextureUnit(self.id, texture)
			end
			function META:Storage3D(levels, internalformat, width, height, depth)
				return gl.TextureStorage3D(self.id, levels, internalformat, width, height, depth)
			end
			function META:ParameterfEXT(target, pname, param)
				return gl.TextureParameterfEXT(self.id, target, pname, param)
			end
			function META:CopySubImage2D(level, xoffset, yoffset, x, y, width, height)
				return gl.CopyTextureSubImage2D(self.id, level, xoffset, yoffset, x, y, width, height)
			end
			function META:SetParameteriv(target, pname, params)
				return gl.TextureParameterivEXT(self.id, target, pname, params)
			end
			function META:CopySubImage1DEXT(target, level, xoffset, x, y, width)
				return gl.CopyTextureSubImage1DEXT(self.id, target, level, xoffset, x, y, width)
			end
			function META:BufferEXT(target, internalformat, buffer)
				return gl.TextureBufferEXT(self.id, target, internalformat, buffer)
			end
			function META:GetLevelParameterfvEXT(target, level, pname, params)
				return gl.GetTextureLevelParameterfvEXT(self.id, target, level, pname, params)
			end
			function META:SetParameterfv(pname, params)
				return gl.TextureParameterfv(self.id, pname, params)
			end
			function META:CompressedImage1D(target, level, internalformat, width, border, imageSize, bits)
				return gl.CompressedTextureImage1DEXT(self.id, target, level, internalformat, width, border, imageSize, bits)
			end
			function META:SetParameteri(pname, param)
				return gl.TextureParameteri(self.id, pname, param)
			end
			function META:GetParameteriv(pname, params)
				return gl.GetTextureParameteriv(self.id, pname, params)
			end
			function META:CopySubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height)
				return gl.CopyTextureSubImage2DEXT(self.id, target, level, xoffset, yoffset, x, y, width, height)
			end
			function META:SetParameterIuiv(pname, params)
				return gl.TextureParameterIuiv(self.id, pname, params)
			end
			function META:Storage2DMultisample(samples, internalformat, width, height, fixedsamplelocations)
				return gl.TextureStorage2DMultisample(self.id, samples, internalformat, width, height, fixedsamplelocations)
			end
			function META:CompressedSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
				return gl.CompressedTextureSubImage3DEXT(self.id, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
			end
			function META:GenerateMipmapEXT(target)
				return gl.GenerateTextureMipmapEXT(self.id, target)
			end
			function META:GetParameterfvEXT(target, pname, params)
				return gl.GetTextureParameterfvEXT(self.id, target, pname, params)
			end
			function META:GenerateMipmap()
				return gl.GenerateTextureMipmap(self.id)
			end
			function META:CopyImage1D(target, level, internalformat, x, y, width, border)
				return gl.CopyTextureImage1DEXT(self.id, target, level, internalformat, x, y, width, border)
			end
			function META:GetParameterfv(pname, params)
				return gl.GetTextureParameterfv(self.id, pname, params)
			end
			function META:CompressedSubImage1D(level, xoffset, width, format, imageSize, data)
				return gl.CompressedTextureSubImage1D(self.id, level, xoffset, width, format, imageSize, data)
			end
			function META:SubImage1D(level, xoffset, width, format, type, pixels)
				return gl.TextureSubImage1D(self.id, level, xoffset, width, format, type, pixels)
			end
			function META:CopySubImage3D(level, xoffset, yoffset, zoffset, x, y, width, height)
				return gl.CopyTextureSubImage3D(self.id, level, xoffset, yoffset, zoffset, x, y, width, height)
			end
			function META:GetLevelParameteriv(level, pname, params)
				return gl.GetTextureLevelParameteriv(self.id, level, pname, params)
			end
			function META:Storage2D(levels, internalformat, width, height)
				return gl.TextureStorage2D(self.id, levels, internalformat, width, height)
			end
			function META:SubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels)
				return gl.TextureSubImage2DEXT(self.id, target, level, xoffset, yoffset, width, height, format, type, pixels)
			end
			function META:SubImage2D(level, xoffset, yoffset, width, height, format, type, pixels)
				return gl.TextureSubImage2D(self.id, level, xoffset, yoffset, width, height, format, type, pixels)
			end
			function META:GetCompressedImageEXT(target, lod, img)
				return gl.GetCompressedTextureImageEXT(self.id, target, lod, img)
			end
			function META:SubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
				return gl.TextureSubImage3DEXT(self.id, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
			end
			local ctype = ffi.typeof('struct { int id; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteTextures(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateTexture(target)
				local temp = ffi.new('GLuint[1]')
				gl.CreateTextures(target, 1, temp)
				local self = ffi.new(ctype)
				self.id = temp[0]
				return self
			end
		end
		do
			local META = {}
			META.__index = META

			local bind
			do
				local last
				function bind(self)
					if self ~= last then
						gl.BindTexture(self.target, self.id)
					end
					last = self
				end
				local func = gl.BindTexture
				function gl.BindTexture(target, id)
					func(target, id)
					last = nil
				end

				local base = gl.e.GL_TEXTURE0

				function META:Bind(location)
					last = nil
					gl.ActiveTexture(base + location)
					bind(self)
				end
			end

			function META:SubImage1DEXT(level, xoffset, width, format, type, pixels)
				bind(self) return gl.TexSubImage1DEXT(self.target, level, xoffset, width, format, type, pixels)
			end
			function META:GetImageEXT(texture, level, format, type, pixels)
				bind(self) return gl.GetTextureImageEXT(texture, self.target, level, format, type, pixels)
			end
			function META:Storage2DMultisampleEXT(texture, samples, internalformat, width, height, fixedsamplelocations)
				bind(self) return gl.TextureStorage2DMultisampleEXT(texture, self.target, samples, internalformat, width, height, fixedsamplelocations)
			end
			function META:CopySubImage1D(level, xoffset, x, y, width)
				bind(self) return gl.CopyTexSubImage1D(self.target, level, xoffset, x, y, width)
			end
			function META:GetImage(level, format, type, _, pixels)
				bind(self) return gl.GetTexImage(self.target, level, format, type, pixels)
			end
			function META:CopyImage2D(level, internalformat, x, y, width, height, border)
				bind(self) return gl.CopyTexImage2DEXT(self.target, level, internalformat, x, y, width, height, border)
			end
			function META:Storage1D(levels, internalformat, width)
				bind(self) return gl.TexStorage1D(self.target, levels, internalformat, width)
			end
			function META:GetParameterIivEXT(pname, params)
				bind(self) return gl.GetTexParameterIivEXT(self.target, pname, params)
			end
			function META:BufferRange(internalformat, buffer, offset, size)
				bind(self) return gl.TexBufferRange("GL_TEXTURE_BUFFER",  internalformat,  buffer,  offset,  size)
			end
			function META:GetCompressedImage(level, img)
				bind(self) return gl.GetCompressedTexImage(self.target, level, img)
			end
			function META:GetParameterIiv(pname, params)
				bind(self) return gl.GetTexParameterIiv(self.target, pname, params)
			end
			function META:IsEXT(texture)
				bind(self) return gl.IsTextureEXT(texture)
			end
			function META:Image1D(texture, level, internalformat, width, border, format, type, pixels)
				bind(self) return gl.TextureImage1DEXT(texture, self.target, level, internalformat, width, border, format, type, pixels)
			end
			function META:SetParameterIiv(pname, params)
				bind(self) return gl.TexParameterIivEXT(self.target, pname, params)
			end
			function META:GetLevelParameterivEXT(texture, level, pname, params)
				bind(self) return gl.GetTextureLevelParameterivEXT(texture, self.target, level, pname, params)
			end
			function META:GetParameterivEXT(texture, pname, params)
				bind(self) return gl.GetTextureParameterivEXT(texture, self.target, pname, params)
			end
			function META:GetLevelParameterfv(level, pname, params)
				bind(self) return gl.GetTexLevelParameterfv(self.target, level, pname, params)
			end
			function META:BufferRangeEXT(internalformat, buffer, offset, size)
				bind(self) return gl.TexBufferRangeEXT("GL_TEXTURE_BUFFER",  internalformat,  buffer,  offset,  size)
			end
			function META:Image2D(target, level, internalformat, width, height, border, format, type, pixels)
				bind(self) return gl.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels)
			end
			function META:CopySubImage3DEXT(level, xoffset, yoffset, zoffset, x, y, width, height)
				bind(self) return gl.CopyTexSubImage3DEXT(self.target, level, xoffset, yoffset, zoffset, x, y, width, height)
			end
			function META:CompressedSubImage2D(level, xoffset, yoffset, width, height, format, imageSize, data)
				bind(self) return gl.CompressedTexSubImage2D(self.target, level, xoffset, yoffset, width, height, format, imageSize, data)
			end
			function META:GetParameterIuiv(pname, params)
				bind(self) return gl.GetTexParameterIuiv(self.target, pname, params)
			end
			function META:Image3D(target, level, internalformat, width, height, depth, border, format, type, pixels)
				bind(self) return gl.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels)
			end
			function META:CompressedImage2D(texture, level, internalformat, width, height, border, imageSize, bits)
				bind(self) return gl.CompressedTextureImage2DEXT(texture, self.target, level, internalformat, width, height, border, imageSize, bits)
			end
			function META:GetParameterIuivEXT(pname, params)
				bind(self) return gl.GetTexParameterIuivEXT(self.target, pname, params)
			end
			function META:CompressedSubImage3D(level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
				bind(self) return gl.CompressedTexSubImage3D(self.target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
			end
			function META:Buffer(internalformat, buffer)
				bind(self) return gl.TexBuffer("GL_TEXTURE_BUFFER",  internalformat,  buffer)
			end
			function META:ParameteriEXT(texture, pname, param)
				bind(self) return gl.TextureParameteriEXT(texture, self.target, pname, param)
			end
			function META:Is(texture)
				bind(self) return gl.IsTexture(texture)
			end
			function META:SubImage3D(level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
				bind(self)
				if self.target == "GL_TEXTURE_CUBE_MAP" then
					return gl.TexSubImage2D(gl.e.GL_TEXTURE_CUBE_MAP_POSITIVE_X + zoffset, level, xoffset, yoffset, width, height, format, type, pixels)
				end
				return gl.TexSubImage3D(self.target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
			end
			function META:CompressedSubImage2D(level, xoffset, yoffset, width, height, format, imageSize, bits)
				bind(self) return gl.CompressedTexSubImage2D(self.target, level, xoffset, yoffset, width, height, format, imageSize, bits)
			end
			function META:CompressedImage3D(texture, level, internalformat, width, height, depth, border, imageSize, bits)
				bind(self) return gl.CompressedTextureImage3DEXT(texture, self.target, level, internalformat, width, height, depth, border, imageSize, bits)
			end
			function META:Renderbuffer(texture, renderbuffer)
				bind(self) return gl.TextureRenderbufferEXT(texture, self.target, renderbuffer)
			end
			function META:CompressedSubImage1DEXT(texture, level, xoffset, width, format, imageSize, bits)
				bind(self) return gl.CompressedTextureSubImage1DEXT(texture, self.target, level, xoffset, width, format, imageSize, bits)
			end
			function META:Storage3DMultisample(samples, internalformat, width, height, depth, fixedsamplelocations)
				bind(self) return gl.TexStorage3DMultisample(self.target, samples, internalformat, width, height, depth, fixedsamplelocations)
			end
			function META:SetParameterf(pname, param)
				bind(self) return gl.TexParameterf(self.target, pname, param)
			end
			function META:BindUnit(unit, texture)
				bind(self) return gl.BindTextureUnit(unit, texture)
			end
			function META:Storage3D(levels, internalformat, width, height, depth)
				bind(self) return gl.TexStorage3D(self.target, levels, internalformat, width, height, depth)
			end
			function META:ParameterfEXT(texture, pname, param)
				bind(self) return gl.TextureParameterfEXT(texture, self.target, pname, param)
			end
			function META:CopySubImage2D(level, xoffset, yoffset, x, y, width, height)
				bind(self) return gl.CopyTexSubImage2D(self.target, level, xoffset, yoffset, x, y, width, height)
			end
			function META:SetParameteriv(texture, pname, params)
				bind(self) return gl.TextureParameterivEXT(texture, self.target, pname, params)
			end
			function META:CopySubImage1DEXT(level, xoffset, x, y, width)
				bind(self) return gl.CopyTexSubImage1DEXT(self.target, level, xoffset, x, y, width)
			end
			function META:BufferEXT(internalformat, buffer)
				bind(self) return gl.TexBufferEXT(self.target, internalformat, buffer)
			end
			function META:GetLevelParameterfvEXT(texture, level, pname, params)
				bind(self) return gl.GetTextureLevelParameterfvEXT(texture, self.target, level, pname, params)
			end
			function META:SetParameterfv(pname, param)
				bind(self) return gl.TexParameterfv(self.target, pname, param)
			end
			function META:CompressedImage1D(texture, level, internalformat, width, border, imageSize, bits)
				bind(self) return gl.CompressedTextureImage1DEXT(texture, self.target, level, internalformat, width, border, imageSize, bits)
			end
			function META:SetParameteri(pname, param)
				bind(self) return gl.TexParameteri(self.target, pname, param)
			end
			function META:GetParameteriv(pname, params)
				bind(self) return gl.GetTexParameteriv(self.target, pname, params)
			end
			function META:CopySubImage2DEXT(level, xoffset, yoffset, x, y, width, height)
				bind(self) return gl.CopyTexSubImage2DEXT(self.target, level, xoffset, yoffset, x, y, width, height)
			end
			function META:SetParameterIuiv(pname, params)
				bind(self) return gl.TexParameterIuiv(self.target, pname, params)
			end
			function META:Storage2DMultisample(samples, internalformat, width, height, fixedsamplelocations)
				bind(self) return gl.TexStorage2DMultisample(self.target, samples, internalformat, width, height, fixedsamplelocations)
			end
			function META:CompressedSubImage3DEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
				bind(self) return gl.CompressedTextureSubImage3DEXT(texture, self.target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits)
			end
			function META:GenerateMipmapEXT()
				bind(self) return gl.GenerateMipmapEXT(self.target)
			end
			function META:GetParameterfvEXT(texture, pname, params)
				bind(self) return gl.GetTextureParameterfvEXT(texture, self.target, pname, params)
			end
			function META:GenerateMipmap()
				bind(self) return gl.GenerateMipmap(self.target)
			end
			function META:CopyImage1D(level, internalformat, x, y, width, border)
				bind(self) return gl.CopyTexImage1DEXT(self.target, level, internalformat, x, y, width, border)
			end
			function META:GetParameterfv(pname, params)
				bind(self) return gl.GetTexParameterfv(self.target, pname, params)
			end
			function META:CompressedSubImage1D(level, xoffset, width, format, imageSize, data)
				bind(self) return gl.CompressedTexSubImage1D(self.target, level, xoffset, width, format, imageSize, data)
			end
			function META:SubImage1D(level, xoffset, width, format, type, pixels)
				bind(self) return gl.TexSubImage1D(self.target, level, xoffset, width, format, type, pixels)
			end
			function META:CopySubImage3D(level, xoffset, yoffset, zoffset, x, y, width, height)
				bind(self) return gl.CopyTexSubImage3D(self.target, level, xoffset, yoffset, zoffset, x, y, width, height)
			end
			function META:GetLevelParameteriv(level, pname, params)
				bind(self) return gl.GetTexLevelParameteriv(self.target, level, pname, params)
			end
			function META:Storage2D(levels, internalformat, width, height)
				bind(self) return gl.TexStorage2D(self.target, levels, internalformat, width, height)
			end
			function META:SubImage2DEXT(level, xoffset, yoffset, width, height, format, type, pixels)
				bind(self) return gl.TexSubImage2DEXT(self.target, level, xoffset, yoffset, width, height, format, type, pixels)
			end
			function META:SubImage2D(level, xoffset, yoffset, width, height, format, type, pixels)
				bind(self) return gl.TexSubImage2D(self.target, level, xoffset, yoffset, width, height, format, type, pixels)
			end
			function META:GetCompressedImageEXT(texture, lod, img)
				bind(self) return gl.GetCompressedTextureImageEXT(texture, self.target, lod, img)
			end
			function META:SubImage3DEXT(level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
				bind(self) return gl.TexSubImage3DEXT(self.target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
			end
			local ctype = ffi.typeof('struct { int id, target; }')
			ffi.metatype(ctype, META)
			function META:Delete()
				gl.DeleteTextures(1, ffi.new('GLuint[1]', self.id))
			end
			function gl.CreateTextureNODSA(target)
				local self = setmetatable({}, META)
				self.id = gl.GenTexture()
				self.target = target
				return self
			end
		end
		if not gl.CreateTextures then
			gl.CreateTexture = gl.CreateTextureNODSA
		end
	end
end
gl.e = setmetatable({}, {__index = function(_, key)
	local ok, res = pcall(ffi.cast, "GL_LUA_ENUMS", key)

	if not ok then
		error(key .. "is not a valid enum", 2)
	end

	return tonumber(res)
end})
return gl
